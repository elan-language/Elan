


class Token
    property type TokenType
    property token Tokens
    property s String
    property i Integer
    property d Decimal
    property f Float
    property c As Char
end class
    
class Scanner
    private property source String

    enumeration TokenType // assume enumeration members must start with lower case
        typeIdentifier
        nonTypeIdentifier
        integerNumber
        decimalNumber
        doubleNumber
        verbatimString
        interpolatedString
        normalString
        character
        symbol
        operator
        endOfLine
        endOfStream
        keyword

        emptyCharacterError // slight oddity here. About the only error that the Scanner can catch
    end enumeration

    private property ch Char
    private property pos Integer
    property currentToken Token

    private property keywords    
    private property operators   
    private property punctuation 

    enumeration Tokens
        abstractToken           = 5
        catchToken              = 6
        classToken              = 7
        constantToken           = 8
        constructorToken        = 9
        doToken                 = 10
        elseToken               = 11
        endToken                = 12
        forToken                = 13
        functionToken           = 14
        ifToken                 = 15
        immutableToken          = 16
        inToken                 = 17
        lambdaToken             = 18
        letToken                = 19
        mainToken               = 20
        methodToken             = 21
        newToken                = 22
        nextToken               = 23
        privateToken            = 24
        procedureToken          = 25
        propertyToken           = 26
        repeatToken             = 27
        returnToken             = 28
        selfToken               = 29
        thisToken               = 30
        thenToken               = 31
        throwToken              = 32
        toToken                 = 1
        tryToken                = 33
        untilToken              = 34
        varToken                = 35
        whileToken              = 36
        withToken               = 37
        ArrayToken              = 40
        ListToken               = 41
        DictionaryToken         = 42
        plusEqualToken          = 52
        minusEqualToken         = 53
        timesEqualToken         = 54
        divideEqualToken        = 55
        equalToken              = 56
        rightArrowToken         = 57
        leftBraceToken          = 58
        rightBraceToken         = 59
        leftBracketToken        = 60
        rightBracketToken       = 61
        leftParenthesisToken    = 62
        rightParenthesisToken   = 63
        dotDotToken             = 64
        dotToken                = 65
        commaToken              = 66
        colonToken              = 67
        plusToken               = 68
        minusToken              = 69
        timesToken              = 70
        divideToken             = 71
        powerToken              = 72
        modToken                = 73
        divToken                = 74
        lessThanToken           = 75
        greaterThanToken        = 76
        questionMarkToken       = 77
        andToken                = 78
        notToken                = 79
        orToken                 = 80
        xorToken                = 81
        lessThanOrEqualToken    = 84
        greaterThanOrEqualToken = 85
        definitionToken         = 86
        exclamationMarkToken    = 87
        endoflineToken          = 88
        endofsourceToken        = 89
    end enumeration

    function keywordArray() as Array<String>
        return keywords.keys.toArray()
    end function
    
    function operatorsArray() as Array<String>
        return operators.keys.toArray()
    end function

    function punctuationArray() as Array<String>
        return punctuation.keys.toArray()
    end function
    
    procedure loadTokenLiterals()
        keywords    = new Dictionary<String, Integer>()
        operators   = new Dictionary<String, Integer>()
        punctuation = new Dictionary<String, Integer>()
        
        keywords.add("abstract", 5)
        keywords.add("catch", 6)
        keywords.add("class", 7)
        keywords.add("constant", 8)
        keywords.add("constructor", 9)
        keywords.add("do", 10)
        keywords.add("else", 11)
        keywords.add("end", 12)
        keywords.add("for", 13)
        keywords.add("function", 14)
        keywords.add("if", 15)
        keywords.add("immutable", 16)
        keywords.add("in", 17)
        keywords.add("lambda", 18)
        keywords.add("let", 19)
        keywords.add("main", 20)
        keywords.add("method", 21)
        keywords.add("new", 22)
        keywords.add("next", 23)
        keywords.add("private", 24)
        keywords.add("procedure", 25)
        keywords.add("property", 26)
        keywords.add("repeat", 27)
        keywords.add("return", 28)
        keywords.add("self", 29)
        keywords.add("this", 30)
        keywords.add("then", 31)
        keywords.add("throw", 32)
        keywords.add("to", 1)
        keywords.add("try", 33)
        keywords.add("until", 34)
        keywords.add("var", 35)
        keywords.add("while", 36)
        keywords.add("with", 37)
        keywords.add("Array", 40)
        keywords.add("List", 41)
        keywords.add("Dictionary", 42)

        operators.add("+=", 52)
        operators.add("-=", 53)
        operators.add("*=", 54)
        operators.add("/=", 55)
        operators.add("=", 56)

        punctuation.add("->", 57)
        punctuation.add("{", 58)
        punctuation.add("}", 59)
        punctuation.add("[", 60)
        punctuation.add("]", 61)
        punctuation.add("(", 62)
        punctuation.add(")", 63)
        punctuation.add("..", 64)
        punctuation.add(".", 65)
        punctuation.add(",", 66)
        punctuation.add(":", 67)

        operators.add("+", 68)
        operators.add("-", 69)
        operators.add("*", 70)
        operators.add("/", 71)
        operators.add("^", 72)
        operators.add("mod", 73)
        operators.add("div", 74)
        operators.add("<", 75)
        operators.add(">", 76)

        punctuation.add("?", 77)

        operators.add("and", 78)
        operators.add("not", 79)
        operators.add("or", 80)
        operators.add("xor", 81)
        operators.add("<=", 84)
        operators.add(">=", 85)
    end procedure

    constructor new(onText String)
        loadTokenLiterals()
        initialise(onText)
    end constructor

    procedure initialise(onText String) // so we can reuse the scanner
        source = onText
        pos = 0
        nextCharacter()
    end procedure

    procedure NextCharacter()
        ch = source.ElementAtOrDefault(pos)
        pos += 1
    end procedure

    procedure NextToken()
        constant END_OF_SOURCE = 'Â¬' // bit of a mess at the moment
        constant CR            = 13.asChar() // how do I do this?
        
        while ch = " " or ch = 10.asChar()
            nextCharacter()
        end while
        
        switch ch
            case 'A' to 'Z', 'a' .. 'z': // two possible forms, assuming more than one possibility per arm
                currentToken.tokenType = if ch > 'a' then TokenType.NonTypeIdentifier else TokenType.TypeIdentifier // awkward condition
                currentToken.s         = ""
                repeat 
                    .s = "{currentToken.s}{ch}"
                    nextCharacter()
                until not ch.isLetterOrDigit() and ch <> '_' // what did we decide about isnot?
                if keywords.keys().contains(currentToken.s) then
                    currentToken.tokenType = TokenType.Keyword
                end if
            case '+', '-' // do we need : at the end of the case?
                let sign = ch

                nextCharacter()
                if ch.isDigit() then
                    var number = ""
                    repeat
                        number = "{number}{ch}"
                        nextCharacter()
                    until not ch.isDigit() 
                    if ch = '.' then // we have a decimal of some sort
                        // TODO: handle double/float numbers once we know the syntax 
                        currentToken.tokenType = TokenType.DecimalNumber
                        nextCharacter()
                        while Char.IsDigit(ch)
                            number = "{number}{ch}"
                            nextCharacter()
                        end while
                        // TODO: handle exponents (note that 125)E|e34) without . is a valid double/float)
                        currentToken.d = (sign + number).asFloat() // or possibly .asFloat()
                    else
                        currentToken.tokenType = TokenType.integerNumber
                        currentToken.i         = (sign + number).asInteger() // FastColoredTextBox insists on aligning =
                    end if
                else if ch = '=' then
                    currentToken.tokenType = TokenType.operator
                    currentToken.token     = if sign is '+' then Tokens.plusEqualToken else Tokens.minusEqualsToken 
                    currentToken.s         = "{sign}="
                    nextCharacter()
                else if ch = '>' then
                    currentToken.tokenType = TokenType.symbol
                    currentToken.token = Tokens.definitionToken
                    currentToken.s     = "->"
                else
                    currentToken.tokenType = TokenType.operator
                    currentToken.token     = if sign is '+' then Tokens.plusToken else Tokens.minusToken
                    currentToken.s         = sign
                end if
            case '0' .. '9':
                var number = ""
                repeat 
                    number = "{number}{ch}"
                    NextCharacter()
                until not ch.isDigit()
                if ch = '.' then // we have a float/decimal of some sort, e.g., 3.14159, unsigned because otherwise the previous case would have caught it
                    // TODO: handle double numbers once we know the syntax 
                    number = "{number}."
                    nextCharacter()
                    while ch.isDigit()
                        number = "{number}{ch}"
                        nextCharacter()
                    end while 
                    // TODO: handle exponents (note that 125)E|e34) without . is presumably a valid double/float)
                    currentToken.tokenType = TokenType.decimalNumber
                    currentToken.d         = number.asFloat()
                else
                    currentToken.tokenType = TokenType.integerNumber
                    currentToken.i         = number.asInteger()
                end if
            case '.'
                currentToken.tokenType = TokenType.symbol
                nextCharacter()
                if ch is '.' then
                    currentToken.s     = ".."
                    currentToken.token = Tokens.dotdotToken
                    nextCharacter()
                else
                    currentToken.s = '.'
                    currentToken.token = Tokens.dotToken
                end if
            case ':', '>', '(', ')', '[', ']', '{', '}', ',':
                currentToken.tokenType = TokenType.symbol
                currentToken.s         = ch
                switch ch: // Does the switch statement really need a colon? formatting switch, does case go one tab stop further in?
                case ':':
                    currentToken.token = Tokens.colonToken
                case '>':
                    currentToken.token = Tokens.greaterThanToken
                case '(':
                    currentToken.token - Tokens.leftParenthesisToken
                case ')':
                    currentToken.token = Tokens.rightParenthesisToken
                case '[':
                    currentToken.token = Tokens.leftBracketToken
                case ']':
                    currentToken.token = Tokens.rightBracketToken
                case ',':
                    currentToken.token = Tokens.commaToken
                else:
                    assert(false, "Not all cases considered in first sub-switch statement in Scanner.nextToken()") 
                end switch
                nextCharacter()
            case '=':
                nextCharacter()
                if ch is '=' then
                    currentToken.tokenType = TokenType.operator
                    currentToken.token     = Tokens.equalequalToken // is is (the operator) the same as equalequalToken
                    currentToken.s         = "=="
                    nextCharacter()
                else
                    currentToken.tokenType = TokenType.symbol
                    currentToken.token     = Tokens.equalToken
                    currentToken.s         = "="
                end if
            case '!'
                nextCharacter()
                if ch = "=" then
                    currentToken.tokenType = TokenType.operator
                    currentToken.token     = Tokens.notequalToken
                    currentToken.s         = "<>"
                    nextCharacter()
                else
                    currentToken.tokenType = TokenType.symbol
                    currentToken.token     = Tokens.exclamationMarkToken
                    currentToken.s         = ch
                end if
            case '<'
                nextCharacter()
                if ch is '=' then
                    currentToken.tokenType = TokenType.operator
                    currentToken.token     = Tokens.lessequalOperator
                    currentToken.s         = "<="
                    nextCharacter()
                else if ch is '>' then
                    currentToken.tokenType = TokenType.operator
                    currentToken.token     = Tokens.notequalToken
                    currentToken.s         = "<>"
                    nextCharacter()
                else
                    currentToken.tokenType = TokenType.Symbol
                    currentToken.token     = Tokens.lessthanToken
                    .s                     = "<"
                end if
            case '*', '/': // + and - are handled earlier in case they start a number
                currentToken.tokenType = TokenType.operator
                var op = ch
                nextCharacter()
                if ch is '=' then
                    currentToken.token = if op is '*' then Tokens.timesequaltoken else Tokens.divideequalToken
                    currentToken.s     = op + "="
                    nextCharacter()
                else if ch = '/' then
                    // Got a comment
                    repeat
                        nextCharacter()
                    until ch.asInteger() = 13 or ch is END_OF_SOURCE
                    if ch <> END_OF_SOURCE then
                        currentToken.tokenType = TokenType.endOfLine
                        currentToken.token     = Tokens.endoflineToken
                        nextCharacter()
                    else
                        currentToken.tokenType = TokenType.endOfStream
                        currentToken.token     = Tokens.endofsourceToken
                    end if
                else
                    currentToken.token = if op is '*' then Tokens.timesToken else Tokens.divideToken
                    currentToken.s     = op
                end if
            case '//' 
                repeat
                    nextCharacter()
                until ch.asInteger() is 13 or ch = END_OF_SOURCE 
                if ch <> END_OF_SOURCE then
                    currentToken.tokenType = TokenType.endOfLine
                    currentToken.token     = Tokens.endoflineToken
                    nextCharacter()
                else
                    currentToken.tokenType = TokenType.endOfStream
                    currentToken.token     = Tokens.endofsourceToken
                end if
            case '"':
                currentToken.tokenType = TokenType.NormalString
                currentToken.s = ""
                repeat
                    nextCharacter()
                    if ch <> '"' then
                        currentToken.s = "{.s}{ch}"
                    end if
                    // TODO: work out doubling " to escape it (or just use \")
                until ch = '"'
                nextCharacter()
            case "'":
                .tokenType = TokenType.Character
                nextCharacter()
                if ch = '''' then // a single ' character
                    currentToken.tokenType = TokenType.EmptyCharacterError
                else
                    currentToken.c = ch
                    nextCharacter()
                end if
            case END_OF_SOURCE:
                currentToken.tokenType = TokenType.endOfStream
            case CR:
                currentToken.tokenType = TokenType.endOfLine
                nextCharacter()
        end switch
    end procedure
end class
































































