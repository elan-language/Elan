# FFFFFFFFFFFFFFFF Elan v0.1 valid
main
end main

class Game
    constructor(player1 Player, player2 Player,allowedWords List<String>)
        set property.player1 to player1
        set property.player2 to player2 
        set property.allowedWords to allowedWords
        set tileQueue to QueueOfTiles(100)
    end constructor

    property allowedWords List<String> 
    property player1 Player
    property player2 Player
    property tileQueue QueueOfTiles

    procedure initialiseForRandomStart()
        call setStartingHand(player1)
        call setStartingHand(player2)
        call tileQueue.initialise()
    end procedure

    procedure initialiseStandard()
        call player1.setTilesInHand("EDKUQMCTIK")
        call player2.setTilesInHand("BSA* HT*EPR")
        call tileQueue.initialise()
    end procedure

    function checkWordIsValid(word String) as String
        return allowedWords.contains(word)
    end function

    procedure setStartingHand(player Player)
        var hand = ""
        for count = 0 to startHandSize - 1
            var item = ""
            call tileQueue.remove(item)
            set hand to hand + item
            call tileQueue.add()
        end for
        call player.setTilesInHand(hand)
    end procedure

    function isPlayable() as Boolean
        return player1.tilesPlayed <= maxTilesPlayed and
            player2.tilesPlayed <= maxTilesPlayed and
            call player1.tilesInHand.length() < maxHandSize and
            call player2.tilesInHand.length() < maxHandSize
    end function

    procedure updateScoresWithPenalty()
        call player1.deductAnyPenalty()
        call player2.deductAnyPenalty()
    end procedure

    function checkWordIsInTiles(word String, player Player) as Boolean
        var inTiles = true
        var copyOfTiles = player.tilesInHand
        for count = 0 to word.length() - 1
            if copyOfTiles.contains(word[count]) then
               set copyOfTiles to copyOfTiles.remove(copyOfTiles.indexOf(word[count]), 1)
            else if copyOfTiles.contains('*') then
               set copyOfTiles to copyOfTiles.remove(copyOfTiles.indexOf('*'), 1)
            else
               set inTiles to false
            end if
        end for
        return inTiles
    end function

    procedure updateAfterAllowedWord(player Player, word String)
        var wordAsPlayed = ""
        call player.wordAsWouldBePlayed(word, wordAsPlayed)
        call player.removeLetters(wordAsPlayed)
        call player.addToScore(getScoreForWord(wordAsPlayed))
    end procedure

    function getScoreForWord(word String) as Int
        var score = 0
        for count = 0 to word.length() - 1
            set score to score + tileDictionary[word[count]]
        end for
        if word.length() > 7 then
            set score to score + 20
        else if word.length() > 5 then
            set score to score + 5
        end if
        return score
    end function

    function listTileValues(player Player) as String
        var values = "                  "
        each c in player.tilesInHand
            set values to values + tileDictionary[c]
        end each
        return values
    end function

    function showTileQueue() as String
        return tileQueue.show()
    end function

    procedure addEndOfTurnTiles(player Player, newTileChoice String, word String)
        var noOfEndOfTurnTiles = 0
        if newTileChoice is "1" then
                set noOfEndOfTurnTiles to word.length()
        else if newTileChoice is "2" then
                set noOfEndOfTurnTiles to 3
        else
                set noOfEndOfTurnTiles to word.length() + 3
        end if
        for count = 0 to noOfEndOfTurnTiles - 1
            var letter = ""
            call tileQueue.withdrawNextLetter(letter)
            call player.addToLetters(letter)
            call tileQueue.add()
        end for
    end procedure

    function tileValuesAsString() as String
        var s = "
TILE VALUES
"
        each k in tileDictionary.keys()
            var v = tileDictionary[k]
            set s to s + "Point for {k}: {v}"
        end each
        set s to s + newline
        return s
    end function

    procedure fillHandWithTiles(player Player)
        while player.tilesInHand.length() <= maxHandSize
            var letter = ""
            call tileQueue.withdrawNextLetter(letter)
            call player.addToLetters(letter)
            call tileQueue.add()
        end while
    end procedure

    function asString() as String 
        return "A Game"
    end function
end class

class Player
    constructor(name String)
        set property.name to name
        set score to 50
    end constructor

    property name String
    property score Int
    property tilesPlayed Int
    property tilesInHand String

    procedure setTilesInHand(tiles String)
        set tilesInHand to tiles
    end procedure

    procedure addToLetters(letter Char)
        set tilesInHand to tilesInHand + letter
    end procedure

    procedure addToScore(points Int)
        set score to score + points
    end procedure

    procedure removeLetter(letter Char)
        var i = tilesInHand.indexOf(letter)
        set tilesInHand to tilesInHand[..i] + tilesInHand[i+1..]
    end procedure

    procedure wordAsWouldBePlayed(word String, asPlayed String)
        set asPlayed to ""
        set tilesPlayed to tilesPlayed + word.length()
        each letter in word
             var c = letter
             if not tilesInHand.contains(letter) then 
               set c to '*'
             end if
             set asPlayed to asPlayed + c
        end each
    end procedure

    procedure removeLetters(wordAsPlayed String)
        each letter in wordAsPlayed
             var x = letter
             call removeLetter(x)
        end each
    end procedure

    procedure deductAnyPenalty()
      each tile in tilesInHand
        set score to score - tileDictionary[tile]
      end each
    end procedure

    function asString() as String 
        return name
    end function
end class

class QueueOfTiles
    constructor(maxSize Int)
        set property.maxSize to maxSize
        set contents to Array<String>(maxSize)
        set rear to -1 # signifies 'empty'
    end constructor

    private property contents Array<String>
    private property rear Int
    private property maxSize Int

    procedure initialise()
        set rear to -1
        for count = 0 to maxSize - 1
           call add()
        end for
    end procedure

    function isNotEmpty() as Boolean
         return rear is not -1
    end function

    procedure withdrawNextLetter(letter String)
        if isNotEmpty() then
            set letter to contents[0]
            for count = 1 to rear
                set contents[count - 1] to contents[count]
            end for
            set contents[rear] to ""
            set rear to rear - 1
        end if
    end procedure

    procedure add()
        if rear < maxSize - 1 then
            set rear to rear + 1
            var n = random(0, 30)
            set contents[rear] to letters[n].asString()
        end if
    end procedure

    function show() as String
       var result = ""
       each letter in contents
         set result to result + letter       
       end each
       return result + newline
    end function

    function asString() as String 
        return show()
    end function
end class

constant welcome = "
++++++++++++++++++++++++++++++++++++++
Welcome to the WORDS WITH AQA game
++++++++++++++++++++++++++++++++++++++


"
constant tileChoiceMenu = "
Do you want to
     replace the tiles you used(1) OR
     get three extra tiles(2) OR
     replace the tiles you used and get three extra tiles(3) OR
     get no new tiles(4) ? "

constant menu3 = "
Either
    enter the word you would like to play OR
    press 1 to display the letter values OR
    press 4 to view the tile queue OR
    press 7 to view your tiles again OR
    press 0 to fill hand and stop the game" 

constant tileMenuChoices = { "1", "2", "3", "4" }
constant tileDictionary = {'A': 1,'B': 2,'C': 2,'D': 2,'E': 1,'F': 3,'G': 2,'H': 3,'I': 1,'J': 5,'K': 3,'L': 2,'M': 2,'N': 1,'O': 1,'P': 2,'Q': 5,'R': 1,'S': 1,'T': 1,'U': 2,'V': 3,'W': 3,'X': 5,'Y': 3,'Z': 5}
constant startHandSize = 15
constant maxHandSize = 20
constant maxTilesPlayed = 50
constant letters = "****ABCDEFGHIJKLMNOPQRSTUVWXYZ"
constant mainMenu = "
========= 
MAIN MENU
=========

1. Play game with random start hand,
2. Play game with training start hand
9. Quit"