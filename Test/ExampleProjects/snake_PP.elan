# Elan v0.1 valid FFFFFFFFFFFFFFFF
main
    print welcome
    var k set to system.readKey()
    var newGame set to true
    while newGame
        call playGame()
        print "Do you want to play again (y/n)?"
        var answer set to ' '
        repeat
            set answer to system.readKey()
        until answer is 'y' or answer is 'n'
        if answer is 'n' then
            set newGame to false
        end if
    end while
end main

constant directionByKey set to { 'w': Direction.up, 's' : Direction.down, 'a': Direction.left, 'd': Direction.right}
constant welcome set to "Welcome to the Snake game. 

Use the w,a,s, and d keys to control the direction of the snake. Letting the snake get to any edge will lose you the game, as will letting the snake's head pass over its body. Eating an apple will
cause the snake to grow by one segment. 

If you want to re-size the window, please do so now, before starting the game.

Press any key to start.."

procedure playGame()
    var charMap set to new CharMap()
    call charMap.fillBackground()
    var boardWidth set to charMap.width div 2
    var boardHeight set to charMap.height
    var currentDirection set to Direction.right
    var startTail set to (boardWidth div 2, boardHeight div 2)
    var body set to new List<of (Int, Int)>()
    set body to body + startTail
    var head set to getAdjacentSquare(startTail, currentDirection)
    var apple set to (0,0)
    call setNewApplePosition(body, apple, boardWidth, boardHeight)

    var gameOn set to true
    while gameOn
        call draw(charMap, head, Colour.green)
        call draw(charMap, apple, Colour.red)
        var priorTail set to snakeTail(body)
        call pause(200)
        var pressed set to system.keyHasBeenPressed()
        if pressed then
            var k set to system.readKey()
            set currentDirection to directionByKey[k]
        end if
        call clockTick(body, head, apple, currentDirection, boardWidth, boardHeight, gameOn)
        if snakeTail(body) is not priorTail then
            call draw(charMap, priorTail, charMap.backgroundColour)
        end if
    end while
    call charMap.setCursor(0, 0)
    var score set to body.length() - 2
    print "Game Over! Score: {score}"
end procedure

function snakeTail(body List<of (Int, Int)>) as (Int, Int)
  return body[0]
end function

procedure draw(cm CharMap, sq (Int, Int), colour Colour)
    var col set to sq.first() * 2
    var row set to sq.second()
    call cm.putBlockWithColour(col, row, colour)
    call cm.putBlockWithColour(col + 1, row, colour) # because block is 2 chars wide
end procedure

procedure clockTick(out body List<of (Int, Int)>, out head (Int, Int),out apple (Int, Int), d Direction, boardWidth Int, boardHeight Int, out continue Bool)
    set body to body + head
    set head to head.getAdjacentSquare(d)
    if head is apple then
        call setNewApplePosition(body, apple, boardWidth, boardHeight)
    else
        set body to body[1..]
    end if
    set continue to not hasHitEdge(head, boardWidth, boardHeight) and not bodyCovers(body, head)
end procedure

function bodyCovers(body List<of (Int, Int)>, sq (Int, Int)) as Bool
    var result set to false
    each seg in body
        if (seg is sq) then
            set result to true
        end if
    end each
    return result
end function

function hasHitEdge(head (Int, Int), boardWidth Int, boardHeight Int) as Bool
    var x set to head.first()
    var y set to head.second()
    return x < 0 or y < 0 or x is boardWidth or y is boardHeight
end function

procedure setNewApplePosition(body List<of (Int, Int)>, out apple (Int, Int) ,boardWidth Int ,boardHeight Int)
    repeat
        var ranW set to system.random(boardWidth-1)
        var ranH set to system.random(boardHeight-1)
        var newPos set to (ranW, ranH) 
        set apple to newPos
    until not bodyCovers(body, apple)
end procedure

function getAdjacentSquare(sq (Int, Int), d Direction) as (Int, Int)
    var newX set to sq.first()
    var newY set to sq.second()
    switch d
        case Direction.left
            set newX to newX - 1     
        case Direction.right
            set newX to newX + 1
        case Direction.up
            set newY to newY - 1 
        case Direction.down
            set newY to newY + 1
        default
    end switch
    return (newX, newY)
end function