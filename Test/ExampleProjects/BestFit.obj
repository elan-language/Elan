using System.Collections.Generic;
using StandardLibrary;
using static Globals;
using static StandardLibrary.Constants;

public static partial class Globals {
  public static readonly StandardLibrary.ElanList<(int, double)> example = new StandardLibrary.ElanList<(int, double)>((0, 2.673040396), (1, 3.550437254), (2, 5.063963424), (3, 6.445493589), (4, 5.959864362), (5, 7.826499306), (6, 5.628729698), (7, 10.65942485), (8, 8.010532477), (9, 10.67121885), (10, 9.000669447), (11, 13.50830072), (12, 11.43464406), (13, 13.58275437), (14, 13.10821319), (15, 10.28617997), (16, 17.86384888), (17, 15.20409345), (18, 17.00764549), (19, 12.11596949));
  public static double calcSumX(StandardLibrary.ElanList<(double, double)> points) {

    return StandardLibrary.Functions.reduce(points, 0.0, (s, p) => s + p[0]);
  }
  public static double calcSumY(StandardLibrary.ElanList<(double, double)> points) {

    return StandardLibrary.Functions.reduce(points, 0.0, (s, p) => s + p[1]);
  }
  public static double calcSumXsq(StandardLibrary.ElanList<(double, double)> points) {

    return StandardLibrary.Functions.reduce(points, 0.0, (s, p) => s + p[0] * p[0]);
  }
  public static double calcSumXY(StandardLibrary.ElanList<(double, double)> points) {

    return StandardLibrary.Functions.reduce(points, 0.0, (s, p) => s + p[0] * p[1]);
  }
  public static double calcA(double sumX, double sumXsq, double sumY, double sumXY, int n) {

    return Compiler.WrapperFunctions.FloatDiv((sumY * sumXsq - sumX * sumXY), (n * sumXsq - sumX * sumX));
  }
  public static double calcB(double sumX, double sumXsq, double sumY, double sumXY, int n) {

    return Compiler.WrapperFunctions.FloatDiv((n * sumXY - sumX * sumY), (n * sumXsq - sumX * sumX));
  }
  public static (double, double) bestFitFromSummaryTerms(double sumX, double sumX2, double sumY, double sumXY, int n) {

    return (Globals.calcA(sumX, sumX2, sumY, sumXY, n), Globals.calcB(sumX, sumX2, sumY, sumXY, n));
  }
  public static (double, double) bestFitFromPoints(StandardLibrary.ElanList<(double, double)> points) {

    return Globals.bestFitFromSummaryTerms(Globals.calcSumX(points), Globals.calcSumXsq(points), Globals.calcSumY(points), Globals.calcSumXY(points), StandardLibrary.Functions.length(points));
  }
}

public static class Program {
  private static void Main(string[] args) {

  }
}