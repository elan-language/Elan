main
end main

function calcSumX(points List<of (Float, Float)>) as Float -> 
    points.reduce(0.0, lambda s,p -> s + p[0])

function calcSumY(points List<of (Float, Float)>) as Float ->
    points.reduce(0.0, lambda s,p -> s + p[1])

function calcSumXsq(points List<of (Float, Float)>) as Float -> 
    points.reduce(0.0, lambda s,p -> s + p[0] * p[0])

function calcSumXY(points List<of (Float, Float)>) as Float -> 
    points.reduce(0.0, lambda s,p ->s + p[0] * p[1])

function calcA(sumX Float, sumXsq Float, sumY Float, sumXY Float, n Int) as Float ->
    (sumY * sumXsq - sumX * sumXY) / (n * sumXsq - sumX * sumX)

function calcB(sumX Float, sumXsq Float, sumY Float, sumXY Float, n Int) as Float ->
    (n * sumXY - sumX * sumY) / (n * sumXsq - sumX * sumX)

function bestFitFromSummaryTerms(sumX Float, sumX2 Float, sumY Float, sumXY Float, n Int) as (Float, Float) ->
    (calcA(sumX, sumX2, sumY, sumXY, n), calcB(sumX, sumX2, sumY, sumXY, n))

function bestFitFromPoints(points List<of (Float, Float)>) as (Float, Float) ->
    bestFitFromSummaryTerms(calcSumX(points), calcSumXsq(points), calcSumY(points), calcSumXY(points), points.length())


constant example set to {(0, 2.673040396), (1, 3.550437254), (2, 5.063963424), (3, 6.445493589), (4, 5.959864362), (5, 7.826499306), (6, 5.628729698), (7, 10.65942485), (8, 8.010532477), (9, 10.67121885), (10, 9.000669447), (11, 13.50830072), (12, 11.43464406), (13, 13.58275437), (14, 13.10821319), (15, 10.28617997), (16, 17.86384888), (17, 15.20409345), (18, 17.00764549), (19, 12.11596949)}

test

end test