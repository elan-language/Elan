#TODO look for all the add to list or dictionary - as both are now immutable

class GridGraph
    constructor(gridSize Int)
        set nodes to new Set<of Point>()
        set property.gridSize to gridSize
        call setBlock(new Point(0, 0), new Point(gridSize - 1, gridSize - 1), true)
    end constructor

    property gridSize Int
    property nodes Set<of Point> 

    procedure setBlock(p1 Point, p2 Point, add Bool)
# TODO: check that p1, p2 are in right order!
        for x from p1.x  to p2.x
            for y from p1.y to p2.y
                var p set to new Point(x, y)
                if add then
                  set nodes to nodes.add(p)
                else
                  set nodes to  nodes.remove(p)
                end if
            end for
        end for
    end procedure

    function nodeExists(p Point) as Bool ->  nodes.contains(p)

    function pointsAreAdjacentDiagonally(p1 Point,p2 Point) as Bool ->
         abs(p1.x - p2.x) is 1 and abs(p1.y - p2.y) is 1

# Assumes that it will only be called if the points ARE immediate neighbours
#   function findEdge(p1 Point, p2 Point) as Float -> p1.distanceFrom(p2)
# Returns a list of nodes that can be reached from the specified node
    function neighbours(p Point) as List<of Point>
        var list set to { new Point(p.x, p.y-1),new Point(p.x+1, p.y-1),new Point(p.x+1, p.y),new Point(p.x+1, p.y+1),new Point(p.x, p.y+1),new Point(p.x-1, p.y+1), new Point(p.x-1, p.y),new Point(p.x-1, p.y-1) }
        return list.filter(lambda n -> nodeExists(n)).asList()
    end function

# Returns a list of nodes, from source to destination, representing the shortest path, using dijkstra's algorithm
# You may make use of existing methods such a s Neignbours, or findEdge.
    procedure shortestPath(source Point, destination Point, alg Algorithm, out route List<of Point>)
# Initialise the 'table' with three 'columns' - one 'row' per node
        var visited set to newDictionaryOfAllPointsReturningFalseValues()
        var costFromSource set to  newDictionaryOfAllPointsReturningDoublesSetToInfinity()
        var via set to newDictionaryOfAllPointsReturningNull()
# Set start
        var currentNode set to source
        set costFromSource[currentNode] to 0
# Iterate until shortest path found
        while currentNode is not destination
            set visited[currentNode] to true
            call updateCostAndViaOfEachNeighbourIfApplicable(costFromSource, via, currentNode, destination)
            set currentNode to nextNodeToVisit(currentNode, visited, costFromSource, destination, alg)
            if costFromSource[currentNode] is infinity then
                throw "Cannot reach destination -  graph is 'disconnected'"
            else
            end if
        end while
        set route to retraceRoute(destination, source, via)
    end procedure

    function newDictionaryOfAllPointsReturningNull() as Dictionary<of Point,Point>
        var dict set to new Dictionary<of Point, Point>()
        each p in nodes
           set dict to dict.add(p, null)
        end each
        return dict
    end function

    function newDictionaryOfAllPointsReturningDoublesSetToInfinity() as Dictionary<of Point, Float>
        var dict set to new Dictionary<of Point, Float>()
        each p in nodes
            set dict to dict.add(p, infinity)
        end each
        return dict
    end function

    function newDictionaryOfAllPointsReturningFalseValues() as Dictionary<of Point, Bool>
        var dict set to new Dictionary<of Point, Bool>()
        each p in nodes
            set dict to dict.add(p, false)
        end each
        return dict
    end function

    procedure updateCostAndViaOfEachNeighbourIfApplicable(costFromSource Dictionary<of Point, Float>, out via Dictionary<of Point, Point>,  currentNode Point,  destination Point)
        each neighbour in neighbours(currentNode)
            var newCost set to costFromSource[currentNode] + findEdge(currentNode, neighbour)
            if newCost < costFromSource[neighbour] then
                set costFromSource[neighbour] to newCost # Wrong -  don't update cost to estimate -  update to actual. Use estimate to choose the lowest cost unvisited node only. 
                set via[neighbour]  to currentNode
            end if
        end each
    end procedure

    function estimatedCostToDestination(current Point, destination Point) as Float ->
        sqrt((current.x - destination.x) ^ 2 + (current.y - destination.y) ^ 2)

    function nextNodeToVisit(currentNode Point ,visited Dictionary<of Point, Bool> ,costFromSource Dictionary<of Point, Float> ,destination Point ,alg Algorithm ) as Point
        var lowestCostSoFar set to infinity
        var lowestCostNode set to nodes.first()
        var possibilities set to nodes.filter(lambda n ->  not visited[n] and costFromSource[n] < infinity)
        if possibilities.count() is 0 then
            throw "The graph is disconnected -  there are no routes from start to destination."
        end if
        each p in possibilities
            var cost set to 0.0
            switch alg
                case Algorithm.dijkstra
                    set cost to costFromSource[p]
                case Algorithm.optimistic
                    set cost to estimatedCostToDestination(p, destination)
                case Algorithm.aStar
                    set cost to costFromSource[p] + estimatedCostToDestination(p, destination)
                default
            end switch
            if cost < lowestCostSoFar then
                set lowestCostSoFar to cost
                set lowestCostNode to p
            end if
        end each
        return lowestCostNode
    end function

    function retraceRoute(destination Point, source Point, via Dictionary<of Point, Point>) as List<of Point>
        var result set to { destination }
        var currentNode set to destination
        while currentNode is not source
            var previous set to via[currentNode]
            set result to result.insert(0, previous)
            set currentNode to previous
        end while
        return result
    end function

    function sumOfEdges(route List<of Point>) as Float
        var result set to 0.0
        var stage set to 0
        while stage < route.length() - 1
            set result to result + findEdge(route[stage], route[stage + 1])
            set stage to stage + 1
        end while
        return result
    end function

    function asString() as String -> "a GridGraph"
end class


immutable class Point 
  constructor(x Int, y Int)
    set property.x to x
    set property.y to y
  end constructor

  property x Int
  property y Int

  function asString() as String -> "a GridGraph"
end class

enum Algorithms
        dijkstra, optimistic, aStar
end enum

constant infinity set to 1000000.0 # big enough for this purpose!