
constant allPossibleAnswers set to {"ABACK","ABASE","ABATE","ABBEY","ABBOT","ABHOR","ABIDE","ABLED","ABODE","ABORT","ABOUT","ABOVE"}
constant validWords set to {"ABACK","ABASE","ABATE","ABBEY","ABBOT","ABHOR","ABIDE","ABLED","ABODE","ABORT","ABOUT","ABOVE"}

main
   var possible set to validWords
   var marking set to ""
   var attempt set to "RAISE"
   while marking is not "*****"
      print attempt
      set marking to input
      set possible to possibleAnswersAfterAttempt(possible, attempt, marking).asList()
      set attempt to bestAttempt(possible, validWords)
   end while
end main

function isGreen(attempt String, target String, n Int) as Bool -> target[n] is attempt[n]

function setChar(word String, n Int, newChar Char) as String ->
    word[..n] + newChar + word[n+1..]

function setAttemptIfGreen(attempt String, target String, n Int) as String ->
    if attempt.isGreen(target, n) 
    then attempt.setChar(n, '*') 
    else attempt

function setTargetIfGreen(attempt String, target String, n Int) as String ->
    if attempt.isGreen(target, n) 
    then target.setChar(n, '.') 
    else target

function isAlreadyMarkedGreen(attempt String, n Int) as Bool -> attempt[n] is '*'

function isYellow(attempt String, target String, n Int) as Bool -> target.contains(attempt[n])

function setAttemptIfYellow(attempt String, target String, n Int) as String ->
    if attempt[n] is '*' 
    then attempt
    else if attempt.isYellow(target, n) 
    then attempt.setChar(n, '+')
    else attempt.setChar(n, '_')

function setTargetIfYellow(attempt String, target String, n Int) as String  ->
    if attempt.isAlreadyMarkedGreen(n) 
    then target
    else if attempt.isYellow(target, n) 
    then target.setChar(target.indexOf(attempt[n]), '.')
    else target

constant letterPositions set to {0,1,2,3,4}

function evaluateGreens(attempt String, target String) as (String, String) ->
    letterPositions.reduce((attempt, target), lambda a, x -> (setAttemptIfGreen(a.attempt, a.target, x), setTargetIfGreen(a.attempt, a.target, x)))

function evaluateYellows(attempt String, target String) as (String, String) ->
    letterPositions.reduce((attempt, target),lambda a, x -> (setAttemptIfYellow(a.attempt, a.target, x), setTargetIfYellow(a.attempt, a.target, x)))

function markAttempt(attempt String, target String) as String
    var (attemptAfterGreens, targetAfterGreens) set to evaluateGreens(attempt, target)
    return attemptAfterGreens.evaluateYellows(targetAfterGreens)[0]
end function

function possibleAnswersAfterAttempt(prior Iter<of String>, attempt String, mark String) as Iter<of String> ->
    prior.filter(lambda w -> markAttempt(attempt, w) is mark)

function wordCountRemainingAfterAttempt(possibleAnswers Iter<of String>, attempt String) as WordCount
    var groups set to possibleAnswers.groupBy(lambda w -> markAttempt(attempt, w))
    return new WordCount(attempt, groups.maxBy(lambda g -> g.members.count()).members.count())
end function

function allRemainingWordCounts(possAnswers List<of String>, possAttempts Iter<of String>) as Iter<of WordCount> ->
    possAttempts.asParallel().map(lambda w-> wordCountRemainingAfterAttempt(possAnswers, w))

function betterOf(wc1 WordCount, wc2 WordCount, possAnswers Iter<of String>) as WordCount
  var isBetter set to wc2.count < wc1.count
  var isEqualAndPossAnswer set to wc2.count is wc1.count and possAnswers.contains(wc2.word)
  return if isBetter or isEqualAndPossAnswer 
    then wc2 
    else wc1
end function

function bestAttempt(possAnswers List<of String>, possAttempts List<of String>) as String 
   var wordCounts set to allRemainingWordCounts(possAnswers, possAttempts)
   return wordCounts.reduce(wordCounts.head(),lambda bestSoFar, newWord -> betterOf(bestSoFar, newWord, possAnswers)).word
end function

immutable class WordCount
  constructor(word String, count Int) 
    set property.word to word
    set property.count to count
  end constructor

  property word String
  property count Int

  function asString() as String -> "{word}, {count}"
end class