main
    print welcome
    var k = readKey()
    var newGame = true
    while newGame
        call playGame()
        print "Do you want to play again (y/n)?"
        var answer = ' '
        repeat
            set answer to readKey()
        until answer is 'y' or answer is 'n'
        if answer is 'n' then
            set newGame to false
        end if
    end while
end main

constant bodyColour = Colour.green
constant appleColour = Colour.red
constant directionByKey = { 'w': Direction.up, 's' : Direction.down, 'a': Direction.left, 'd': Direction.right}
constant welcome = "Welcome to the Snake game. 

Use the w,a,s, and d keys to control the direction of the snake. Letting the snake get to any edge will lose you the game, as will letting the snake's head pass over its body. Eating an apple will
cause the snake to grow by 

If you want to re-size the window, please do so now, before starting the game.

Click on this window to get 'focus' (and see a flashing cursor). Then press any key to start.."

procedure playGame()
    var charMap = CharMapLive()
    call charMap.fillBackground()
    var currentDirection = Direction.right
    var game = Game(charMap.width, charMap.height, currentDirection)
    var gameOn = true
    call game.setNewApplePosition()
    while gameOn
        var head = game.head()
        call charMap.putBlockWithColour(head.x, head.y, bodyColour)
        call charMap.putBlockWithColour(head.x + 1, head.y, bodyColour)
        var apple = game.apple
        call charMap.putBlockWithColour(apple.x, apple.y, appleColour)
        call charMap.putBlockWithColour(apple.x + 1, apple.y, appleColour)
        var priorTail = game.tail()
        call pause(200)
        var pressed = keyHasBeenPressed()
        if pressed then
            var k = readKey()
            set currentDirection to directionByKey[k]
        end if
        call game.clockTick(currentDirection, gameOn)
        if game.tail() is not priorTail then
            call charMap.clear(priorTail.x, priorTail.y)
            call charMap.clear(priorTail.x + 1, priorTail.y) # Need to clear two blocks to cover one square
        end if
#       charMap.display() # needed if using a CharacterMapBuffered
    end while
    call clearKeyBuffer()
    call charMap.setCursor(0, 0)
    print "Game Over! Score: {game.getScore()}"
end procedure

class Game    
    constructor (width Int, height Int, startingDirection Direction)
        set self.width to width
        set self.height to height
        var halfW = width div 2
        var halfH = height div 2
        var centreW = halfW
        if (halfW mod 2) is not 0 then
          set centreW to halfW + 1
        end if
        var centreH = halfH
        if (halfH mod 2) is not 0 then
          set centreH to halfH + 1
        end if
        set snake to Snake(centreW, centreH, startingDirection) 
        call setNewApplePosition()
    end constructor

    private property width Int
    private property height Int
    private property snake Snake
    property apple Square

    function head() as Square
      return snake.head
    end function

    function tail() as Square
      return snake.tail()
    end function

    procedure clockTick(d Direction, continue Bool)
        call snake.advanceHeadOneSquare(d)
        if snake.head is apple then
            call setNewApplePosition()
        else
            call snake.advanceTailOneSquare()
        end if
        set continue to not hasHitEdge() and not snake.hasHitItself()
    end procedure

    function hasHitEdge() as Bool
        var x = snake.head.x
        var y = snake.head.y
        return x < 0 or y < 0 or x is width or y is height
    end function

    procedure setNewApplePosition()
        var sq = Square(0,0)
        var collision = false
        repeat
            var ranW = random((width-2) div 2)
            var rh = random((height-2) div 2)
            var ranH = rh * 2-2
            set sq to Square(ranW * 2, ranH) 
        until not snake.bodyCovers(sq)
        set apple to sq
    end procedure

    function getScore() as Int
      return snake.length() - 2
    end function

    function asString() as String
      return "Game"
    end function
end class

class Snake
    constructor(x Int, y Int, startingDirection Direction)
        var tail = Square(x, y)
        set body to {tail}
        set head to tail.getAdjacentSquare(startingDirection)
    end constructor

    private property body List<Square>
    property head Square

    function tail() as Square 
      return body[body.length() -1]
    end function

    function hasHitItself() as Bool 
      return bodyCovers(head)
    end function

    function bodyCovers(sq Square) as Bool
      var result = false
      foreach seg in body
        if (seg is sq) then
          set result to true
        end if
      end foreach
      return result
    end function

    procedure advanceHeadOneSquare(d Direction)
        set body to body + head
        set head to head.getAdjacentSquare(d)
    end procedure

    procedure advanceTailOneSquare()
        set body to body[1..]
    end procedure

    function length() as Int 
      return body.length()
    end function

    function asString() as String
      return "Snake"
    end function
end class

class Square
    constructor (x Int, y Int)
        set self.x to x
        set self.y to y
    end constructor

    property x Int
    property y Int

    function getAdjacentSquare(d Direction) as Square
        var newX = x
        var newY = y
        switch d
            case Direction.left
                set newX to newX - 2     # Horizontal adjacent is +/- 2 because a square is 2 display chars wide
            case Direction.right
                set newX to newX + 2
            case Direction.up
                set newY to newY - 1 
            case Direction.down
                set newY to newY + 1
            default
        end switch
        return Square(newX, newY)
    end function

    function asString() as String 
      return "{x},{y}"
    end function
end class