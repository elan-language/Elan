main
  var sn = Snake(3,4, Direction.right)
  print sn
  print sn.head
  print sn.tail()
  call sn.advanceHeadOneSquare(Direction.right)
  print sn.head
  print sn.tail()
  call sn.advanceHeadOneSquare(Direction.down)
  print sn.head
  print sn.tail()
  print sn.bodyCovers(Square(5,4))
  print sn.hasHitItself()
end main

class Snake
    constructor(x Int, y Int, startingDirection Direction)
        var tail = Square(x, y)
        set body to {tail}
        set head to tail.getAdjacentSquare(startingDirection)
    end constructor

    private property body List<Square>
    property head Square

    function tail() as Square 
      return body[body.length() -1]
    end function

    function hasHitItself() as Bool 
      return bodyCovers(head)
    end function

    function bodyCovers(sq Square) as Bool
      var result = false
      foreach seg in body
        if (seg is sq) then
          set result to true
        end if
      end foreach
      return result
    end function

    procedure advanceHeadOneSquare(d Direction)
        set body to body + head
        set head to head.getAdjacentSquare(d)
    end procedure

    procedure advanceTailOneSquare()
        set body to body[1..]
    end procedure

    function length() as Int 
      return body.length()
    end function

    function asString() as String
      return "Snake"
    end function
end class

class Square
    constructor (x Int, y Int)
        set self.x to x
        set self.y to y
    end constructor

    property x Int
    property y Int

    function getAdjacentSquare(d Direction) as Square
        var newX = x
        var newY = y
        switch d
            case Direction.left
                set newX to newX - 2     # Horizontal adjacent is +/- 2 because a square is 2 display chars wide
            case Direction.right
                set newX to newX + 2
            case Direction.up
                set newY to newY - 1 
            case Direction.down
                set newY to newY + 1
            default
        end switch
        return Square(newX, newY)
    end function

    function asString() as String 
      return "{x},{y}"
    end function
end class