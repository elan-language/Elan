main
end main

class Game
    constructor(player1 Player, player2 Player,allowedWords List<String>)
        self.player1 = player1
        self.player2 = player2 
        self.allowedWords = allowedWords
        tileQueue = QueueOfTiles(100)
    end constructor

    property allowedWords List<String> 
    property player1 Player
    property player2 Player
    property tileQueue QueueOfTiles

    procedure initialiseForRandomStart()
        setStartingHand(player1)
        setStartingHand(player2)
        tileQueue.initialise()
    end procedure

    procedure initialiseStandard()
        player1.setTilesInHand("EDKUQMCTIK")
        player2.setTilesInHand("BSA* HT*EPR")
        tileQueue.initialise()
    end procedure

    function checkWordIsValid(word String) -> String
        return allowedWords.contains(word)
    end function

    procedure setStartingHand(player Player)
        var hand = ""
        for count = 0 to startHandSize - 1
            var item = ""
            tileQueue.remove(item)
            hand = hand + item
            tileQueue.add()
        end for
        player.setTilesInHand(hand)
    end procedure

    function isPlayable() -> Boolean
        return player1.tilesPlayed <= maxTilesPlayed and
            player2.tilesPlayed <= maxTilesPlayed and
            player1.tilesInHand.length() < maxHandSize and
            player2.tilesInHand.length() < maxHandSize
    end function

    procedure updateScoresWithPenalty()
        player1.deductAnyPenalty()
        player2.deductAnyPenalty()
    end procedure

    function checkWordIsInTiles(word String, player Player) -> Boolean
        var inTiles = true
        var copyOfTiles = player.tilesInHand
        for count = 0 to word.length() - 1
            if copyOfTiles.contains(word[count]) then
               copyOfTiles = copyOfTiles.remove(copyOfTiles.indexOf(word[count]), 1)
            else if copyOfTiles.contains('*') then
               copyOfTiles = copyOfTiles.remove(copyOfTiles.indexOf('*'), 1)
            else
               inTiles = false
            end if
        end for
        return inTiles
    end function

    procedure updateAfterAllowedWord(player Player, word String)
        var wordAsPlayed = ""
        player.wordAsWouldBePlayed(word, wordAsPlayed)
        player.removeLetters(wordAsPlayed)
        player.addToScore(getScoreForWord(wordAsPlayed))
    end procedure

    function getScoreForWord(word String) -> Int
        var score = 0
        for count = 0 to word.length() - 1
            score = score + tileDictionary[word[count]]
        end for
        if word.length() > 7 then
            score = score + 20
        else if word.length() > 5 then
            score = score + 5
        end if
        return score
    end function

    function listTileValues(player Player) -> String
        var values = "                  "
        foreach c in player.tilesInHand
            values = values + tileDictionary[c]
        end foreach
        return values
    end function

    function showTileQueue() -> String
        return tileQueue.show()
    end function

    procedure addEndOfTurnTiles(player Player, newTileChoice String, word String)
        var noOfEndOfTurnTiles = 0
        if newTileChoice is "1" then
                noOfEndOfTurnTiles = word.length()
        else if newTileChoice is "2" then
                noOfEndOfTurnTiles = 3
        else
                noOfEndOfTurnTiles = word.length() + 3
        end if
        for count = 0 to noOfEndOfTurnTiles - 1
            var letter = ""
            tileQueue.withdrawNextLetter(letter)
            player.addToLetters(letter)
            tileQueue.add()
        end for
    end procedure

    function tileValuesAsString() -> String
        var s = "
TILE VALUES
"
        foreach k in tileDictionary.keys()
            var v = tileDictionary[k]
            s = s + "Point for {k}: {v}"
        end foreach
        s = s + newline
        return s
    end function

    procedure fillHandWithTiles(player Player)
        while player.tilesInHand.length() <= maxHandSize
            var letter = ""
            tileQueue.withdrawNextLetter(letter)
            player.addToLetters(letter)
            tileQueue.add()
        end while
    end procedure

    function asString() -> String 
        return "A Game"
    end function
end class

class Player
    constructor(name String)
        self.name = name
        score = 50
    end constructor

    property name String
    property score Int
    property tilesPlayed Int
    property tilesInHand String

    procedure setTilesInHand(tiles String)
        tilesInHand = tiles
    end procedure

    procedure addToLetters(letter Char)
        tilesInHand = tilesInHand + letter
    end procedure

    procedure addToScore(points Int)
        score = score + points
    end procedure

    procedure removeLetter(letter Char)
        var i = tilesInHand.indexOf(letter)
        tilesInHand = tilesInHand[..i] + tilesInHand[i+1..]
    end procedure

    procedure wordAsWouldBePlayed(word String, asPlayed String)
        asPlayed = ""
        tilesPlayed = tilesPlayed + word.length()
        foreach letter in word
             var c = letter
             if not tilesInHand.contains(letter) then 
               c = '*'
             end if
             asPlayed = asPlayed + c
        end foreach
    end procedure

    procedure removeLetters(wordAsPlayed String)
        foreach letter in wordAsPlayed
             var x = letter
             removeLetter(x)
        end foreach
    end procedure

    procedure deductAnyPenalty()
      foreach tile in tilesInHand
        score = score - tileDictionary[tile]
      end foreach
    end procedure

    function asString() -> String 
        return name
    end function
end class

class QueueOfTiles
    constructor(maxSize Int)
        self.maxSize = maxSize
        contents = Array<String>(maxSize)
        rear = -1 # signifies 'empty'
    end constructor

    private property contents Array<String>
    private property rear Int
    private property maxSize Int

    procedure initialise()
        rear = -1
        for count = 0 to maxSize - 1
           add()
        end for
    end procedure

    function isNotEmpty() -> Boolean
         return rear is not -1
    end function

    procedure withdrawNextLetter(letter String)
        if isNotEmpty() then
            letter = contents[0]
            for count = 1 to rear
                contents[count - 1] = contents[count]
            end for
            contents[rear] = ""
            rear = rear - 1
        end if
    end procedure

    procedure add()
        if rear < maxSize - 1 then
            rear = rear + 1
            var n = random(0, 30)
            contents[rear] = letters[n].asString()
        end if
    end procedure

    function show() -> String
       var result = ""
       foreach letter in contents
         result = result + letter       
       end foreach
       return result + newline
    end function

    function asString() -> String 
        return show()
    end function
end class

constant welcome = "
++++++++++++++++++++++++++++++++++++++
Welcome to the WORDS WITH AQA game
++++++++++++++++++++++++++++++++++++++


"
constant tileChoiceMenu = "
Do you want to
     replace the tiles you used(1) OR
     get three extra tiles(2) OR
     replace the tiles you used and get three extra tiles(3) OR
     get no new tiles(4) ? "

constant menu3 = "
Either
    enter the word you would like to play OR
    press 1 to display the letter values OR
    press 4 to view the tile queue OR
    press 7 to view your tiles again OR
    press 0 to fill hand and stop the game" 

constant tileMenuChoices = { "1", "2", "3", "4" }
constant tileDictionary = {'A': 1,'B': 2,'C': 2,'D': 2,'E': 1,'F': 3,'G': 2,'H': 3,'I': 1,'J': 5,'K': 3,'L': 2,'M': 2,'N': 1,'O': 1,'P': 2,'Q': 5,'R': 1,'S': 1,'T': 1,'U': 2,'V': 3,'W': 3,'X': 5,'Y': 3,'Z': 5}
constant startHandSize = 15
constant maxHandSize = 20
constant maxTilesPlayed = 50
constant letters = "****ABCDEFGHIJKLMNOPQRSTUVWXYZ"
constant mainMenu = "
========= 
MAIN MENU
=========

1. Play game with random start hand,
2. Play game with training start hand
9. Quit"