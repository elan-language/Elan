
constant allPossibleAnswers = {"ABACK", "..." }
constant validWords = { "ABACK", "..." }

main
   var possible = allPossibleAnswers
   var marking = ""
   var attempt = "RAISE"
   while marking is not "*****"
      call printLine(attempt)
      set marking to input("Please mark the attempt")
      set possible to possibleAnswersAfterAttempt(possible, attempt, marking).asList()
      set attempt to bestAttempt(possible, validWords)
   end while
end main

function isGreen(attempt String, target String, n Int) as Bool -> target[n] is attempt[n]

function setChar(word String, n Int, newChar Char) as String ->
    word[..n] + newChar + word[n+1..]

function setAttemptIfGreen(attempt String, target String, n Int) as String ->
    if attempt.isGreen(target, n) then attempt.setChar(n, '*') else attempt

function setTargetIfGreen(attempt String, target String, n Int) as String ->
    if attempt.isGreen(target, n) then target.setChar(n, '.') else target

function isYellow(attempt String, target String, n Int) as Bool -> target.contains(attempt[n])

function setAttemptIfYellow(attempt String, target String, n Int) as String ->
    if attempt[n] is '*' then attempt
    else if attempt.isYellow(target, n) then attempt.setChar(n, '+')
    else attempt.setChar(n, '_')

function setTargetIfYellow(attempt String, target String, n Int) as String  ->
    if attempt.isAlreadyMarkedGreen(n) then target
    else if attempt.isYellow(target, n) then target.setChar(target.indexOf(attempt[n]), '.')
    else target

function evaluateGreens(attempt String, target String) as (String, String) ->
    range(5).reduce((attempt, target),
    lambda a, x->
    (setAttemptIfGreen(a.attempt, a.target, x), setTargetIfGreen(a.attempt, a.target, x)))

function evaluateYellows(attempt String, target String) as (String, String) ->
    range(5).reduce((attempt, target),
    lambda a, x -> (setAttemptIfYellow(a.attempt, a.target, x), setTargetIfYellow(a.attempt, a.target, x)))

function markAttempt(attempt String, target String) as String ->
    let (attemptAfterGreens, targetAfterGreens) = evaluateGreens(attempt, target) in
    attemptAfterGreens.evaluateYellows(targetAfterGreens)[0]

function possibleAnswersAfterAttempt(prior Iter<String>, attempt String, mark String) as Iter<String> ->
    prior.filter(lambda w -> markAttempt(attempt, w) is mark)

function wordCountRemainingAfterAttempt(possibleAnswers Iter<String>, attempt String) as Int ->
    let groups = possibleAnswers.groupBy(lambda w -> markAttempt(attempt, w)) in
    groups.max(lambda g -> g.count())

function allRemainingWordCounts(possAnswers List<String>, possAttempts Iter<String>) as Iter<(String, Int)> ->
    possAttempts.asParallel().map(lambda w-> (w, wordCountRemainingAfterAttempt(possAnswers, w)))

function betterOf(word1 (String, Int), word2 (String, Int), possAnswers Iter<String>) as (String, Int)  ->
    let
        (w1, w1Count) = word1,
        (w2, w2Count) = word2,  
        isBetter to w2Count < w1Count,
        isEqualAndPossAnswer = w2Count is w1Count and possAnswers.contains(w2)
    in
    if isBetter or isEqualAndPossAnswer then word2 else word1

function bestAttempt(possAnswers List<String>, possAttempts List<String>) as String ->
   let wordCounts = allRemainingWordCounts(possAnswers, possAttempts) in
   wordCounts.reduce(lambda bestSoFar, newWord -> betterOf(bestSoFar, newWord, possAnswers))[0]