main
  var g set to exampleCells
  while true
    call drawGrid(g)
    set g to nextGeneration(g)
  end while
end main

procedure drawGrid(cm CharMap, grid List<of Bool>)
#   should be re-done using buffered char map to reduce flickering.
    for row from 0 to 19
      for col from 0 to 19
         var cell set to grid[col * 20 + row]
         var colour set to if cell
           then black
           else white
         call cm.putBlockWithColour(col * 2, row, colour)
         call cm.putBlockWithColour(col * 2 + 1, row, colour) # because square block is 2 chars wide
      end for
    end for
end procedure

function north(c Int) as Int -> 
  if c > 19 
  then c - 20 
  else c + 380

function south(c Int) as Int -> 
  if c < 380 
  then c + 20
  else c - 380

function east(c Int) as Int -> 
  if c mod 20 < 19
  then c + 1
  else c - 19

function west(c Int) as Int -> 
  if c mod 20 > 0
  then c - 1 
  else c + 19

function northEast(c Int) as Int -> north(east(c))
function southEast(c Int) as Int -> south(east(c))
function northWest(c Int) as Int -> north(west(c))
function southWest(c Int) as Int -> south(west(c))

function neighbourCells(c Int) as List<of Int> -> 
  {northWest(c), north(c), northEast(c), west(c), east(c), southWest(c), south(c), southEast(c)}

function liveNeighbours(cells List<of Bool>, c Int) as Int -> 
  neighbourCells(c).count(lambda i -> cells[i])

function willLive(currentlyAlive Bool, liveNeighbours Int) as Bool -> 
  if currentlyAlive 
  then liveNeighbours > 1 and liveNeighbours < 4 
  else liveNeighbours is 3

function nextCellValue(cells List<of Bool>, c Int) as Bool ->
  willLive(cells[c], liveNeighbours(cells, c))

function nextGeneration(cells List<of Bool>) as List<of Bool> -> 
  cells.map(lambda (c, n) -> nextCellValue(cells, n)).asList()

constant exampleCells set to {false, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false}


