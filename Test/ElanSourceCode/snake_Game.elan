main
end main

class Game    
    constructor (width Int, height Int, startingDirection Direction)
        self.width = width
        self.height = height
        var halfW = width / 2
        var halfH = height / 2
        var centreW = halfW
        if (halfW mod 2) is not 0 then
          centreW = halfW + 1
        end if
        var centreH = halfH
        if (halfH mod 2) is not 0 then
          centreH = halfH + 1
        end if
        snake = Snake(centreW, centreH, startingDirection) 
        setNewApplePosition()
    end constructor

    private property width Int
    private property height Int
    private property snake Snake
    property apple Square

    procedure clockTick(d Direction, continue Bool)
        snake.advanceHeadOneSquare(d)
        if snake.head is apple then
            setNewApplePosition()
        else
            snake.advanceTailOneSquare()
        end if
        continue = not hasHitEdge() and not snake.hasHitItself()
    end procedure

    function hasHitEdge() -> Bool
        var x = snake.head.x
        var y = snake.head.y
        return x < 0 or y < 0 or x == width or y == height
    end function

    procedure setNewApplePosition()
        var sq = Square(0,0)
        repeat
            var ranW = random((width-2) / 2)
            var ranH = random((height-2) / 2) * 2-2
            sq = Square(ranW * 2, ranH)
        until not snake.bodyCovers(sq)
        apple = sq
    end procedure

    function getScore() -> Int
      return snake.length() - 2
    end function

    function asString() -> String
      return "Game"
    end function
end class


class Snake
    constructor(x Int, y Int, startingDirection Direction)
        var tail = Square(x, y)
        body = {tail}
        head = tail.getAdjacentSquare(startingDirection)
    end constructor

    private property body List<Square>
    property head Square

    function tail() -> Square 
      return body[body.length() -1]
    end function

    function hasHitItself() -> Bool 
      return bodyCovers(head)
    end function

    function bodyCovers(sq Square) -> Bool
      var result = false
      foreach seg in body
        if (seg is sq) then
          result = true
        end if
      end foreach
      return result
    end function

    procedure advanceHeadOneSquare(d Direction)
        body = body + head
        head = head.getAdjacentSquare(d)
    end procedure

    procedure advanceTailOneSquare()
        body = body[1..]
    end procedure

    function length() -> Int 
      return body.length()
    end function

    function asString() -> String
      return "Snake"
    end function
end class

class Square
    constructor (x Int, y Int)
        self.x = x
        self.y = y
    end constructor

    property x Int
    property y Int

    function getAdjacentSquare(d Direction) -> Square
        var newX = x
        var newY = y
        switch d
            case Direction.left
                newX = newX - 2     # Horizontal adjacent is +/- 2 because a square is 2 display chars wide
            case Direction.right
                newX = newX + 2
            case Direction.up
                newY = newY - 1 
            case Direction.down
                newY = newY + 1
            default
        end switch
        return Square(newX, newY)
    end function

    function asString() -> String 
      return "{x},{y}"
    end function
end class