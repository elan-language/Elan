main
  var g = Game(10,10, Direction.right)
  call printLine(g.head())
  call printLine(g.tail())
  call g.clockTick(Direction.right, false)
  call printLine(g.head())
  call printLine(g.tail())
  call g.clockTick(Direction.right, false)
  call printLine(g.head())
  call printLine(g.tail())
  call g.clockTick(Direction.down, false)
  while not g.hasHitEdge()
   call g.clockTick(Direction.down, false)
  end while
  call printLine(g.hasHitEdge())
  call printLine(g.head())
  call printLine(g.tail())
end main

class Game    
    constructor (width Int, height Int, startingDirection Direction)
        set self.width to width
        set self.height to height
        var halfW = width div 2
        var halfH = height div 2
        var centreW = halfW
        if (halfW mod 2) is not 0 then
          set centreW to halfW + 1
        end if
        var centreH = halfH
        if (halfH mod 2) is not 0 then
          set centreH to halfH + 1
        end if
        set snake to Snake(centreW, centreH, startingDirection) 
        call setNewApplePosition()
    end constructor

    private property width Int
    private property height Int
    private property snake Snake
    property apple Square

    function head() -> Square
      return snake.head
    end function

    function tail() -> Square
      return snake.tail()
    end function

    procedure clockTick(d Direction, continue Bool)
        call snake.advanceHeadOneSquare(d)
        if snake.head is apple then
            call setNewApplePosition()
        else
            call snake.advanceTailOneSquare()
        end if
        set continue to not hasHitEdge() and not snake.hasHitItself()
    end procedure

    function hasHitEdge() -> Bool
        var x = snake.head.x
        var y = snake.head.y
        return x < 0 or y < 0 or x is width or y is height
    end function

    procedure setNewApplePosition()
        var sq = Square(0,0)
        var collision = false
        repeat
            var ranW = random((width-2) div 2)
            var ranH = random((height-2) div 2) * 2-2
            set sq to Square(ranW * 2, ranH) 
        until not snake.bodyCovers(sq)
        set apple to sq
    end procedure

    function getScore() -> Int
      return snake.length() - 2 # TODO change back to length
    end function

    function asString() -> String
      return "Game"
    end function
end class


class Snake
    constructor(x Int, y Int, startingDirection Direction)
        var tail = Square(x, y)
        set body to {tail}
        set head to tail.getAdjacentSquare(startingDirection)
    end constructor

    private property body List<Square>
    property head Square

    function tail() -> Square 
      return body[body.length() -1]
    end function

    function hasHitItself() -> Bool 
      return bodyCovers(head)
    end function

    function bodyCovers(sq Square) -> Bool
      var result = false
      foreach seg in body
        if (seg is sq) then
          set result to true
        end if
      end foreach
      return result
    end function

    procedure advanceHeadOneSquare(d Direction)
        set body to body + head
        set head to head.getAdjacentSquare(d)
    end procedure

    procedure advanceTailOneSquare()
        set body to body[1..]
    end procedure

    function length() -> Int 
      return body.length()
    end function

    function asString() -> String
      return "Snake"
    end function
end class

class Square
    constructor (x Int, y Int)
        set self.x to x
        set self.y to y
    end constructor

    property x Int
    property y Int

    function getAdjacentSquare(d Direction) -> Square
        var newX = x
        var newY = y
        switch d
            case Direction.left
                set newX to newX - 2     # Horizontal adjacent is +/- 2 because a square is 2 display chars wide
            case Direction.right
                set newX to newX + 2
            case Direction.up
                set newY to newY - 1 
            case Direction.down
                set newY to newY + 1
            default
        end switch
        return Square(newX, newY)
    end function

    function asString() -> String 
      return "{x},{y}"
    end function
end class