constant welcome = "
++++++++++++++++++++++++++++++++++++++
Welcome to the WORDS WITH AQA game
++++++++++++++++++++++++++++++++++++++


"
constant tileChoiceMenu = "
Do you want to
     replace the tiles you used(1) OR
     get three extra tiles(2) OR
     replace the tiles you used and get three extra tiles(3) OR
     get no new tiles(4) ? "

constant menu3 = "
Either
    enter the word you would like to play OR
    press 1 to display the letter values OR
    press 4 to view the tile queue OR
    press 7 to view your tiles again OR
    press 0 to fill hand and stop the game" 

constant tileMenuChoices = { "1", "2", "3", "4" }
constant tileDictionary = {'A': 1,'B': 2,'C': 2,'D': 2,'E': 1,'F': 3,'G': 2,'H': 3,'I': 1,'J': 5,'K': 3,'L': 2,'M': 2,'N': 1,'O': 1,'P': 2,'Q': 5,'R': 1,'S': 1,'T': 1,'U': 2,'V': 3,'W': 3,'X': 5,'Y': 3,'Z': 5}
constant startHandSize = 15
constant maxHandSize = 20
constant maxTilesPlayed = 50
constant letters = "****ABCDEFGHIJKLMNOPQRSTUVWXYZ"
constant mainMenu = "
========= 
MAIN MENU
=========

1. Play game with random start hand,
2. Play game with training start hand
9. Quit"

main
    print(welcome)
    var player1 = Player("Player One")
    var player2 = Player("Player Two")
    var allowedWords = List<String>()
    loadAllowedWords(allowedWords)
    var game = Game(player1, player2, allowedWords)
    var choice = ""
    var randomStart = false
    while choice is not "9"
        print(mainMenu)
        set choice to input("Enter your choice:")
        set randomStart to choice is "1"
    end while
    if randomStart then
        game.initialiseForRandomStart()
    else
        game.initialiseStandard()
    end if
    play(game)
end main

procedure play(g Game)    
    while g.isPlayable()       
        haveTurn(g.player1, g)
        getKey("Press Enter to continue") 
        printLine()
        haveTurn(g.player2, g)
    end while
    game.updateScoresWithPenalty()
    displayWinner(g)
end procedure

procedure loadAllowedWords(allowedWords List<String>)
    try
        var file = openRead("aqawords.txt")
        while not fileReader.endOfStream
            var line = file.readLine()
            set allowedWords toallowedWords.add(line.trim().toUpper())
        end while
        file.close()
    catch e
        allowedWords.clear()
    end try
end procedure

procedure getChoice(choice String)
    var choice = ""
    print(menu3)
    set choice to input("> ")
    printLine()
    set choice to choice.asUpperCase()
end procedure

procedure getNewTileChoice(newTileChoice String)
    repeat
        print(tileChoiceMenu)
        set newTileChoice to input("> ")
    until tileMenuChoices.contains(newTileChoice)
end procedure

procedure displayWinner(game Game)
    var player1 = game.player1
    var player2 = game.player2
    var score1 = player1.score
    var score2 = player2.score
    printLine("**** GAME OVER! ****")
    printLine("{player1} your score is {score1}")
    printLine("{player2} your score is {score2}")
    if score1 > score2 then
        printLine("{player1} wins!")
    else if score2 > score1 then
        printLine("{player2} wins!")
    else
        printLine("It is a draw!")
    end if
end procedure

procedure haveTurn(player Player, game Game)
    print("{player.name} it is your turn.")
    print("Your current hand {player.tilesInHand}")
    print(game.listTileValues(player))
    var newTileChoice = "2"
    var validChoice = false
    var validWord = false
    var choice = ""
    while not validChoice
        getChoice(choice)
         if choice is "1" then
             print(game.tileValuesAsString())
         else if choice is "4" then
             print(game.showTileQueue())
         else if choice is "7" then
             print(game.listTileValues(player))
         else if choice is "0" then
             set validChoice to true
             game.fillHandWithTiles(player)
         else
             set validWord to game.checkWordIsInTiles(choice, player)
         end if
         if validWord then
             set validWord to game.checkWordIsValid(choice)
             if validWord then
                 print(newline() + "Valid word")
                 game.updateAfterAllowedWord(player, choice)
                 set newTileChoice to getNewTileChoice()
             end if
         end if
         if not validWord then
              print("Not a valid attempt, you lose your turn.")
         end if
            if newTileChoice <> "4"  then
                game.addEndOfTurnTiles(player, newTileChoice, choice)
            end if
            printLine("Your word was {choice}")
            printLine("Your new score is {player.score}")
            printLine("You have played {player.tilesPlayed} tiles so far in this game.")
  end while
end procedure



