//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Elan//Repository//Parser//Elan_Lexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Elan_Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NL=1, SINGLE_LINE_COMMENT=2, COMMENT_MARKER=3, AS=4, ABSTRACT=5, CALL=6, 
		CASE=7, CATCH=8, CLASS=9, CONSTANT=10, CONSTRUCTOR=11, CURRY=12, DEFAULT=13, 
		ELSE=14, END=15, ENUM=16, FOR=17, FOREACH=18, FUNCTION=19, GLOBAL=20, 
		IF=21, IMMUTABLE=22, IN=23, INHERITS=24, LAMBDA=25, LET=26, MAIN=27, PARTIAL=28, 
		PRINT=29, PRIVATE=30, PROCEDURE=31, PROPERTY=32, REPEAT=33, RETURN=34, 
		SELF=35, SET=36, STEP=37, SWITCH=38, SYSTEM=39, TEST=40, THEN=41, THROW=42, 
		TO=43, TRY=44, UNTIL=45, VAR=46, WHILE=47, WITH=48, BOOL_VALUE=49, VALUE_TYPE=50, 
		ARRAY=51, LIST=52, DICTIONARY=53, ITERABLE=54, ASSIGN=55, ARROW=56, OPEN_BRACE=57, 
		CLOSE_BRACE=58, OPEN_SQ_BRACKET=59, CLOSE_SQ_BRACKET=60, OPEN_BRACKET=61, 
		CLOSE_BRACKET=62, DOUBLE_DOT=63, DOT=64, COMMA=65, COLON=66, PLUS=67, 
		MINUS=68, MULT=69, DIVIDE=70, POWER=71, MOD=72, INT_DIV=73, LT=74, GT=75, 
		OP_AND=76, OP_NOT=77, OP_OR=78, OP_XOR=79, OP_EQ=80, OP_NE=81, OP_LE=82, 
		OP_GE=83, TYPENAME=84, IDENTIFIER=85, LITERAL_INTEGER=86, LITERAL_FLOAT=87, 
		LITERAL_CHAR=88, LITERAL_STRING=89, WHITESPACES=90, NEWLINE=91, WS=92;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NL", "SINGLE_LINE_COMMENT", "COMMENT_MARKER", "AS", "ABSTRACT", "CALL", 
		"CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", "CURRY", "DEFAULT", 
		"ELSE", "END", "ENUM", "FOR", "FOREACH", "FUNCTION", "GLOBAL", "IF", "IMMUTABLE", 
		"IN", "INHERITS", "LAMBDA", "LET", "MAIN", "PARTIAL", "PRINT", "PRIVATE", 
		"PROCEDURE", "PROPERTY", "REPEAT", "RETURN", "SELF", "SET", "STEP", "SWITCH", 
		"SYSTEM", "TEST", "THEN", "THROW", "TO", "TRY", "UNTIL", "VAR", "WHILE", 
		"WITH", "BOOL_VALUE", "VALUE_TYPE", "ARRAY", "LIST", "DICTIONARY", "ITERABLE", 
		"ASSIGN", "ARROW", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "DOUBLE_DOT", "DOT", "COMMA", "COLON", 
		"PLUS", "MINUS", "MULT", "DIVIDE", "POWER", "MOD", "INT_DIV", "LT", "GT", 
		"OP_AND", "OP_NOT", "OP_OR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
		"TYPENAME", "IDENTIFIER", "LITERAL_INTEGER", "LITERAL_FLOAT", "LITERAL_CHAR", 
		"LITERAL_STRING", "WHITESPACES", "InputCharacter", "NewLineCharacter", 
		"ExponentPart", "CommonCharacter", "SimpleEscapeSequence", "HexEscapeSequence", 
		"NewLine", "Whitespace", "UnicodeClassZS", "IdentifierStartingUCorLC", 
		"IdentifierStartingLC", "IdentifierStartingUC", "IdentifierPartCharacter", 
		"LetterCharacter", "DecimalDigitCharacter", "ConnectingCharacter", "FormattingCharacter", 
		"UnicodeEscapeSequence", "HexDigit", "UnicodeClassLU", "UnicodeClassLL", 
		"UnicodeClassND", "NEWLINE", "WS"
	};


	public Elan_Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Elan_Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#'", "'as'", "'abstract'", "'call'", "'case'", "'catch'", 
		"'class'", "'constant'", "'constructor'", "'curry'", "'default'", "'else'", 
		"'end'", "'enum'", "'for'", "'foreach'", "'function'", "'global'", "'if'", 
		"'immutable'", "'in'", "'inherits'", "'lambda'", "'let'", "'main'", "'partial'", 
		"'print'", "'private'", "'procedure'", "'property'", "'repeat'", "'return'", 
		"'self'", "'set'", "'step'", "'switch'", "'system'", "'test'", "'then'", 
		"'throw'", "'to'", "'try'", "'until'", "'var'", "'while'", "'with'", null, 
		null, "'Array'", "'List'", "'Dictionary'", "'Iter'", "'='", "'->'", "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "'..'", "'.'", "','", "':'", "'+'", 
		"'-'", "'*'", "'/'", "'^'", "'mod'", "'div'", "'<'", "'>'", "'and'", "'not'", 
		"'or'", "'xor'", "'is'", null, "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NL", "SINGLE_LINE_COMMENT", "COMMENT_MARKER", "AS", "ABSTRACT", 
		"CALL", "CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", "CURRY", 
		"DEFAULT", "ELSE", "END", "ENUM", "FOR", "FOREACH", "FUNCTION", "GLOBAL", 
		"IF", "IMMUTABLE", "IN", "INHERITS", "LAMBDA", "LET", "MAIN", "PARTIAL", 
		"PRINT", "PRIVATE", "PROCEDURE", "PROPERTY", "REPEAT", "RETURN", "SELF", 
		"SET", "STEP", "SWITCH", "SYSTEM", "TEST", "THEN", "THROW", "TO", "TRY", 
		"UNTIL", "VAR", "WHILE", "WITH", "BOOL_VALUE", "VALUE_TYPE", "ARRAY", 
		"LIST", "DICTIONARY", "ITERABLE", "ASSIGN", "ARROW", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"DOUBLE_DOT", "DOT", "COMMA", "COLON", "PLUS", "MINUS", "MULT", "DIVIDE", 
		"POWER", "MOD", "INT_DIV", "LT", "GT", "OP_AND", "OP_NOT", "OP_OR", "OP_XOR", 
		"OP_EQ", "OP_NE", "OP_LE", "OP_GE", "TYPENAME", "IDENTIFIER", "LITERAL_INTEGER", 
		"LITERAL_FLOAT", "LITERAL_CHAR", "LITERAL_STRING", "WHITESPACES", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Elan_Lexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Elan_Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,92,881,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
		7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
		7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
		7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
		7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,
		104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
		7,110,2,111,7,111,2,112,7,112,2,113,7,113,1,0,4,0,231,8,0,11,0,12,0,232,
		1,1,3,1,236,8,1,1,1,1,1,5,1,240,8,1,10,1,12,1,243,9,1,1,1,1,1,1,2,1,2,
		1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,
		1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,
		1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
		1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
		1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
		1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,
		1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
		1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,
		1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
		537,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,561,8,49,1,50,1,50,
		1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,55,
		1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,
		1,62,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,
		1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,73,
		1,73,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,
		1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,80,5,80,660,8,80,10,
		80,12,80,663,9,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,1,
		83,1,83,1,84,1,84,1,85,1,85,5,85,681,8,85,10,85,12,85,684,9,85,1,86,1,
		86,1,86,1,86,3,86,690,8,86,1,87,1,87,1,87,3,87,695,8,87,1,87,1,87,1,88,
		1,88,1,88,5,88,702,8,88,10,88,12,88,705,9,88,1,88,1,88,1,89,4,89,710,8,
		89,11,89,12,89,711,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,92,3,92,723,
		8,92,1,92,1,92,1,93,1,93,1,93,3,93,730,8,93,1,94,1,94,1,94,1,94,1,94,1,
		94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
		94,1,94,1,94,3,94,754,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
		1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
		1,95,1,95,3,95,781,8,95,1,96,1,96,1,96,3,96,786,8,96,1,97,1,97,3,97,790,
		8,97,1,98,1,98,1,99,1,99,3,99,796,8,99,1,99,5,99,799,8,99,10,99,12,99,
		802,9,99,1,100,1,100,5,100,806,8,100,10,100,12,100,809,9,100,1,101,1,101,
		5,101,813,8,101,10,101,12,101,816,9,101,1,102,1,102,1,102,1,102,3,102,
		822,8,102,1,103,1,103,1,103,3,103,827,8,103,1,104,1,104,3,104,831,8,104,
		1,105,1,105,1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,
		1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,
		3,107,857,8,107,1,108,3,108,860,8,108,1,109,1,109,1,110,1,110,1,111,1,
		111,1,112,3,112,869,8,112,1,112,1,112,3,112,873,8,112,1,113,4,113,876,
		8,113,11,113,12,113,877,1,113,1,113,0,0,114,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
		87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,
		109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,
		129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,
		149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,83,167,84,
		169,85,171,86,173,87,175,88,177,89,179,90,181,0,183,0,185,0,187,0,189,
		0,191,0,193,0,195,0,197,0,199,0,201,0,203,0,205,0,207,0,209,0,211,0,213,
		0,215,0,217,0,219,0,221,0,223,0,225,91,227,92,1,0,10,2,0,10,10,12,13,1,
		0,48,57,5,0,10,10,13,13,39,39,92,92,133,133,2,0,34,34,133,133,3,0,10,10,
		13,13,133,133,2,0,69,69,101,101,2,0,9,9,11,12,2,0,32,32,160,160,3,0,48,
		57,65,70,97,102,2,0,9,9,32,32,906,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
		0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
		105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
		115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,
		125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,
		135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,
		145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,
		155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,
		165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,
		175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,225,1,0,0,0,0,227,1,0,0,0,1,
		230,1,0,0,0,3,235,1,0,0,0,5,246,1,0,0,0,7,248,1,0,0,0,9,251,1,0,0,0,11,
		260,1,0,0,0,13,265,1,0,0,0,15,270,1,0,0,0,17,276,1,0,0,0,19,282,1,0,0,
		0,21,291,1,0,0,0,23,303,1,0,0,0,25,309,1,0,0,0,27,317,1,0,0,0,29,322,1,
		0,0,0,31,326,1,0,0,0,33,331,1,0,0,0,35,335,1,0,0,0,37,343,1,0,0,0,39,352,
		1,0,0,0,41,359,1,0,0,0,43,362,1,0,0,0,45,372,1,0,0,0,47,375,1,0,0,0,49,
		384,1,0,0,0,51,391,1,0,0,0,53,395,1,0,0,0,55,400,1,0,0,0,57,408,1,0,0,
		0,59,414,1,0,0,0,61,422,1,0,0,0,63,432,1,0,0,0,65,441,1,0,0,0,67,448,1,
		0,0,0,69,455,1,0,0,0,71,460,1,0,0,0,73,464,1,0,0,0,75,469,1,0,0,0,77,476,
		1,0,0,0,79,483,1,0,0,0,81,488,1,0,0,0,83,493,1,0,0,0,85,499,1,0,0,0,87,
		502,1,0,0,0,89,506,1,0,0,0,91,512,1,0,0,0,93,516,1,0,0,0,95,522,1,0,0,
		0,97,536,1,0,0,0,99,560,1,0,0,0,101,562,1,0,0,0,103,568,1,0,0,0,105,573,
		1,0,0,0,107,584,1,0,0,0,109,589,1,0,0,0,111,591,1,0,0,0,113,594,1,0,0,
		0,115,596,1,0,0,0,117,598,1,0,0,0,119,600,1,0,0,0,121,602,1,0,0,0,123,
		604,1,0,0,0,125,606,1,0,0,0,127,609,1,0,0,0,129,611,1,0,0,0,131,613,1,
		0,0,0,133,615,1,0,0,0,135,617,1,0,0,0,137,619,1,0,0,0,139,621,1,0,0,0,
		141,623,1,0,0,0,143,625,1,0,0,0,145,629,1,0,0,0,147,633,1,0,0,0,149,635,
		1,0,0,0,151,637,1,0,0,0,153,641,1,0,0,0,155,645,1,0,0,0,157,648,1,0,0,
		0,159,652,1,0,0,0,161,655,1,0,0,0,163,668,1,0,0,0,165,671,1,0,0,0,167,
		674,1,0,0,0,169,676,1,0,0,0,171,678,1,0,0,0,173,685,1,0,0,0,175,691,1,
		0,0,0,177,698,1,0,0,0,179,709,1,0,0,0,181,715,1,0,0,0,183,717,1,0,0,0,
		185,719,1,0,0,0,187,729,1,0,0,0,189,753,1,0,0,0,191,780,1,0,0,0,193,785,
		1,0,0,0,195,789,1,0,0,0,197,791,1,0,0,0,199,795,1,0,0,0,201,803,1,0,0,
		0,203,810,1,0,0,0,205,821,1,0,0,0,207,826,1,0,0,0,209,830,1,0,0,0,211,
		832,1,0,0,0,213,834,1,0,0,0,215,856,1,0,0,0,217,859,1,0,0,0,219,861,1,
		0,0,0,221,863,1,0,0,0,223,865,1,0,0,0,225,872,1,0,0,0,227,875,1,0,0,0,
		229,231,7,0,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,1,0,0,0,232,233,
		1,0,0,0,233,2,1,0,0,0,234,236,3,1,0,0,235,234,1,0,0,0,235,236,1,0,0,0,
		236,237,1,0,0,0,237,241,3,5,2,0,238,240,3,181,90,0,239,238,1,0,0,0,240,
		243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,241,1,
		0,0,0,244,245,6,1,0,0,245,4,1,0,0,0,246,247,5,35,0,0,247,6,1,0,0,0,248,
		249,5,97,0,0,249,250,5,115,0,0,250,8,1,0,0,0,251,252,5,97,0,0,252,253,
		5,98,0,0,253,254,5,115,0,0,254,255,5,116,0,0,255,256,5,114,0,0,256,257,
		5,97,0,0,257,258,5,99,0,0,258,259,5,116,0,0,259,10,1,0,0,0,260,261,5,99,
		0,0,261,262,5,97,0,0,262,263,5,108,0,0,263,264,5,108,0,0,264,12,1,0,0,
		0,265,266,5,99,0,0,266,267,5,97,0,0,267,268,5,115,0,0,268,269,5,101,0,
		0,269,14,1,0,0,0,270,271,5,99,0,0,271,272,5,97,0,0,272,273,5,116,0,0,273,
		274,5,99,0,0,274,275,5,104,0,0,275,16,1,0,0,0,276,277,5,99,0,0,277,278,
		5,108,0,0,278,279,5,97,0,0,279,280,5,115,0,0,280,281,5,115,0,0,281,18,
		1,0,0,0,282,283,5,99,0,0,283,284,5,111,0,0,284,285,5,110,0,0,285,286,5,
		115,0,0,286,287,5,116,0,0,287,288,5,97,0,0,288,289,5,110,0,0,289,290,5,
		116,0,0,290,20,1,0,0,0,291,292,5,99,0,0,292,293,5,111,0,0,293,294,5,110,
		0,0,294,295,5,115,0,0,295,296,5,116,0,0,296,297,5,114,0,0,297,298,5,117,
		0,0,298,299,5,99,0,0,299,300,5,116,0,0,300,301,5,111,0,0,301,302,5,114,
		0,0,302,22,1,0,0,0,303,304,5,99,0,0,304,305,5,117,0,0,305,306,5,114,0,
		0,306,307,5,114,0,0,307,308,5,121,0,0,308,24,1,0,0,0,309,310,5,100,0,0,
		310,311,5,101,0,0,311,312,5,102,0,0,312,313,5,97,0,0,313,314,5,117,0,0,
		314,315,5,108,0,0,315,316,5,116,0,0,316,26,1,0,0,0,317,318,5,101,0,0,318,
		319,5,108,0,0,319,320,5,115,0,0,320,321,5,101,0,0,321,28,1,0,0,0,322,323,
		5,101,0,0,323,324,5,110,0,0,324,325,5,100,0,0,325,30,1,0,0,0,326,327,5,
		101,0,0,327,328,5,110,0,0,328,329,5,117,0,0,329,330,5,109,0,0,330,32,1,
		0,0,0,331,332,5,102,0,0,332,333,5,111,0,0,333,334,5,114,0,0,334,34,1,0,
		0,0,335,336,5,102,0,0,336,337,5,111,0,0,337,338,5,114,0,0,338,339,5,101,
		0,0,339,340,5,97,0,0,340,341,5,99,0,0,341,342,5,104,0,0,342,36,1,0,0,0,
		343,344,5,102,0,0,344,345,5,117,0,0,345,346,5,110,0,0,346,347,5,99,0,0,
		347,348,5,116,0,0,348,349,5,105,0,0,349,350,5,111,0,0,350,351,5,110,0,
		0,351,38,1,0,0,0,352,353,5,103,0,0,353,354,5,108,0,0,354,355,5,111,0,0,
		355,356,5,98,0,0,356,357,5,97,0,0,357,358,5,108,0,0,358,40,1,0,0,0,359,
		360,5,105,0,0,360,361,5,102,0,0,361,42,1,0,0,0,362,363,5,105,0,0,363,364,
		5,109,0,0,364,365,5,109,0,0,365,366,5,117,0,0,366,367,5,116,0,0,367,368,
		5,97,0,0,368,369,5,98,0,0,369,370,5,108,0,0,370,371,5,101,0,0,371,44,1,
		0,0,0,372,373,5,105,0,0,373,374,5,110,0,0,374,46,1,0,0,0,375,376,5,105,
		0,0,376,377,5,110,0,0,377,378,5,104,0,0,378,379,5,101,0,0,379,380,5,114,
		0,0,380,381,5,105,0,0,381,382,5,116,0,0,382,383,5,115,0,0,383,48,1,0,0,
		0,384,385,5,108,0,0,385,386,5,97,0,0,386,387,5,109,0,0,387,388,5,98,0,
		0,388,389,5,100,0,0,389,390,5,97,0,0,390,50,1,0,0,0,391,392,5,108,0,0,
		392,393,5,101,0,0,393,394,5,116,0,0,394,52,1,0,0,0,395,396,5,109,0,0,396,
		397,5,97,0,0,397,398,5,105,0,0,398,399,5,110,0,0,399,54,1,0,0,0,400,401,
		5,112,0,0,401,402,5,97,0,0,402,403,5,114,0,0,403,404,5,116,0,0,404,405,
		5,105,0,0,405,406,5,97,0,0,406,407,5,108,0,0,407,56,1,0,0,0,408,409,5,
		112,0,0,409,410,5,114,0,0,410,411,5,105,0,0,411,412,5,110,0,0,412,413,
		5,116,0,0,413,58,1,0,0,0,414,415,5,112,0,0,415,416,5,114,0,0,416,417,5,
		105,0,0,417,418,5,118,0,0,418,419,5,97,0,0,419,420,5,116,0,0,420,421,5,
		101,0,0,421,60,1,0,0,0,422,423,5,112,0,0,423,424,5,114,0,0,424,425,5,111,
		0,0,425,426,5,99,0,0,426,427,5,101,0,0,427,428,5,100,0,0,428,429,5,117,
		0,0,429,430,5,114,0,0,430,431,5,101,0,0,431,62,1,0,0,0,432,433,5,112,0,
		0,433,434,5,114,0,0,434,435,5,111,0,0,435,436,5,112,0,0,436,437,5,101,
		0,0,437,438,5,114,0,0,438,439,5,116,0,0,439,440,5,121,0,0,440,64,1,0,0,
		0,441,442,5,114,0,0,442,443,5,101,0,0,443,444,5,112,0,0,444,445,5,101,
		0,0,445,446,5,97,0,0,446,447,5,116,0,0,447,66,1,0,0,0,448,449,5,114,0,
		0,449,450,5,101,0,0,450,451,5,116,0,0,451,452,5,117,0,0,452,453,5,114,
		0,0,453,454,5,110,0,0,454,68,1,0,0,0,455,456,5,115,0,0,456,457,5,101,0,
		0,457,458,5,108,0,0,458,459,5,102,0,0,459,70,1,0,0,0,460,461,5,115,0,0,
		461,462,5,101,0,0,462,463,5,116,0,0,463,72,1,0,0,0,464,465,5,115,0,0,465,
		466,5,116,0,0,466,467,5,101,0,0,467,468,5,112,0,0,468,74,1,0,0,0,469,470,
		5,115,0,0,470,471,5,119,0,0,471,472,5,105,0,0,472,473,5,116,0,0,473,474,
		5,99,0,0,474,475,5,104,0,0,475,76,1,0,0,0,476,477,5,115,0,0,477,478,5,
		121,0,0,478,479,5,115,0,0,479,480,5,116,0,0,480,481,5,101,0,0,481,482,
		5,109,0,0,482,78,1,0,0,0,483,484,5,116,0,0,484,485,5,101,0,0,485,486,5,
		115,0,0,486,487,5,116,0,0,487,80,1,0,0,0,488,489,5,116,0,0,489,490,5,104,
		0,0,490,491,5,101,0,0,491,492,5,110,0,0,492,82,1,0,0,0,493,494,5,116,0,
		0,494,495,5,104,0,0,495,496,5,114,0,0,496,497,5,111,0,0,497,498,5,119,
		0,0,498,84,1,0,0,0,499,500,5,116,0,0,500,501,5,111,0,0,501,86,1,0,0,0,
		502,503,5,116,0,0,503,504,5,114,0,0,504,505,5,121,0,0,505,88,1,0,0,0,506,
		507,5,117,0,0,507,508,5,110,0,0,508,509,5,116,0,0,509,510,5,105,0,0,510,
		511,5,108,0,0,511,90,1,0,0,0,512,513,5,118,0,0,513,514,5,97,0,0,514,515,
		5,114,0,0,515,92,1,0,0,0,516,517,5,119,0,0,517,518,5,104,0,0,518,519,5,
		105,0,0,519,520,5,108,0,0,520,521,5,101,0,0,521,94,1,0,0,0,522,523,5,119,
		0,0,523,524,5,105,0,0,524,525,5,116,0,0,525,526,5,104,0,0,526,96,1,0,0,
		0,527,528,5,116,0,0,528,529,5,114,0,0,529,530,5,117,0,0,530,537,5,101,
		0,0,531,532,5,102,0,0,532,533,5,97,0,0,533,534,5,108,0,0,534,535,5,115,
		0,0,535,537,5,101,0,0,536,527,1,0,0,0,536,531,1,0,0,0,537,98,1,0,0,0,538,
		539,5,73,0,0,539,540,5,110,0,0,540,561,5,116,0,0,541,542,5,70,0,0,542,
		543,5,108,0,0,543,544,5,111,0,0,544,545,5,97,0,0,545,561,5,116,0,0,546,
		547,5,67,0,0,547,548,5,104,0,0,548,549,5,97,0,0,549,561,5,114,0,0,550,
		551,5,83,0,0,551,552,5,116,0,0,552,553,5,114,0,0,553,554,5,105,0,0,554,
		555,5,110,0,0,555,561,5,103,0,0,556,557,5,66,0,0,557,558,5,111,0,0,558,
		559,5,111,0,0,559,561,5,108,0,0,560,538,1,0,0,0,560,541,1,0,0,0,560,546,
		1,0,0,0,560,550,1,0,0,0,560,556,1,0,0,0,561,100,1,0,0,0,562,563,5,65,0,
		0,563,564,5,114,0,0,564,565,5,114,0,0,565,566,5,97,0,0,566,567,5,121,0,
		0,567,102,1,0,0,0,568,569,5,76,0,0,569,570,5,105,0,0,570,571,5,115,0,0,
		571,572,5,116,0,0,572,104,1,0,0,0,573,574,5,68,0,0,574,575,5,105,0,0,575,
		576,5,99,0,0,576,577,5,116,0,0,577,578,5,105,0,0,578,579,5,111,0,0,579,
		580,5,110,0,0,580,581,5,97,0,0,581,582,5,114,0,0,582,583,5,121,0,0,583,
		106,1,0,0,0,584,585,5,73,0,0,585,586,5,116,0,0,586,587,5,101,0,0,587,588,
		5,114,0,0,588,108,1,0,0,0,589,590,5,61,0,0,590,110,1,0,0,0,591,592,5,45,
		0,0,592,593,5,62,0,0,593,112,1,0,0,0,594,595,5,123,0,0,595,114,1,0,0,0,
		596,597,5,125,0,0,597,116,1,0,0,0,598,599,5,91,0,0,599,118,1,0,0,0,600,
		601,5,93,0,0,601,120,1,0,0,0,602,603,5,40,0,0,603,122,1,0,0,0,604,605,
		5,41,0,0,605,124,1,0,0,0,606,607,5,46,0,0,607,608,5,46,0,0,608,126,1,0,
		0,0,609,610,5,46,0,0,610,128,1,0,0,0,611,612,5,44,0,0,612,130,1,0,0,0,
		613,614,5,58,0,0,614,132,1,0,0,0,615,616,5,43,0,0,616,134,1,0,0,0,617,
		618,5,45,0,0,618,136,1,0,0,0,619,620,5,42,0,0,620,138,1,0,0,0,621,622,
		5,47,0,0,622,140,1,0,0,0,623,624,5,94,0,0,624,142,1,0,0,0,625,626,5,109,
		0,0,626,627,5,111,0,0,627,628,5,100,0,0,628,144,1,0,0,0,629,630,5,100,
		0,0,630,631,5,105,0,0,631,632,5,118,0,0,632,146,1,0,0,0,633,634,5,60,0,
		0,634,148,1,0,0,0,635,636,5,62,0,0,636,150,1,0,0,0,637,638,5,97,0,0,638,
		639,5,110,0,0,639,640,5,100,0,0,640,152,1,0,0,0,641,642,5,110,0,0,642,
		643,5,111,0,0,643,644,5,116,0,0,644,154,1,0,0,0,645,646,5,111,0,0,646,
		647,5,114,0,0,647,156,1,0,0,0,648,649,5,120,0,0,649,650,5,111,0,0,650,
		651,5,114,0,0,651,158,1,0,0,0,652,653,5,105,0,0,653,654,5,115,0,0,654,
		160,1,0,0,0,655,656,5,105,0,0,656,657,5,115,0,0,657,661,1,0,0,0,658,660,
		3,195,97,0,659,658,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,1,0,
		0,0,662,664,1,0,0,0,663,661,1,0,0,0,664,665,5,110,0,0,665,666,5,111,0,
		0,666,667,5,116,0,0,667,162,1,0,0,0,668,669,5,60,0,0,669,670,5,61,0,0,
		670,164,1,0,0,0,671,672,5,62,0,0,672,673,5,61,0,0,673,166,1,0,0,0,674,
		675,3,203,101,0,675,168,1,0,0,0,676,677,3,201,100,0,677,170,1,0,0,0,678,
		682,7,1,0,0,679,681,7,1,0,0,680,679,1,0,0,0,681,684,1,0,0,0,682,680,1,
		0,0,0,682,683,1,0,0,0,683,172,1,0,0,0,684,682,1,0,0,0,685,686,3,171,85,
		0,686,687,3,127,63,0,687,689,3,171,85,0,688,690,3,185,92,0,689,688,1,0,
		0,0,689,690,1,0,0,0,690,174,1,0,0,0,691,694,5,39,0,0,692,695,8,2,0,0,693,
		695,3,187,93,0,694,692,1,0,0,0,694,693,1,0,0,0,695,696,1,0,0,0,696,697,
		5,39,0,0,697,176,1,0,0,0,698,703,5,34,0,0,699,702,8,3,0,0,700,702,3,187,
		93,0,701,699,1,0,0,0,701,700,1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,
		704,1,0,0,0,704,706,1,0,0,0,705,703,1,0,0,0,706,707,5,34,0,0,707,178,1,
		0,0,0,708,710,3,195,97,0,709,708,1,0,0,0,710,711,1,0,0,0,711,709,1,0,0,
		0,711,712,1,0,0,0,712,713,1,0,0,0,713,714,6,89,0,0,714,180,1,0,0,0,715,
		716,8,4,0,0,716,182,1,0,0,0,717,718,7,4,0,0,718,184,1,0,0,0,719,722,7,
		5,0,0,720,723,3,133,66,0,721,723,3,135,67,0,722,720,1,0,0,0,722,721,1,
		0,0,0,722,723,1,0,0,0,723,724,1,0,0,0,724,725,3,171,85,0,725,186,1,0,0,
		0,726,730,3,189,94,0,727,730,3,191,95,0,728,730,3,215,107,0,729,726,1,
		0,0,0,729,727,1,0,0,0,729,728,1,0,0,0,730,188,1,0,0,0,731,732,5,92,0,0,
		732,754,5,39,0,0,733,734,5,92,0,0,734,754,5,34,0,0,735,736,5,92,0,0,736,
		754,5,92,0,0,737,738,5,92,0,0,738,754,5,48,0,0,739,740,5,92,0,0,740,754,
		5,97,0,0,741,742,5,92,0,0,742,754,5,98,0,0,743,744,5,92,0,0,744,754,5,
		102,0,0,745,746,5,92,0,0,746,754,5,110,0,0,747,748,5,92,0,0,748,754,5,
		114,0,0,749,750,5,92,0,0,750,754,5,116,0,0,751,752,5,92,0,0,752,754,5,
		118,0,0,753,731,1,0,0,0,753,733,1,0,0,0,753,735,1,0,0,0,753,737,1,0,0,
		0,753,739,1,0,0,0,753,741,1,0,0,0,753,743,1,0,0,0,753,745,1,0,0,0,753,
		747,1,0,0,0,753,749,1,0,0,0,753,751,1,0,0,0,754,190,1,0,0,0,755,756,5,
		92,0,0,756,757,5,120,0,0,757,758,1,0,0,0,758,781,3,217,108,0,759,760,5,
		92,0,0,760,761,5,120,0,0,761,762,1,0,0,0,762,763,3,217,108,0,763,764,3,
		217,108,0,764,781,1,0,0,0,765,766,5,92,0,0,766,767,5,120,0,0,767,768,1,
		0,0,0,768,769,3,217,108,0,769,770,3,217,108,0,770,771,3,217,108,0,771,
		781,1,0,0,0,772,773,5,92,0,0,773,774,5,120,0,0,774,775,1,0,0,0,775,776,
		3,217,108,0,776,777,3,217,108,0,777,778,3,217,108,0,778,779,3,217,108,
		0,779,781,1,0,0,0,780,755,1,0,0,0,780,759,1,0,0,0,780,765,1,0,0,0,780,
		772,1,0,0,0,781,192,1,0,0,0,782,783,5,13,0,0,783,786,5,10,0,0,784,786,
		7,4,0,0,785,782,1,0,0,0,785,784,1,0,0,0,786,194,1,0,0,0,787,790,3,197,
		98,0,788,790,7,6,0,0,789,787,1,0,0,0,789,788,1,0,0,0,790,196,1,0,0,0,791,
		792,7,7,0,0,792,198,1,0,0,0,793,796,3,221,110,0,794,796,3,219,109,0,795,
		793,1,0,0,0,795,794,1,0,0,0,796,800,1,0,0,0,797,799,3,205,102,0,798,797,
		1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,200,1,0,0,
		0,802,800,1,0,0,0,803,807,3,221,110,0,804,806,3,205,102,0,805,804,1,0,
		0,0,806,809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,202,1,0,0,0,809,
		807,1,0,0,0,810,814,3,219,109,0,811,813,3,205,102,0,812,811,1,0,0,0,813,
		816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,815,204,1,0,0,0,816,814,1,
		0,0,0,817,822,3,219,109,0,818,822,3,221,110,0,819,822,3,209,104,0,820,
		822,5,95,0,0,821,817,1,0,0,0,821,818,1,0,0,0,821,819,1,0,0,0,821,820,1,
		0,0,0,822,206,1,0,0,0,823,827,3,219,109,0,824,827,3,221,110,0,825,827,
		3,215,107,0,826,823,1,0,0,0,826,824,1,0,0,0,826,825,1,0,0,0,827,208,1,
		0,0,0,828,831,3,223,111,0,829,831,3,215,107,0,830,828,1,0,0,0,830,829,
		1,0,0,0,831,210,1,0,0,0,832,833,3,215,107,0,833,212,1,0,0,0,834,835,3,
		215,107,0,835,214,1,0,0,0,836,837,5,92,0,0,837,838,5,117,0,0,838,839,1,
		0,0,0,839,840,3,217,108,0,840,841,3,217,108,0,841,842,3,217,108,0,842,
		843,3,217,108,0,843,857,1,0,0,0,844,845,5,92,0,0,845,846,5,85,0,0,846,
		847,1,0,0,0,847,848,3,217,108,0,848,849,3,217,108,0,849,850,3,217,108,
		0,850,851,3,217,108,0,851,852,3,217,108,0,852,853,3,217,108,0,853,854,
		3,217,108,0,854,855,3,217,108,0,855,857,1,0,0,0,856,836,1,0,0,0,856,844,
		1,0,0,0,857,216,1,0,0,0,858,860,7,8,0,0,859,858,1,0,0,0,860,218,1,0,0,
		0,861,862,2,65,90,0,862,220,1,0,0,0,863,864,2,97,122,0,864,222,1,0,0,0,
		865,866,2,48,57,0,866,224,1,0,0,0,867,869,5,13,0,0,868,867,1,0,0,0,868,
		869,1,0,0,0,869,870,1,0,0,0,870,873,5,10,0,0,871,873,5,13,0,0,872,868,
		1,0,0,0,872,871,1,0,0,0,873,226,1,0,0,0,874,876,7,9,0,0,875,874,1,0,0,
		0,876,877,1,0,0,0,877,875,1,0,0,0,877,878,1,0,0,0,878,879,1,0,0,0,879,
		880,6,113,0,0,880,228,1,0,0,0,31,0,232,235,241,536,560,661,682,689,694,
		701,703,711,722,729,753,780,785,789,795,800,807,814,821,826,830,856,859,
		868,872,877,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
