//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Elan//Repository//Parser//Elan.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ElanParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NL=1, SINGLE_LINE_COMMENT=2, COMMENT_MARKER=3, ABSTRACT=4, CASE=5, CATCH=6, 
		CLASS=7, CONSTANT=8, CONSTRUCTOR=9, CURRY=10, DEFAULT=11, ELSE=12, END=13, 
		ENUM=14, FOR=15, FOREACH=16, FUNCTION=17, GLOBAL=18, IF=19, IMMUTABLE=20, 
		IN=21, INHERITS=22, LAMBDA=23, LET=24, MAIN=25, PARTIAL=26, PRIVATE=27, 
		PROCEDURE=28, PROPERTY=29, REPEAT=30, RETURN=31, SELF=32, STEP=33, SWITCH=34, 
		TEST=35, THEN=36, TO=37, TRY=38, UNTIL=39, VAR=40, WHILE=41, WITH=42, 
		BOOL_VALUE=43, VALUE_TYPE=44, ARRAY=45, LIST=46, DICTIONARY=47, ITERABLE=48, 
		ASSIGN=49, ARROW=50, OPEN_BRACE=51, CLOSE_BRACE=52, OPEN_SQ_BRACKET=53, 
		CLOSE_SQ_BRACKET=54, OPEN_BRACKET=55, CLOSE_BRACKET=56, DOUBLE_DOT=57, 
		DOT=58, COMMA=59, COLON=60, PLUS=61, MINUS=62, MULT=63, DIVIDE=64, POWER=65, 
		MOD=66, INT_DIV=67, LT=68, GT=69, OP_AND=70, OP_NOT=71, OP_OR=72, OP_XOR=73, 
		OP_EQ=74, OP_NE=75, OP_LE=76, OP_GE=77, TYPENAME=78, IDENTIFIER=79, LITERAL_INTEGER=80, 
		LITERAL_FLOAT=81, LITERAL_CHAR=82, LITERAL_STRING=83, WHITESPACES=84, 
		NEWLINE=85, WS=86;
	public const int
		RULE_file = 0, RULE_main = 1, RULE_test = 2, RULE_statementBlock = 3, 
		RULE_callStatement = 4, RULE_varDef = 5, RULE_assignment = 6, RULE_inlineAsignment = 7, 
		RULE_assignableValue = 8, RULE_methodCall = 9, RULE_argumentList = 10, 
		RULE_procedureDef = 11, RULE_procedureSignature = 12, RULE_parameterList = 13, 
		RULE_parameter = 14, RULE_functionDef = 15, RULE_functionWithBody = 16, 
		RULE_expressionFunction = 17, RULE_letIn = 18, RULE_functionSignature = 19, 
		RULE_constantDef = 20, RULE_enumDef = 21, RULE_enumType = 22, RULE_enumValue = 23, 
		RULE_classDef = 24, RULE_mutableClass = 25, RULE_abstractClass = 26, RULE_immutableClass = 27, 
		RULE_abstractImmutableClass = 28, RULE_inherits = 29, RULE_property = 30, 
		RULE_constructor = 31, RULE_newInstance = 32, RULE_withClause = 33, RULE_proceduralControlFlow = 34, 
		RULE_if = 35, RULE_for = 36, RULE_foreach = 37, RULE_while = 38, RULE_repeat = 39, 
		RULE_try = 40, RULE_switch = 41, RULE_case = 42, RULE_caseDefault = 43, 
		RULE_expression = 44, RULE_bracketedExpression = 45, RULE_ifExpression = 46, 
		RULE_lambda = 47, RULE_index = 48, RULE_range = 49, RULE_value = 50, RULE_nameQualifier = 51, 
		RULE_literal = 52, RULE_literalValue = 53, RULE_dataStructureDefinition = 54, 
		RULE_literalDataStructure = 55, RULE_tupleDefinition = 56, RULE_literalTuple = 57, 
		RULE_deconstructedTuple = 58, RULE_listDefinition = 59, RULE_literalList = 60, 
		RULE_listDecomp = 61, RULE_arrayDefinition = 62, RULE_dictionaryDefinition = 63, 
		RULE_literalDictionary = 64, RULE_kvp = 65, RULE_literalKvp = 66, RULE_unaryOp = 67, 
		RULE_binaryOp = 68, RULE_arithmeticOp = 69, RULE_logicalOp = 70, RULE_conditionalOp = 71, 
		RULE_type = 72, RULE_dataStructureType = 73, RULE_genericSpecifier = 74, 
		RULE_tupleType = 75, RULE_funcType = 76;
	public static readonly string[] ruleNames = {
		"file", "main", "test", "statementBlock", "callStatement", "varDef", "assignment", 
		"inlineAsignment", "assignableValue", "methodCall", "argumentList", "procedureDef", 
		"procedureSignature", "parameterList", "parameter", "functionDef", "functionWithBody", 
		"expressionFunction", "letIn", "functionSignature", "constantDef", "enumDef", 
		"enumType", "enumValue", "classDef", "mutableClass", "abstractClass", 
		"immutableClass", "abstractImmutableClass", "inherits", "property", "constructor", 
		"newInstance", "withClause", "proceduralControlFlow", "if", "for", "foreach", 
		"while", "repeat", "try", "switch", "case", "caseDefault", "expression", 
		"bracketedExpression", "ifExpression", "lambda", "index", "range", "value", 
		"nameQualifier", "literal", "literalValue", "dataStructureDefinition", 
		"literalDataStructure", "tupleDefinition", "literalTuple", "deconstructedTuple", 
		"listDefinition", "literalList", "listDecomp", "arrayDefinition", "dictionaryDefinition", 
		"literalDictionary", "kvp", "literalKvp", "unaryOp", "binaryOp", "arithmeticOp", 
		"logicalOp", "conditionalOp", "type", "dataStructureType", "genericSpecifier", 
		"tupleType", "funcType"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#'", "'abstract'", "'case'", "'catch'", "'class'", 
		"'constant'", "'constructor'", "'curry'", "'default'", "'else'", "'end'", 
		"'enum'", "'for'", "'foreach'", "'function'", "'global'", "'if'", "'immutable'", 
		"'in'", "'inherits'", "'lambda'", "'let'", "'main'", "'partial'", "'private'", 
		"'procedure'", "'property'", "'repeat'", "'return'", "'self'", "'step'", 
		"'switch'", "'test'", "'then'", "'to'", "'try'", "'until'", "'var'", "'while'", 
		"'with'", null, null, "'Array'", "'List'", "'Dictionary'", "'Iter'", "'='", 
		"'->'", "'{'", "'}'", "'['", "']'", "'('", "')'", "'..'", "'.'", "','", 
		"':'", "'+'", "'-'", "'*'", "'/'", "'^'", "'mod'", "'div'", "'<'", "'>'", 
		"'and'", "'not'", "'or'", "'xor'", "'is'", null, "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NL", "SINGLE_LINE_COMMENT", "COMMENT_MARKER", "ABSTRACT", "CASE", 
		"CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", "CURRY", "DEFAULT", "ELSE", 
		"END", "ENUM", "FOR", "FOREACH", "FUNCTION", "GLOBAL", "IF", "IMMUTABLE", 
		"IN", "INHERITS", "LAMBDA", "LET", "MAIN", "PARTIAL", "PRIVATE", "PROCEDURE", 
		"PROPERTY", "REPEAT", "RETURN", "SELF", "STEP", "SWITCH", "TEST", "THEN", 
		"TO", "TRY", "UNTIL", "VAR", "WHILE", "WITH", "BOOL_VALUE", "VALUE_TYPE", 
		"ARRAY", "LIST", "DICTIONARY", "ITERABLE", "ASSIGN", "ARROW", "OPEN_BRACE", 
		"CLOSE_BRACE", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "DOUBLE_DOT", "DOT", "COMMA", "COLON", "PLUS", "MINUS", 
		"MULT", "DIVIDE", "POWER", "MOD", "INT_DIV", "LT", "GT", "OP_AND", "OP_NOT", 
		"OP_OR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "TYPENAME", "IDENTIFIER", 
		"LITERAL_INTEGER", "LITERAL_FLOAT", "LITERAL_CHAR", "LITERAL_STRING", 
		"WHITESPACES", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Elan.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ElanParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElanParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElanParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ElanParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext[] enumDef() {
			return GetRuleContexts<EnumDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef(int i) {
			return GetRuleContext<EnumDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 161;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 154;
						main();
						}
						break;
					case 2:
						{
						State = 155;
						procedureDef();
						}
						break;
					case 3:
						{
						State = 156;
						functionDef();
						}
						break;
					case 4:
						{
						State = 157;
						constantDef();
						}
						break;
					case 5:
						{
						State = 158;
						enumDef();
						}
						break;
					case 6:
						{
						State = 159;
						classDef();
						}
						break;
					case 7:
						{
						State = 160;
						test();
						}
						break;
					}
					} 
				}
				State = 165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 166;
				Match(NL);
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(ElanParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(ElanParser.MAIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(NL);
			State = 175;
			Match(MAIN);
			State = 176;
			statementBlock();
			State = 177;
			Match(NL);
			State = 178;
			Match(END);
			State = 179;
			Match(MAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEST() { return GetTokens(ElanParser.TEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEST(int i) {
			return GetToken(ElanParser.TEST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public TestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTest(this);
		}
	}

	[RuleVersion(0)]
	public TestContext test() {
		TestContext _localctx = new TestContext(Context, State);
		EnterRule(_localctx, 4, RULE_test);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(NL);
			State = 182;
			Match(TEST);
			State = 183;
			Match(IDENTIFIER);
			State = 184;
			statementBlock();
			State = 185;
			Match(NL);
			State = 186;
			Match(END);
			State = 187;
			Match(TEST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext[] proceduralControlFlow() {
			return GetRuleContexts<ProceduralControlFlowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext proceduralControlFlow(int i) {
			return GetRuleContext<ProceduralControlFlowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 193;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 189;
						varDef();
						}
						break;
					case 2:
						{
						State = 190;
						assignment();
						}
						break;
					case 3:
						{
						State = 191;
						proceduralControlFlow();
						}
						break;
					case 4:
						{
						State = 192;
						callStatement();
						}
						break;
					}
					} 
				}
				State = 197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(NL);
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 199;
				methodCall();
				}
				break;
			case 2:
				{
				{
				State = 200;
				assignableValue();
				State = 201;
				Match(DOT);
				State = 202;
				methodCall();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ElanParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterVarDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitVarDef(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(NL);
			State = 207;
			Match(VAR);
			State = 208;
			assignableValue();
			State = 209;
			Match(ASSIGN);
			State = 210;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(NL);
			State = 213;
			assignableValue();
			State = 214;
			Match(ASSIGN);
			State = 215;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAsignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InlineAsignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAsignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterInlineAsignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitInlineAsignment(this);
		}
	}

	[RuleVersion(0)]
	public InlineAsignmentContext inlineAsignment() {
		InlineAsignmentContext _localctx = new InlineAsignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_inlineAsignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			assignableValue();
			State = 218;
			Match(ASSIGN);
			State = 219;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifierContext nameQualifier() {
			return GetRuleContext<NameQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeconstructedTupleContext deconstructedTuple() {
			return GetRuleContext<DeconstructedTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDecompContext listDecomp() {
			return GetRuleContext<ListDecompContext>(0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAssignableValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAssignableValue(this);
		}
	}

	[RuleVersion(0)]
	public AssignableValueContext assignableValue() {
		AssignableValueContext _localctx = new AssignableValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignableValue);
		int _la;
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL:
			case SELF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SELF) {
					{
					State = 221;
					nameQualifier();
					}
				}

				State = 224;
				Match(IDENTIFIER);
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_SQ_BRACKET) {
					{
					State = 225;
					index();
					}
				}

				}
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228;
				deconstructedTuple();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229;
				listDecomp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifierContext nameQualifier() {
			return GetRuleContext<NameQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRY() { return GetToken(ElanParser.CURRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(ElanParser.PARTIAL, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SELF) {
				{
				State = 232;
				nameQualifier();
				}
			}

			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRY || _la==PARTIAL) {
				{
				State = 235;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRY || _la==PARTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 238;
			Match(IDENTIFIER);
			State = 239;
			Match(OPEN_BRACKET);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4650520773508467714L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 8065L) != 0)) {
				{
				State = 240;
				argumentList();
				}
			}

			State = 243;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 20, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			expression(0);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 246;
				Match(COMMA);
				State = 247;
				expression(0);
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ProcedureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProcedureDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProcedureDef(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefContext procedureDef() {
		ProcedureDefContext _localctx = new ProcedureDefContext(Context, State);
		EnterRule(_localctx, 22, RULE_procedureDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(NL);
			State = 254;
			Match(PROCEDURE);
			State = 255;
			procedureSignature();
			State = 256;
			statementBlock();
			State = 257;
			Match(NL);
			State = 258;
			Match(END);
			State = 259;
			Match(PROCEDURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ProcedureSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProcedureSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProcedureSignature(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSignatureContext procedureSignature() {
		ProcedureSignatureContext _localctx = new ProcedureSignatureContext(Context, State);
		EnterRule(_localctx, 24, RULE_procedureSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(IDENTIFIER);
			State = 262;
			Match(OPEN_BRACKET);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 263;
				parameterList();
				}
			}

			State = 266;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			parameter();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 269;
				Match(COMMA);
				State = 270;
				parameter();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(IDENTIFIER);
			State = 277;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionWithBodyContext functionWithBody() {
			return GetRuleContext<FunctionWithBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionFunctionContext expressionFunction() {
			return GetRuleContext<ExpressionFunctionContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionDef);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				functionWithBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280;
				expressionFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionWithBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElanParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public FunctionWithBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionWithBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFunctionWithBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFunctionWithBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionWithBodyContext functionWithBody() {
		FunctionWithBodyContext _localctx = new FunctionWithBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionWithBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(NL);
			State = 284;
			Match(FUNCTION);
			State = 285;
			functionSignature();
			State = 286;
			statementBlock();
			State = 287;
			Match(NL);
			State = 288;
			Match(RETURN);
			State = 289;
			expression(0);
			State = 290;
			Match(NL);
			State = 291;
			Match(END);
			State = 292;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ElanParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterExpressionFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitExpressionFunction(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionFunctionContext expressionFunction() {
		ExpressionFunctionContext _localctx = new ExpressionFunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_expressionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(NL);
			State = 295;
			Match(FUNCTION);
			State = 296;
			functionSignature();
			State = 297;
			Match(ASSIGN);
			State = 298;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ElanParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext[] assignableValue() {
			return GetRuleContexts<AssignableValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue(int i) {
			return GetRuleContext<AssignableValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(ElanParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(ElanParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LetInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLetIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLetIn(this);
		}
	}

	[RuleVersion(0)]
	public LetInContext letIn() {
		LetInContext _localctx = new LetInContext(Context, State);
		EnterRule(_localctx, 36, RULE_letIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(LET);
			State = 301;
			assignableValue();
			State = 302;
			Match(ASSIGN);
			State = 303;
			expression(0);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 304;
				Match(COMMA);
				State = 305;
				assignableValue();
				State = 306;
				Match(ASSIGN);
				State = 307;
				expression(0);
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 314;
			Match(NL);
			State = 315;
			Match(IN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(IDENTIFIER);
			State = 318;
			Match(OPEN_BRACKET);
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 319;
				parameterList();
				}
			}

			State = 322;
			Match(CLOSE_BRACKET);
			State = 323;
			Match(ARROW);
			State = 324;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ElanParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		public ConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterConstantDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitConstantDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefContext constantDef() {
		ConstantDefContext _localctx = new ConstantDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_constantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(NL);
			State = 327;
			Match(CONSTANT);
			State = 328;
			Match(IDENTIFIER);
			State = 329;
			Match(ASSIGN);
			State = 332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 330;
				literal();
				}
				break;
			case 2:
				{
				State = 331;
				newInstance();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENUM() { return GetTokens(ElanParser.ENUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM(int i) {
			return GetToken(ElanParser.ENUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterEnumDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitEnumDef(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(NL);
			State = 335;
			Match(ENUM);
			State = 336;
			enumType();
			State = 337;
			Match(NL);
			State = 338;
			Match(IDENTIFIER);
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 339;
				Match(COMMA);
				State = 340;
				Match(IDENTIFIER);
				}
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 346;
			Match(NL);
			State = 347;
			Match(END);
			State = 348;
			Match(ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterEnumType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitEnumType(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_enumType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(TYPENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			enumType();
			State = 353;
			Match(DOT);
			State = 354;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MutableClassContext mutableClass() {
			return GetRuleContext<MutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractClassContext abstractClass() {
			return GetRuleContext<AbstractClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmutableClassContext immutableClass() {
			return GetRuleContext<ImmutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractImmutableClassContext abstractImmutableClass() {
			return GetRuleContext<AbstractImmutableClassContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 48, RULE_classDef);
		try {
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356;
				mutableClass();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				abstractClass();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 358;
				immutableClass();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 359;
				abstractImmutableClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		public MutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterMutableClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitMutableClass(this);
		}
	}

	[RuleVersion(0)]
	public MutableClassContext mutableClass() {
		MutableClassContext _localctx = new MutableClassContext(Context, State);
		EnterRule(_localctx, 50, RULE_mutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(NL);
			State = 363;
			Match(CLASS);
			State = 364;
			Match(TYPENAME);
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 365;
				inherits();
				}
			}

			State = 368;
			constructor();
			State = 374;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 372;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						State = 369;
						property();
						}
						break;
					case 2:
						{
						State = 370;
						functionDef();
						}
						break;
					case 3:
						{
						State = 371;
						procedureDef();
						}
						break;
					}
					} 
				}
				State = 376;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 377;
			Match(NL);
			State = 378;
			Match(END);
			State = 379;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext[] procedureSignature() {
			return GetRuleContexts<ProcedureSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature(int i) {
			return GetRuleContext<ProcedureSignatureContext>(i);
		}
		public AbstractClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAbstractClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAbstractClass(this);
		}
	}

	[RuleVersion(0)]
	public AbstractClassContext abstractClass() {
		AbstractClassContext _localctx = new AbstractClassContext(Context, State);
		EnterRule(_localctx, 52, RULE_abstractClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			Match(NL);
			State = 382;
			Match(ABSTRACT);
			State = 383;
			Match(CLASS);
			State = 384;
			Match(TYPENAME);
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 385;
				inherits();
				}
			}

			State = 397;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 395;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 388;
						property();
						}
						break;
					case 2:
						{
						State = 389;
						Match(NL);
						State = 390;
						Match(FUNCTION);
						State = 391;
						functionSignature();
						}
						break;
					case 3:
						{
						State = 392;
						Match(NL);
						State = 393;
						Match(PROCEDURE);
						State = 394;
						procedureSignature();
						}
						break;
					}
					} 
				}
				State = 399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 400;
			Match(NL);
			State = 401;
			Match(END);
			State = 402;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterImmutableClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitImmutableClass(this);
		}
	}

	[RuleVersion(0)]
	public ImmutableClassContext immutableClass() {
		ImmutableClassContext _localctx = new ImmutableClassContext(Context, State);
		EnterRule(_localctx, 54, RULE_immutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			Match(NL);
			State = 405;
			Match(IMMUTABLE);
			State = 406;
			Match(CLASS);
			State = 407;
			Match(TYPENAME);
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 408;
				inherits();
				}
			}

			State = 411;
			constructor();
			State = 416;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 414;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						State = 412;
						property();
						}
						break;
					case 2:
						{
						State = 413;
						functionDef();
						}
						break;
					}
					} 
				}
				State = 418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			State = 419;
			Match(NL);
			State = 420;
			Match(END);
			State = 421;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		public AbstractImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractImmutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAbstractImmutableClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAbstractImmutableClass(this);
		}
	}

	[RuleVersion(0)]
	public AbstractImmutableClassContext abstractImmutableClass() {
		AbstractImmutableClassContext _localctx = new AbstractImmutableClassContext(Context, State);
		EnterRule(_localctx, 56, RULE_abstractImmutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(NL);
			State = 424;
			Match(ABSTRACT);
			State = 425;
			Match(IMMUTABLE);
			State = 426;
			Match(CLASS);
			State = 427;
			Match(TYPENAME);
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 428;
				inherits();
				}
			}

			State = 437;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 435;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						State = 431;
						property();
						}
						break;
					case 2:
						{
						State = 432;
						Match(NL);
						State = 433;
						Match(FUNCTION);
						State = 434;
						functionSignature();
						}
						break;
					}
					} 
				}
				State = 439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			State = 440;
			Match(NL);
			State = 441;
			Match(END);
			State = 442;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(ElanParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public InheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterInherits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitInherits(this);
		}
	}

	[RuleVersion(0)]
	public InheritsContext inherits() {
		InheritsContext _localctx = new InheritsContext(Context, State);
		EnterRule(_localctx, 58, RULE_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(INHERITS);
			State = 445;
			type();
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 446;
				Match(COMMA);
				State = 447;
				type();
				}
				}
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(ElanParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ElanParser.PRIVATE, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 60, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(NL);
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 454;
				Match(PRIVATE);
				}
			}

			State = 457;
			Match(PROPERTY);
			State = 458;
			Match(IDENTIFIER);
			State = 459;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRUCTOR() { return GetTokens(ElanParser.CONSTRUCTOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(ElanParser.CONSTRUCTOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 62, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(NL);
			State = 462;
			Match(CONSTRUCTOR);
			State = 463;
			Match(OPEN_BRACKET);
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 464;
				parameterList();
				}
			}

			State = 467;
			Match(CLOSE_BRACKET);
			State = 468;
			statementBlock();
			State = 469;
			Match(NL);
			State = 470;
			Match(END);
			State = 471;
			Match(CONSTRUCTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterNewInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitNewInstance(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(Context, State);
		EnterRule(_localctx, 64, RULE_newInstance);
		int _la;
		try {
			State = 484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUE_TYPE:
			case ARRAY:
			case LIST:
			case DICTIONARY:
			case ITERABLE:
			case OPEN_BRACKET:
			case TYPENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473;
				type();
				State = 474;
				Match(OPEN_BRACKET);
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4650520773508467714L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 8065L) != 0)) {
					{
					State = 475;
					argumentList();
					}
				}

				State = 478;
				Match(CLOSE_BRACKET);
				State = 480;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 479;
					withClause();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 482;
				Match(IDENTIFIER);
				State = 483;
				withClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(ElanParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InlineAsignmentContext[] inlineAsignment() {
			return GetRuleContexts<InlineAsignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineAsignmentContext inlineAsignment(int i) {
			return GetRuleContext<InlineAsignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 66, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(WITH);
			State = 487;
			Match(OPEN_BRACE);
			State = 488;
			inlineAsignment();
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 489;
				Match(COMMA);
				State = 490;
				inlineAsignment();
				}
				}
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 496;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduralControlFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachContext @foreach() {
			return GetRuleContext<ForeachContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryContext @try() {
			return GetRuleContext<TryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ProceduralControlFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proceduralControlFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProceduralControlFlow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProceduralControlFlow(this);
		}
	}

	[RuleVersion(0)]
	public ProceduralControlFlowContext proceduralControlFlow() {
		ProceduralControlFlowContext _localctx = new ProceduralControlFlowContext(Context, State);
		EnterRule(_localctx, 68, RULE_proceduralControlFlow);
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 498;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 499;
				@for();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 500;
				@foreach();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 501;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 502;
				repeat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 503;
				@try();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 504;
				@switch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(ElanParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(ElanParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(ElanParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(ElanParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(ElanParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(ElanParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 70, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(NL);
			State = 508;
			Match(IF);
			State = 509;
			expression(0);
			State = 510;
			Match(THEN);
			State = 511;
			statementBlock();
			State = 521;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 512;
					Match(NL);
					State = 513;
					Match(ELSE);
					State = 514;
					Match(IF);
					State = 515;
					expression(0);
					State = 516;
					Match(THEN);
					State = 517;
					statementBlock();
					}
					} 
				}
				State = 523;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 524;
				Match(NL);
				State = 525;
				Match(ELSE);
				State = 526;
				statementBlock();
				}
				break;
			}
			State = 529;
			Match(NL);
			State = 530;
			Match(END);
			State = 531;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(ElanParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(ElanParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(ElanParser.STEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 72, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(NL);
			State = 534;
			Match(FOR);
			State = 535;
			Match(IDENTIFIER);
			State = 536;
			Match(ASSIGN);
			State = 537;
			expression(0);
			State = 538;
			Match(TO);
			State = 539;
			expression(0);
			State = 545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 540;
				Match(STEP);
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 541;
					Match(MINUS);
					}
				}

				State = 544;
				Match(LITERAL_INTEGER);
				}
			}

			State = 547;
			statementBlock();
			State = 548;
			Match(NL);
			State = 549;
			Match(END);
			State = 550;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOREACH() { return GetTokens(ElanParser.FOREACH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH(int i) {
			return GetToken(ElanParser.FOREACH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ForeachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterForeach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitForeach(this);
		}
	}

	[RuleVersion(0)]
	public ForeachContext @foreach() {
		ForeachContext _localctx = new ForeachContext(Context, State);
		EnterRule(_localctx, 74, RULE_foreach);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(NL);
			State = 553;
			Match(FOREACH);
			State = 554;
			Match(IDENTIFIER);
			State = 555;
			Match(IN);
			State = 556;
			expression(0);
			State = 557;
			statementBlock();
			State = 558;
			Match(NL);
			State = 559;
			Match(END);
			State = 560;
			Match(FOREACH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(ElanParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(ElanParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 76, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(NL);
			State = 563;
			Match(WHILE);
			State = 564;
			expression(0);
			State = 565;
			statementBlock();
			State = 566;
			Match(NL);
			State = 567;
			Match(END);
			State = 568;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(ElanParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(ElanParser.REPEAT, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 78, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			Match(NL);
			{
			State = 571;
			Match(REPEAT);
			}
			State = 572;
			statementBlock();
			State = 573;
			Match(NL);
			State = 574;
			Match(UNTIL);
			State = 575;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(ElanParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(ElanParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ElanParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public TryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTry(this);
		}
	}

	[RuleVersion(0)]
	public TryContext @try() {
		TryContext _localctx = new TryContext(Context, State);
		EnterRule(_localctx, 80, RULE_try);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(NL);
			State = 578;
			Match(TRY);
			State = 579;
			statementBlock();
			State = 580;
			Match(NL);
			State = 581;
			Match(CATCH);
			State = 582;
			Match(IDENTIFIER);
			State = 583;
			statementBlock();
			State = 584;
			Match(NL);
			State = 585;
			Match(END);
			State = 586;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(ElanParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(ElanParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseDefaultContext caseDefault() {
			return GetRuleContext<CaseDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterSwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitSwitch(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 82, RULE_switch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			Match(NL);
			State = 589;
			Match(SWITCH);
			State = 590;
			expression(0);
			State = 592;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 591;
					@case();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 596;
			caseDefault();
			State = 597;
			Match(NL);
			State = 598;
			Match(END);
			State = 599;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(ElanParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 84, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			Match(NL);
			State = 602;
			Match(CASE);
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 603;
				Match(MINUS);
				}
			}

			State = 606;
			literalValue();
			State = 607;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterCaseDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitCaseDefault(this);
		}
	}

	[RuleVersion(0)]
	public CaseDefaultContext caseDefault() {
		CaseDefaultContext _localctx = new CaseDefaultContext(Context, State);
		EnterRule(_localctx, 86, RULE_caseDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(NL);
			State = 610;
			Match(DEFAULT);
			State = 611;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracketedExpressionContext bracketedExpression() {
			return GetRuleContext<BracketedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetInContext letIn() {
			return GetRuleContext<LetInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 614;
				bracketedExpression();
				}
				break;
			case 2:
				{
				State = 615;
				methodCall();
				}
				break;
			case 3:
				{
				State = 616;
				value();
				}
				break;
			case 4:
				{
				State = 617;
				unaryOp();
				State = 618;
				expression(9);
				}
				break;
			case 5:
				{
				State = 620;
				newInstance();
				}
				break;
			case 6:
				{
				State = 621;
				ifExpression();
				}
				break;
			case 7:
				{
				State = 622;
				lambda();
				}
				break;
			case 8:
				{
				State = 623;
				letIn();
				State = 624;
				expression(3);
				}
				break;
			case 9:
				{
				State = 626;
				Match(NL);
				State = 627;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 649;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 647;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 630;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 631;
						Match(POWER);
						State = 632;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 633;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 634;
						binaryOp();
						State = 635;
						expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 637;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 638;
						index();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 639;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 640;
						Match(DOT);
						State = 641;
						methodCall();
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 642;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 643;
						Match(DOT);
						State = 644;
						Match(IDENTIFIER);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 645;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 646;
						withClause();
						}
						break;
					}
					} 
				}
				State = 651;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracketedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public BracketedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterBracketedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitBracketedExpression(this);
		}
	}

	[RuleVersion(0)]
	public BracketedExpressionContext bracketedExpression() {
		BracketedExpressionContext _localctx = new BracketedExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_bracketedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(OPEN_BRACKET);
			State = 653;
			expression(0);
			State = 654;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ElanParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ElanParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ElanParser.ELSE, 0); }
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_ifExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(IF);
			State = 657;
			expression(0);
			State = 658;
			Match(NL);
			State = 659;
			Match(THEN);
			State = 660;
			expression(0);
			State = 661;
			Match(NL);
			State = 662;
			Match(ELSE);
			State = 663;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(ElanParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 94, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			Match(LAMBDA);
			State = 666;
			argumentList();
			State = 667;
			Match(ARROW);
			State = 668;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(ElanParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(ElanParser.CLOSE_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ElanParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 96, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			Match(OPEN_SQ_BRACKET);
			State = 677;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 671;
				expression(0);
				}
				break;
			case 2:
				{
				State = 672;
				expression(0);
				State = 673;
				Match(COMMA);
				State = 674;
				expression(0);
				}
				break;
			case 3:
				{
				State = 676;
				range();
				}
				break;
			}
			State = 679;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(ElanParser.DOUBLE_DOT, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 98, RULE_range);
		try {
			State = 690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 681;
				expression(0);
				State = 682;
				Match(DOUBLE_DOT);
				State = 683;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 685;
				expression(0);
				State = 686;
				Match(DOUBLE_DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 688;
				Match(DOUBLE_DOT);
				State = 689;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifierContext nameQualifier() {
			return GetRuleContext<NameQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureDefinitionContext dataStructureDefinition() {
			return GetRuleContext<DataStructureDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 100, RULE_value);
		int _la;
		try {
			State = 701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SELF) {
					{
					State = 693;
					nameQualifier();
					}
				}

				State = 696;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 697;
				dataStructureDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 698;
				Match(SELF);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 699;
				Match(DEFAULT);
				State = 700;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(ElanParser.GLOBAL, 0); }
		public NameQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterNameQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitNameQualifier(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifierContext nameQualifier() {
		NameQualifierContext _localctx = new NameQualifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_nameQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL || _la==SELF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 704;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDataStructureContext literalDataStructure() {
			return GetRuleContext<LiteralDataStructureContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 104, RULE_literal);
		try {
			State = 708;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
			case TYPENAME:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 706;
				literalValue();
				}
				break;
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 707;
				literalDataStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VALUE() { return GetToken(ElanParser.BOOL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(ElanParser.LITERAL_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_CHAR() { return GetToken(ElanParser.LITERAL_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 106, RULE_literalValue);
		try {
			State = 715;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 710;
				Match(BOOL_VALUE);
				}
				break;
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 711;
				Match(LITERAL_INTEGER);
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 712;
				Match(LITERAL_FLOAT);
				}
				break;
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 713;
				Match(LITERAL_CHAR);
				}
				break;
			case TYPENAME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 714;
				enumValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListDefinitionContext listDefinition() {
			return GetRuleContext<ListDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDefinitionContext arrayDefinition() {
			return GetRuleContext<ArrayDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleDefinitionContext tupleDefinition() {
			return GetRuleContext<TupleDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryDefinitionContext dictionaryDefinition() {
			return GetRuleContext<DictionaryDefinitionContext>(0);
		}
		public DataStructureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDataStructureDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDataStructureDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureDefinitionContext dataStructureDefinition() {
		DataStructureDefinitionContext _localctx = new DataStructureDefinitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_dataStructureDefinition);
		try {
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 717;
				listDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 718;
				arrayDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 719;
				tupleDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 720;
				dictionaryDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDataStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTupleContext literalTuple() {
			return GetRuleContext<LiteralTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralListContext literalList() {
			return GetRuleContext<LiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDictionaryContext literalDictionary() {
			return GetRuleContext<LiteralDictionaryContext>(0);
		}
		public LiteralDataStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDataStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralDataStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralDataStructure(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDataStructureContext literalDataStructure() {
		LiteralDataStructureContext _localctx = new LiteralDataStructureContext(Context, State);
		EnterRule(_localctx, 110, RULE_literalDataStructure);
		try {
			State = 727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 723;
				Match(LITERAL_STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 724;
				literalTuple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 725;
				literalList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 726;
				literalDictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public TupleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTupleDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTupleDefinition(this);
		}
	}

	[RuleVersion(0)]
	public TupleDefinitionContext tupleDefinition() {
		TupleDefinitionContext _localctx = new TupleDefinitionContext(Context, State);
		EnterRule(_localctx, 112, RULE_tupleDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			Match(OPEN_BRACKET);
			State = 730;
			expression(0);
			State = 731;
			Match(COMMA);
			State = 732;
			expression(0);
			State = 737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 733;
				Match(COMMA);
				State = 734;
				expression(0);
				}
				}
				State = 739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 740;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public LiteralTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralTuple(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTupleContext literalTuple() {
		LiteralTupleContext _localctx = new LiteralTupleContext(Context, State);
		EnterRule(_localctx, 114, RULE_literalTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			Match(OPEN_BRACKET);
			State = 743;
			literal();
			State = 744;
			Match(COMMA);
			State = 745;
			literal();
			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 746;
				Match(COMMA);
				State = 747;
				literal();
				}
				}
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 753;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeconstructedTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(ElanParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(ElanParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DeconstructedTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deconstructedTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDeconstructedTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDeconstructedTuple(this);
		}
	}

	[RuleVersion(0)]
	public DeconstructedTupleContext deconstructedTuple() {
		DeconstructedTupleContext _localctx = new DeconstructedTupleContext(Context, State);
		EnterRule(_localctx, 116, RULE_deconstructedTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 755;
			Match(OPEN_BRACKET);
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR) {
				{
				State = 756;
				Match(VAR);
				}
			}

			State = 759;
			Match(IDENTIFIER);
			State = 765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 760;
				Match(COMMA);
				State = 762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VAR) {
					{
					State = 761;
					Match(VAR);
					}
				}

				State = 764;
				Match(IDENTIFIER);
				}
				}
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 769;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ListDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterListDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitListDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ListDefinitionContext listDefinition() {
		ListDefinitionContext _localctx = new ListDefinitionContext(Context, State);
		EnterRule(_localctx, 118, RULE_listDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			Match(OPEN_BRACE);
			{
			State = 772;
			expression(0);
			State = 777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 773;
				Match(COMMA);
				State = 774;
				expression(0);
				}
				}
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 780;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralList(this);
		}
	}

	[RuleVersion(0)]
	public LiteralListContext literalList() {
		LiteralListContext _localctx = new LiteralListContext(Context, State);
		EnterRule(_localctx, 120, RULE_literalList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			Match(OPEN_BRACE);
			{
			State = 783;
			literal();
			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 784;
				Match(COMMA);
				State = 785;
				literal();
				}
				}
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 791;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		public ListDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterListDecomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitListDecomp(this);
		}
	}

	[RuleVersion(0)]
	public ListDecompContext listDecomp() {
		ListDecompContext _localctx = new ListDecompContext(Context, State);
		EnterRule(_localctx, 122, RULE_listDecomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			Match(OPEN_BRACE);
			State = 794;
			Match(IDENTIFIER);
			State = 795;
			Match(COLON);
			State = 796;
			Match(IDENTIFIER);
			State = 797;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		public ArrayDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterArrayDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitArrayDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDefinitionContext arrayDefinition() {
		ArrayDefinitionContext _localctx = new ArrayDefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_arrayDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			Match(ARRAY);
			State = 800;
			genericSpecifier();
			State = 801;
			Match(OPEN_BRACKET);
			State = 803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LITERAL_INTEGER) {
				{
				State = 802;
				Match(LITERAL_INTEGER);
				}
			}

			State = 805;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext[] kvp() {
			return GetRuleContexts<KvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext kvp(int i) {
			return GetRuleContext<KvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DictionaryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDictionaryDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDictionaryDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryDefinitionContext dictionaryDefinition() {
		DictionaryDefinitionContext _localctx = new DictionaryDefinitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_dictionaryDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			Match(OPEN_BRACE);
			{
			State = 808;
			kvp();
			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 809;
				Match(COMMA);
				State = 810;
				kvp();
				}
				}
				State = 815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 816;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext[] literalKvp() {
			return GetRuleContexts<LiteralKvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext literalKvp(int i) {
			return GetRuleContext<LiteralKvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralDictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralDictionary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralDictionary(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDictionaryContext literalDictionary() {
		LiteralDictionaryContext _localctx = new LiteralDictionaryContext(Context, State);
		EnterRule(_localctx, 128, RULE_literalDictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(OPEN_BRACE);
			{
			State = 819;
			literalKvp();
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 820;
				Match(COMMA);
				State = 821;
				literalKvp();
				}
				}
				State = 826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 827;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public KvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterKvp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitKvp(this);
		}
	}

	[RuleVersion(0)]
	public KvpContext kvp() {
		KvpContext _localctx = new KvpContext(Context, State);
		EnterRule(_localctx, 130, RULE_kvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829;
			expression(0);
			State = 830;
			Match(COLON);
			State = 831;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralKvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public LiteralKvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalKvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralKvp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralKvp(this);
		}
	}

	[RuleVersion(0)]
	public LiteralKvpContext literalKvp() {
		LiteralKvpContext _localctx = new LiteralKvpContext(Context, State);
		EnterRule(_localctx, 132, RULE_literalKvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			literal();
			State = 834;
			Match(COLON);
			State = 835;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(ElanParser.OP_NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 134, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==OP_NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOpContext arithmeticOp() {
			return GetRuleContext<ArithmeticOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 136, RULE_binaryOp);
		try {
			State = 842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case MULT:
			case DIVIDE:
			case POWER:
			case MOD:
			case INT_DIV:
				EnterOuterAlt(_localctx, 1);
				{
				State = 839;
				arithmeticOp();
				}
				break;
			case OP_AND:
			case OP_OR:
			case OP_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 840;
				logicalOp();
				}
				break;
			case LT:
			case GT:
			case OP_EQ:
			case OP_NE:
			case OP_LE:
			case OP_GE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 841;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(ElanParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ElanParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ElanParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DIV() { return GetToken(ElanParser.INT_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ElanParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ArithmeticOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterArithmeticOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitArithmeticOp(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOpContext arithmeticOp() {
		ArithmeticOpContext _localctx = new ArithmeticOpContext(Context, State);
		EnterRule(_localctx, 138, RULE_arithmeticOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(ElanParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(ElanParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(ElanParser.OP_XOR, 0); }
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLogicalOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLogicalOp(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 140, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(ElanParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(ElanParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(ElanParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(ElanParser.OP_NE, 0); }
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterConditionalOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitConditionalOp(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 142, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 963L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_TYPE() { return GetToken(ElanParser.VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureTypeContext dataStructureType() {
			return GetRuleContext<DataStructureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_type);
		try {
			State = 857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 850;
				Match(VALUE_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 851;
				dataStructureType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 852;
				Match(TYPENAME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 853;
				Match(TYPENAME);
				State = 854;
				genericSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 855;
				tupleType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 856;
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ElanParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(ElanParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERABLE() { return GetToken(ElanParser.ITERABLE, 0); }
		public DataStructureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDataStructureType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDataStructureType(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureTypeContext dataStructureType() {
		DataStructureTypeContext _localctx = new DataStructureTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_dataStructureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 527765581332480L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 860;
			genericSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public GenericSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterGenericSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitGenericSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public GenericSpecifierContext genericSpecifier() {
		GenericSpecifierContext _localctx = new GenericSpecifierContext(Context, State);
		EnterRule(_localctx, 148, RULE_genericSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(LT);
			State = 863;
			type();
			State = 868;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 864;
				Match(COMMA);
				State = 865;
				type();
				}
				}
				State = 870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 871;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			Match(OPEN_BRACKET);
			State = 874;
			type();
			State = 877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 875;
				Match(COMMA);
				State = 876;
				type();
				}
				}
				State = 879;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 881;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFuncType(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			Match(OPEN_BRACKET);
			State = 884;
			type();
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 885;
				Match(COMMA);
				State = 886;
				type();
				}
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 892;
			Match(ARROW);
			State = 893;
			type();
			State = 894;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 44: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,86,897,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,5,0,162,8,0,10,0,12,0,165,9,0,1,0,5,0,168,8,0,10,0,12,
		0,171,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,3,1,3,1,3,1,3,5,3,194,8,3,10,3,12,3,197,9,3,1,4,1,4,1,4,1,4,
		1,4,1,4,3,4,205,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,
		7,1,7,1,7,1,8,3,8,223,8,8,1,8,1,8,3,8,227,8,8,1,8,1,8,3,8,231,8,8,1,9,
		3,9,234,8,9,1,9,3,9,237,8,9,1,9,1,9,1,9,3,9,242,8,9,1,9,1,9,1,10,1,10,
		1,10,5,10,249,8,10,10,10,12,10,252,9,10,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,3,12,265,8,12,1,12,1,12,1,13,1,13,1,13,5,13,272,
		8,13,10,13,12,13,275,9,13,1,14,1,14,1,14,1,15,1,15,3,15,282,8,15,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
		1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,310,8,18,10,
		18,12,18,313,9,18,1,18,1,18,1,18,1,19,1,19,1,19,3,19,321,8,19,1,19,1,19,
		1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,333,8,20,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,5,21,342,8,21,10,21,12,21,345,9,21,1,21,1,21,1,21,1,
		21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,3,24,361,8,24,1,25,
		1,25,1,25,1,25,3,25,367,8,25,1,25,1,25,1,25,1,25,5,25,373,8,25,10,25,12,
		25,376,9,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,3,26,387,8,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,396,8,26,10,26,12,26,399,9,26,
		1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,27,410,8,27,1,27,1,27,1,
		27,5,27,415,8,27,10,27,12,27,418,9,27,1,27,1,27,1,27,1,27,1,28,1,28,1,
		28,1,28,1,28,1,28,3,28,430,8,28,1,28,1,28,1,28,1,28,5,28,436,8,28,10,28,
		12,28,439,9,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,5,29,449,8,29,10,
		29,12,29,452,9,29,1,30,1,30,3,30,456,8,30,1,30,1,30,1,30,1,30,1,31,1,31,
		1,31,1,31,3,31,466,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,3,
		32,477,8,32,1,32,1,32,3,32,481,8,32,1,32,1,32,3,32,485,8,32,1,33,1,33,
		1,33,1,33,1,33,5,33,492,8,33,10,33,12,33,495,9,33,1,33,1,33,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,3,34,506,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,5,35,520,8,35,10,35,12,35,523,9,35,1,35,1,
		35,1,35,3,35,528,8,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,3,36,543,8,36,1,36,3,36,546,8,36,1,36,1,36,1,36,1,36,1,
		36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,4,41,593,
		8,41,11,41,12,41,594,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,3,42,605,
		8,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,629,8,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
		44,5,44,648,8,44,10,44,12,44,651,9,44,1,45,1,45,1,45,1,45,1,46,1,46,1,
		46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,
		48,1,48,1,48,1,48,1,48,3,48,678,8,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,
		1,49,1,49,1,49,1,49,3,49,691,8,49,1,50,1,50,3,50,695,8,50,1,50,1,50,1,
		50,1,50,1,50,3,50,702,8,50,1,51,1,51,1,51,1,52,1,52,3,52,709,8,52,1,53,
		1,53,1,53,1,53,1,53,3,53,716,8,53,1,54,1,54,1,54,1,54,3,54,722,8,54,1,
		55,1,55,1,55,1,55,3,55,728,8,55,1,56,1,56,1,56,1,56,1,56,1,56,5,56,736,
		8,56,10,56,12,56,739,9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,5,57,
		749,8,57,10,57,12,57,752,9,57,1,57,1,57,1,58,1,58,3,58,758,8,58,1,58,1,
		58,1,58,3,58,763,8,58,1,58,4,58,766,8,58,11,58,12,58,767,1,58,1,58,1,59,
		1,59,1,59,1,59,5,59,776,8,59,10,59,12,59,779,9,59,1,59,1,59,1,60,1,60,
		1,60,1,60,5,60,787,8,60,10,60,12,60,790,9,60,1,60,1,60,1,61,1,61,1,61,
		1,61,1,61,1,61,1,62,1,62,1,62,1,62,3,62,804,8,62,1,62,1,62,1,63,1,63,1,
		63,1,63,5,63,812,8,63,10,63,12,63,815,9,63,1,63,1,63,1,64,1,64,1,64,1,
		64,5,64,823,8,64,10,64,12,64,826,9,64,1,64,1,64,1,65,1,65,1,65,1,65,1,
		66,1,66,1,66,1,66,1,67,1,67,1,68,1,68,1,68,3,68,843,8,68,1,69,1,69,1,70,
		1,70,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,858,8,72,1,73,1,
		73,1,73,1,74,1,74,1,74,1,74,5,74,867,8,74,10,74,12,74,870,9,74,1,74,1,
		74,1,75,1,75,1,75,1,75,4,75,878,8,75,11,75,12,75,879,1,75,1,75,1,76,1,
		76,1,76,1,76,5,76,888,8,76,10,76,12,76,891,9,76,1,76,1,76,1,76,1,76,1,
		76,0,1,88,77,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
		90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
		128,130,132,134,136,138,140,142,144,146,148,150,152,0,7,2,0,10,10,26,26,
		2,0,18,18,32,32,2,0,62,62,71,71,1,0,61,67,2,0,70,70,72,73,2,0,68,69,74,
		77,1,0,45,48,937,0,163,1,0,0,0,2,174,1,0,0,0,4,181,1,0,0,0,6,195,1,0,0,
		0,8,198,1,0,0,0,10,206,1,0,0,0,12,212,1,0,0,0,14,217,1,0,0,0,16,230,1,
		0,0,0,18,233,1,0,0,0,20,245,1,0,0,0,22,253,1,0,0,0,24,261,1,0,0,0,26,268,
		1,0,0,0,28,276,1,0,0,0,30,281,1,0,0,0,32,283,1,0,0,0,34,294,1,0,0,0,36,
		300,1,0,0,0,38,317,1,0,0,0,40,326,1,0,0,0,42,334,1,0,0,0,44,350,1,0,0,
		0,46,352,1,0,0,0,48,360,1,0,0,0,50,362,1,0,0,0,52,381,1,0,0,0,54,404,1,
		0,0,0,56,423,1,0,0,0,58,444,1,0,0,0,60,453,1,0,0,0,62,461,1,0,0,0,64,484,
		1,0,0,0,66,486,1,0,0,0,68,505,1,0,0,0,70,507,1,0,0,0,72,533,1,0,0,0,74,
		552,1,0,0,0,76,562,1,0,0,0,78,570,1,0,0,0,80,577,1,0,0,0,82,588,1,0,0,
		0,84,601,1,0,0,0,86,609,1,0,0,0,88,628,1,0,0,0,90,652,1,0,0,0,92,656,1,
		0,0,0,94,665,1,0,0,0,96,670,1,0,0,0,98,690,1,0,0,0,100,701,1,0,0,0,102,
		703,1,0,0,0,104,708,1,0,0,0,106,715,1,0,0,0,108,721,1,0,0,0,110,727,1,
		0,0,0,112,729,1,0,0,0,114,742,1,0,0,0,116,755,1,0,0,0,118,771,1,0,0,0,
		120,782,1,0,0,0,122,793,1,0,0,0,124,799,1,0,0,0,126,807,1,0,0,0,128,818,
		1,0,0,0,130,829,1,0,0,0,132,833,1,0,0,0,134,837,1,0,0,0,136,842,1,0,0,
		0,138,844,1,0,0,0,140,846,1,0,0,0,142,848,1,0,0,0,144,857,1,0,0,0,146,
		859,1,0,0,0,148,862,1,0,0,0,150,873,1,0,0,0,152,883,1,0,0,0,154,162,3,
		2,1,0,155,162,3,22,11,0,156,162,3,30,15,0,157,162,3,40,20,0,158,162,3,
		42,21,0,159,162,3,48,24,0,160,162,3,4,2,0,161,154,1,0,0,0,161,155,1,0,
		0,0,161,156,1,0,0,0,161,157,1,0,0,0,161,158,1,0,0,0,161,159,1,0,0,0,161,
		160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,169,1,
		0,0,0,165,163,1,0,0,0,166,168,5,1,0,0,167,166,1,0,0,0,168,171,1,0,0,0,
		169,167,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,
		5,0,0,1,173,1,1,0,0,0,174,175,5,1,0,0,175,176,5,25,0,0,176,177,3,6,3,0,
		177,178,5,1,0,0,178,179,5,13,0,0,179,180,5,25,0,0,180,3,1,0,0,0,181,182,
		5,1,0,0,182,183,5,35,0,0,183,184,5,79,0,0,184,185,3,6,3,0,185,186,5,1,
		0,0,186,187,5,13,0,0,187,188,5,35,0,0,188,5,1,0,0,0,189,194,3,10,5,0,190,
		194,3,12,6,0,191,194,3,68,34,0,192,194,3,8,4,0,193,189,1,0,0,0,193,190,
		1,0,0,0,193,191,1,0,0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,
		0,195,196,1,0,0,0,196,7,1,0,0,0,197,195,1,0,0,0,198,204,5,1,0,0,199,205,
		3,18,9,0,200,201,3,16,8,0,201,202,5,58,0,0,202,203,3,18,9,0,203,205,1,
		0,0,0,204,199,1,0,0,0,204,200,1,0,0,0,205,9,1,0,0,0,206,207,5,1,0,0,207,
		208,5,40,0,0,208,209,3,16,8,0,209,210,5,49,0,0,210,211,3,88,44,0,211,11,
		1,0,0,0,212,213,5,1,0,0,213,214,3,16,8,0,214,215,5,49,0,0,215,216,3,88,
		44,0,216,13,1,0,0,0,217,218,3,16,8,0,218,219,5,49,0,0,219,220,3,88,44,
		0,220,15,1,0,0,0,221,223,3,102,51,0,222,221,1,0,0,0,222,223,1,0,0,0,223,
		224,1,0,0,0,224,226,5,79,0,0,225,227,3,96,48,0,226,225,1,0,0,0,226,227,
		1,0,0,0,227,231,1,0,0,0,228,231,3,116,58,0,229,231,3,122,61,0,230,222,
		1,0,0,0,230,228,1,0,0,0,230,229,1,0,0,0,231,17,1,0,0,0,232,234,3,102,51,
		0,233,232,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,237,7,0,0,0,236,
		235,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,239,5,79,0,0,239,241,5,
		55,0,0,240,242,3,20,10,0,241,240,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,
		0,243,244,5,56,0,0,244,19,1,0,0,0,245,250,3,88,44,0,246,247,5,59,0,0,247,
		249,3,88,44,0,248,246,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,
		1,0,0,0,251,21,1,0,0,0,252,250,1,0,0,0,253,254,5,1,0,0,254,255,5,28,0,
		0,255,256,3,24,12,0,256,257,3,6,3,0,257,258,5,1,0,0,258,259,5,13,0,0,259,
		260,5,28,0,0,260,23,1,0,0,0,261,262,5,79,0,0,262,264,5,55,0,0,263,265,
		3,26,13,0,264,263,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,267,5,56,
		0,0,267,25,1,0,0,0,268,273,3,28,14,0,269,270,5,59,0,0,270,272,3,28,14,
		0,271,269,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,
		27,1,0,0,0,275,273,1,0,0,0,276,277,5,79,0,0,277,278,3,144,72,0,278,29,
		1,0,0,0,279,282,3,32,16,0,280,282,3,34,17,0,281,279,1,0,0,0,281,280,1,
		0,0,0,282,31,1,0,0,0,283,284,5,1,0,0,284,285,5,17,0,0,285,286,3,38,19,
		0,286,287,3,6,3,0,287,288,5,1,0,0,288,289,5,31,0,0,289,290,3,88,44,0,290,
		291,5,1,0,0,291,292,5,13,0,0,292,293,5,17,0,0,293,33,1,0,0,0,294,295,5,
		1,0,0,295,296,5,17,0,0,296,297,3,38,19,0,297,298,5,49,0,0,298,299,3,88,
		44,0,299,35,1,0,0,0,300,301,5,24,0,0,301,302,3,16,8,0,302,303,5,49,0,0,
		303,311,3,88,44,0,304,305,5,59,0,0,305,306,3,16,8,0,306,307,5,49,0,0,307,
		308,3,88,44,0,308,310,1,0,0,0,309,304,1,0,0,0,310,313,1,0,0,0,311,309,
		1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,5,1,0,
		0,315,316,5,21,0,0,316,37,1,0,0,0,317,318,5,79,0,0,318,320,5,55,0,0,319,
		321,3,26,13,0,320,319,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,
		5,56,0,0,323,324,5,50,0,0,324,325,3,144,72,0,325,39,1,0,0,0,326,327,5,
		1,0,0,327,328,5,8,0,0,328,329,5,79,0,0,329,332,5,49,0,0,330,333,3,104,
		52,0,331,333,3,64,32,0,332,330,1,0,0,0,332,331,1,0,0,0,333,41,1,0,0,0,
		334,335,5,1,0,0,335,336,5,14,0,0,336,337,3,44,22,0,337,338,5,1,0,0,338,
		343,5,79,0,0,339,340,5,59,0,0,340,342,5,79,0,0,341,339,1,0,0,0,342,345,
		1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,343,1,0,0,
		0,346,347,5,1,0,0,347,348,5,13,0,0,348,349,5,14,0,0,349,43,1,0,0,0,350,
		351,5,78,0,0,351,45,1,0,0,0,352,353,3,44,22,0,353,354,5,58,0,0,354,355,
		5,79,0,0,355,47,1,0,0,0,356,361,3,50,25,0,357,361,3,52,26,0,358,361,3,
		54,27,0,359,361,3,56,28,0,360,356,1,0,0,0,360,357,1,0,0,0,360,358,1,0,
		0,0,360,359,1,0,0,0,361,49,1,0,0,0,362,363,5,1,0,0,363,364,5,7,0,0,364,
		366,5,78,0,0,365,367,3,58,29,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,
		1,0,0,0,368,374,3,62,31,0,369,373,3,60,30,0,370,373,3,30,15,0,371,373,
		3,22,11,0,372,369,1,0,0,0,372,370,1,0,0,0,372,371,1,0,0,0,373,376,1,0,
		0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,377,1,0,0,0,376,374,1,0,0,0,377,
		378,5,1,0,0,378,379,5,13,0,0,379,380,5,7,0,0,380,51,1,0,0,0,381,382,5,
		1,0,0,382,383,5,4,0,0,383,384,5,7,0,0,384,386,5,78,0,0,385,387,3,58,29,
		0,386,385,1,0,0,0,386,387,1,0,0,0,387,397,1,0,0,0,388,396,3,60,30,0,389,
		390,5,1,0,0,390,391,5,17,0,0,391,396,3,38,19,0,392,393,5,1,0,0,393,394,
		5,28,0,0,394,396,3,24,12,0,395,388,1,0,0,0,395,389,1,0,0,0,395,392,1,0,
		0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,
		397,1,0,0,0,400,401,5,1,0,0,401,402,5,13,0,0,402,403,5,7,0,0,403,53,1,
		0,0,0,404,405,5,1,0,0,405,406,5,20,0,0,406,407,5,7,0,0,407,409,5,78,0,
		0,408,410,3,58,29,0,409,408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,
		416,3,62,31,0,412,415,3,60,30,0,413,415,3,30,15,0,414,412,1,0,0,0,414,
		413,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,419,1,
		0,0,0,418,416,1,0,0,0,419,420,5,1,0,0,420,421,5,13,0,0,421,422,5,7,0,0,
		422,55,1,0,0,0,423,424,5,1,0,0,424,425,5,4,0,0,425,426,5,20,0,0,426,427,
		5,7,0,0,427,429,5,78,0,0,428,430,3,58,29,0,429,428,1,0,0,0,429,430,1,0,
		0,0,430,437,1,0,0,0,431,436,3,60,30,0,432,433,5,1,0,0,433,434,5,17,0,0,
		434,436,3,38,19,0,435,431,1,0,0,0,435,432,1,0,0,0,436,439,1,0,0,0,437,
		435,1,0,0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,437,1,0,0,0,440,441,5,
		1,0,0,441,442,5,13,0,0,442,443,5,7,0,0,443,57,1,0,0,0,444,445,5,22,0,0,
		445,450,3,144,72,0,446,447,5,59,0,0,447,449,3,144,72,0,448,446,1,0,0,0,
		449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,59,1,0,0,0,452,450,
		1,0,0,0,453,455,5,1,0,0,454,456,5,27,0,0,455,454,1,0,0,0,455,456,1,0,0,
		0,456,457,1,0,0,0,457,458,5,29,0,0,458,459,5,79,0,0,459,460,3,144,72,0,
		460,61,1,0,0,0,461,462,5,1,0,0,462,463,5,9,0,0,463,465,5,55,0,0,464,466,
		3,26,13,0,465,464,1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,5,56,
		0,0,468,469,3,6,3,0,469,470,5,1,0,0,470,471,5,13,0,0,471,472,5,9,0,0,472,
		63,1,0,0,0,473,474,3,144,72,0,474,476,5,55,0,0,475,477,3,20,10,0,476,475,
		1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,480,5,56,0,0,479,481,3,66,
		33,0,480,479,1,0,0,0,480,481,1,0,0,0,481,485,1,0,0,0,482,483,5,79,0,0,
		483,485,3,66,33,0,484,473,1,0,0,0,484,482,1,0,0,0,485,65,1,0,0,0,486,487,
		5,42,0,0,487,488,5,51,0,0,488,493,3,14,7,0,489,490,5,59,0,0,490,492,3,
		14,7,0,491,489,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,
		494,496,1,0,0,0,495,493,1,0,0,0,496,497,5,52,0,0,497,67,1,0,0,0,498,506,
		3,70,35,0,499,506,3,72,36,0,500,506,3,74,37,0,501,506,3,76,38,0,502,506,
		3,78,39,0,503,506,3,80,40,0,504,506,3,82,41,0,505,498,1,0,0,0,505,499,
		1,0,0,0,505,500,1,0,0,0,505,501,1,0,0,0,505,502,1,0,0,0,505,503,1,0,0,
		0,505,504,1,0,0,0,506,69,1,0,0,0,507,508,5,1,0,0,508,509,5,19,0,0,509,
		510,3,88,44,0,510,511,5,36,0,0,511,521,3,6,3,0,512,513,5,1,0,0,513,514,
		5,12,0,0,514,515,5,19,0,0,515,516,3,88,44,0,516,517,5,36,0,0,517,518,3,
		6,3,0,518,520,1,0,0,0,519,512,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,
		521,522,1,0,0,0,522,527,1,0,0,0,523,521,1,0,0,0,524,525,5,1,0,0,525,526,
		5,12,0,0,526,528,3,6,3,0,527,524,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,
		0,529,530,5,1,0,0,530,531,5,13,0,0,531,532,5,19,0,0,532,71,1,0,0,0,533,
		534,5,1,0,0,534,535,5,15,0,0,535,536,5,79,0,0,536,537,5,49,0,0,537,538,
		3,88,44,0,538,539,5,37,0,0,539,545,3,88,44,0,540,542,5,33,0,0,541,543,
		5,62,0,0,542,541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,546,5,80,
		0,0,545,540,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,548,3,6,3,0,548,
		549,5,1,0,0,549,550,5,13,0,0,550,551,5,15,0,0,551,73,1,0,0,0,552,553,5,
		1,0,0,553,554,5,16,0,0,554,555,5,79,0,0,555,556,5,21,0,0,556,557,3,88,
		44,0,557,558,3,6,3,0,558,559,5,1,0,0,559,560,5,13,0,0,560,561,5,16,0,0,
		561,75,1,0,0,0,562,563,5,1,0,0,563,564,5,41,0,0,564,565,3,88,44,0,565,
		566,3,6,3,0,566,567,5,1,0,0,567,568,5,13,0,0,568,569,5,41,0,0,569,77,1,
		0,0,0,570,571,5,1,0,0,571,572,5,30,0,0,572,573,3,6,3,0,573,574,5,1,0,0,
		574,575,5,39,0,0,575,576,3,88,44,0,576,79,1,0,0,0,577,578,5,1,0,0,578,
		579,5,38,0,0,579,580,3,6,3,0,580,581,5,1,0,0,581,582,5,6,0,0,582,583,5,
		79,0,0,583,584,3,6,3,0,584,585,5,1,0,0,585,586,5,13,0,0,586,587,5,38,0,
		0,587,81,1,0,0,0,588,589,5,1,0,0,589,590,5,34,0,0,590,592,3,88,44,0,591,
		593,3,84,42,0,592,591,1,0,0,0,593,594,1,0,0,0,594,592,1,0,0,0,594,595,
		1,0,0,0,595,596,1,0,0,0,596,597,3,86,43,0,597,598,5,1,0,0,598,599,5,13,
		0,0,599,600,5,34,0,0,600,83,1,0,0,0,601,602,5,1,0,0,602,604,5,5,0,0,603,
		605,5,62,0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,607,3,
		106,53,0,607,608,3,6,3,0,608,85,1,0,0,0,609,610,5,1,0,0,610,611,5,11,0,
		0,611,612,3,6,3,0,612,87,1,0,0,0,613,614,6,44,-1,0,614,629,3,90,45,0,615,
		629,3,18,9,0,616,629,3,100,50,0,617,618,3,134,67,0,618,619,3,88,44,9,619,
		629,1,0,0,0,620,629,3,64,32,0,621,629,3,92,46,0,622,629,3,94,47,0,623,
		624,3,36,18,0,624,625,3,88,44,3,625,629,1,0,0,0,626,627,5,1,0,0,627,629,
		3,88,44,1,628,613,1,0,0,0,628,615,1,0,0,0,628,616,1,0,0,0,628,617,1,0,
		0,0,628,620,1,0,0,0,628,621,1,0,0,0,628,622,1,0,0,0,628,623,1,0,0,0,628,
		626,1,0,0,0,629,649,1,0,0,0,630,631,10,8,0,0,631,632,5,65,0,0,632,648,
		3,88,44,9,633,634,10,7,0,0,634,635,3,136,68,0,635,636,3,88,44,8,636,648,
		1,0,0,0,637,638,10,12,0,0,638,648,3,96,48,0,639,640,10,11,0,0,640,641,
		5,58,0,0,641,648,3,18,9,0,642,643,10,10,0,0,643,644,5,58,0,0,644,648,5,
		79,0,0,645,646,10,2,0,0,646,648,3,66,33,0,647,630,1,0,0,0,647,633,1,0,
		0,0,647,637,1,0,0,0,647,639,1,0,0,0,647,642,1,0,0,0,647,645,1,0,0,0,648,
		651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,89,1,0,0,0,651,649,1,0,
		0,0,652,653,5,55,0,0,653,654,3,88,44,0,654,655,5,56,0,0,655,91,1,0,0,0,
		656,657,5,19,0,0,657,658,3,88,44,0,658,659,5,1,0,0,659,660,5,36,0,0,660,
		661,3,88,44,0,661,662,5,1,0,0,662,663,5,12,0,0,663,664,3,88,44,0,664,93,
		1,0,0,0,665,666,5,23,0,0,666,667,3,20,10,0,667,668,5,50,0,0,668,669,3,
		88,44,0,669,95,1,0,0,0,670,677,5,53,0,0,671,678,3,88,44,0,672,673,3,88,
		44,0,673,674,5,59,0,0,674,675,3,88,44,0,675,678,1,0,0,0,676,678,3,98,49,
		0,677,671,1,0,0,0,677,672,1,0,0,0,677,676,1,0,0,0,678,679,1,0,0,0,679,
		680,5,54,0,0,680,97,1,0,0,0,681,682,3,88,44,0,682,683,5,57,0,0,683,684,
		3,88,44,0,684,691,1,0,0,0,685,686,3,88,44,0,686,687,5,57,0,0,687,691,1,
		0,0,0,688,689,5,57,0,0,689,691,3,88,44,0,690,681,1,0,0,0,690,685,1,0,0,
		0,690,688,1,0,0,0,691,99,1,0,0,0,692,702,3,104,52,0,693,695,3,102,51,0,
		694,693,1,0,0,0,694,695,1,0,0,0,695,696,1,0,0,0,696,702,5,79,0,0,697,702,
		3,108,54,0,698,702,5,32,0,0,699,700,5,11,0,0,700,702,3,144,72,0,701,692,
		1,0,0,0,701,694,1,0,0,0,701,697,1,0,0,0,701,698,1,0,0,0,701,699,1,0,0,
		0,702,101,1,0,0,0,703,704,7,1,0,0,704,705,5,58,0,0,705,103,1,0,0,0,706,
		709,3,106,53,0,707,709,3,110,55,0,708,706,1,0,0,0,708,707,1,0,0,0,709,
		105,1,0,0,0,710,716,5,43,0,0,711,716,5,80,0,0,712,716,5,81,0,0,713,716,
		5,82,0,0,714,716,3,46,23,0,715,710,1,0,0,0,715,711,1,0,0,0,715,712,1,0,
		0,0,715,713,1,0,0,0,715,714,1,0,0,0,716,107,1,0,0,0,717,722,3,118,59,0,
		718,722,3,124,62,0,719,722,3,112,56,0,720,722,3,126,63,0,721,717,1,0,0,
		0,721,718,1,0,0,0,721,719,1,0,0,0,721,720,1,0,0,0,722,109,1,0,0,0,723,
		728,5,83,0,0,724,728,3,114,57,0,725,728,3,120,60,0,726,728,3,128,64,0,
		727,723,1,0,0,0,727,724,1,0,0,0,727,725,1,0,0,0,727,726,1,0,0,0,728,111,
		1,0,0,0,729,730,5,55,0,0,730,731,3,88,44,0,731,732,5,59,0,0,732,737,3,
		88,44,0,733,734,5,59,0,0,734,736,3,88,44,0,735,733,1,0,0,0,736,739,1,0,
		0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,737,1,0,0,0,740,
		741,5,56,0,0,741,113,1,0,0,0,742,743,5,55,0,0,743,744,3,104,52,0,744,745,
		5,59,0,0,745,750,3,104,52,0,746,747,5,59,0,0,747,749,3,104,52,0,748,746,
		1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,753,1,0,0,
		0,752,750,1,0,0,0,753,754,5,56,0,0,754,115,1,0,0,0,755,757,5,55,0,0,756,
		758,5,40,0,0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,765,5,
		79,0,0,760,762,5,59,0,0,761,763,5,40,0,0,762,761,1,0,0,0,762,763,1,0,0,
		0,763,764,1,0,0,0,764,766,5,79,0,0,765,760,1,0,0,0,766,767,1,0,0,0,767,
		765,1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,769,770,5,56,0,0,770,117,1,
		0,0,0,771,772,5,51,0,0,772,777,3,88,44,0,773,774,5,59,0,0,774,776,3,88,
		44,0,775,773,1,0,0,0,776,779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,
		780,1,0,0,0,779,777,1,0,0,0,780,781,5,52,0,0,781,119,1,0,0,0,782,783,5,
		51,0,0,783,788,3,104,52,0,784,785,5,59,0,0,785,787,3,104,52,0,786,784,
		1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,
		0,790,788,1,0,0,0,791,792,5,52,0,0,792,121,1,0,0,0,793,794,5,51,0,0,794,
		795,5,79,0,0,795,796,5,60,0,0,796,797,5,79,0,0,797,798,5,52,0,0,798,123,
		1,0,0,0,799,800,5,45,0,0,800,801,3,148,74,0,801,803,5,55,0,0,802,804,5,
		80,0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,806,5,56,0,
		0,806,125,1,0,0,0,807,808,5,51,0,0,808,813,3,130,65,0,809,810,5,59,0,0,
		810,812,3,130,65,0,811,809,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,813,
		814,1,0,0,0,814,816,1,0,0,0,815,813,1,0,0,0,816,817,5,52,0,0,817,127,1,
		0,0,0,818,819,5,51,0,0,819,824,3,132,66,0,820,821,5,59,0,0,821,823,3,132,
		66,0,822,820,1,0,0,0,823,826,1,0,0,0,824,822,1,0,0,0,824,825,1,0,0,0,825,
		827,1,0,0,0,826,824,1,0,0,0,827,828,5,52,0,0,828,129,1,0,0,0,829,830,3,
		88,44,0,830,831,5,60,0,0,831,832,3,88,44,0,832,131,1,0,0,0,833,834,3,104,
		52,0,834,835,5,60,0,0,835,836,3,104,52,0,836,133,1,0,0,0,837,838,7,2,0,
		0,838,135,1,0,0,0,839,843,3,138,69,0,840,843,3,140,70,0,841,843,3,142,
		71,0,842,839,1,0,0,0,842,840,1,0,0,0,842,841,1,0,0,0,843,137,1,0,0,0,844,
		845,7,3,0,0,845,139,1,0,0,0,846,847,7,4,0,0,847,141,1,0,0,0,848,849,7,
		5,0,0,849,143,1,0,0,0,850,858,5,44,0,0,851,858,3,146,73,0,852,858,5,78,
		0,0,853,854,5,78,0,0,854,858,3,148,74,0,855,858,3,150,75,0,856,858,3,152,
		76,0,857,850,1,0,0,0,857,851,1,0,0,0,857,852,1,0,0,0,857,853,1,0,0,0,857,
		855,1,0,0,0,857,856,1,0,0,0,858,145,1,0,0,0,859,860,7,6,0,0,860,861,3,
		148,74,0,861,147,1,0,0,0,862,863,5,68,0,0,863,868,3,144,72,0,864,865,5,
		59,0,0,865,867,3,144,72,0,866,864,1,0,0,0,867,870,1,0,0,0,868,866,1,0,
		0,0,868,869,1,0,0,0,869,871,1,0,0,0,870,868,1,0,0,0,871,872,5,69,0,0,872,
		149,1,0,0,0,873,874,5,55,0,0,874,877,3,144,72,0,875,876,5,59,0,0,876,878,
		3,144,72,0,877,875,1,0,0,0,878,879,1,0,0,0,879,877,1,0,0,0,879,880,1,0,
		0,0,880,881,1,0,0,0,881,882,5,56,0,0,882,151,1,0,0,0,883,884,5,55,0,0,
		884,889,3,144,72,0,885,886,5,59,0,0,886,888,3,144,72,0,887,885,1,0,0,0,
		888,891,1,0,0,0,889,887,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,889,
		1,0,0,0,892,893,5,50,0,0,893,894,3,144,72,0,894,895,5,56,0,0,895,153,1,
		0,0,0,73,161,163,169,193,195,204,222,226,230,233,236,241,250,264,273,281,
		311,320,332,343,360,366,372,374,386,395,397,409,414,416,429,435,437,450,
		455,465,476,480,484,493,505,521,527,542,545,594,604,628,647,649,677,690,
		694,701,708,715,721,727,737,750,757,762,767,777,788,803,813,824,842,857,
		868,879,889
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
