//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Elan//Repository//Parser//Elan.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ElanParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NL=1, SINGLE_LINE_COMMENT=2, COMMENT_MARKER=3, AS=4, ABSTRACT=5, CALL=6, 
		CASE=7, CATCH=8, CLASS=9, CONSTANT=10, CONSTRUCTOR=11, CURRY=12, DEFAULT=13, 
		ELSE=14, END=15, ENUM=16, FOR=17, FOREACH=18, FUNCTION=19, GLOBAL=20, 
		IF=21, IMMUTABLE=22, IN=23, INHERITS=24, LAMBDA=25, LET=26, MAIN=27, NEW=28, 
		OF=29, OUT=30, PARTIAL=31, PRINT=32, PRIVATE=33, PROCEDURE=34, PROPERTY=35, 
		REPEAT=36, RETURN=37, SELF=38, SET=39, STEP=40, SWITCH=41, SYSTEM=42, 
		TEST=43, THEN=44, THROW=45, TO=46, TRY=47, UNTIL=48, VAR=49, WHILE=50, 
		WITH=51, BOOL_VALUE=52, VALUE_TYPE=53, ARRAY=54, LIST=55, DICTIONARY=56, 
		ITERABLE=57, ASSIGN=58, ARROW=59, OPEN_BRACE=60, CLOSE_BRACE=61, OPEN_SQ_BRACKET=62, 
		CLOSE_SQ_BRACKET=63, OPEN_BRACKET=64, CLOSE_BRACKET=65, DOUBLE_DOT=66, 
		DOT=67, COMMA=68, COLON=69, PLUS=70, MINUS=71, MULT=72, DIVIDE=73, POWER=74, 
		MOD=75, INT_DIV=76, LT=77, GT=78, OP_AND=79, OP_NOT=80, OP_OR=81, OP_XOR=82, 
		OP_EQ=83, OP_NE=84, OP_LE=85, OP_GE=86, TYPENAME=87, IDENTIFIER=88, LITERAL_INTEGER=89, 
		LITERAL_FLOAT=90, LITERAL_CHAR=91, LITERAL_STRING=92, WHITESPACES=93, 
		NEWLINE=94, WS=95;
	public const int
		RULE_file = 0, RULE_main = 1, RULE_test = 2, RULE_statementBlock = 3, 
		RULE_callStatement = 4, RULE_throwException = 5, RULE_printStatement = 6, 
		RULE_varDef = 7, RULE_assignment = 8, RULE_inlineAsignment = 9, RULE_assignableValue = 10, 
		RULE_procedureCall = 11, RULE_functionCall = 12, RULE_systemCall = 13, 
		RULE_argumentList = 14, RULE_procedureDef = 15, RULE_procedureSignature = 16, 
		RULE_procedureParameterList = 17, RULE_parameterList = 18, RULE_parameter = 19, 
		RULE_procedureParameter = 20, RULE_functionDef = 21, RULE_functionWithBody = 22, 
		RULE_expressionFunction = 23, RULE_functionSignature = 24, RULE_systemAccessor = 25, 
		RULE_accessorSignature = 26, RULE_constantDef = 27, RULE_enumDef = 28, 
		RULE_enumType = 29, RULE_enumValue = 30, RULE_classDef = 31, RULE_mutableClass = 32, 
		RULE_abstractClass = 33, RULE_immutableClass = 34, RULE_abstractImmutableClass = 35, 
		RULE_inherits = 36, RULE_property = 37, RULE_constructor = 38, RULE_newInstance = 39, 
		RULE_withClause = 40, RULE_proceduralControlFlow = 41, RULE_if = 42, RULE_for = 43, 
		RULE_foreach = 44, RULE_while = 45, RULE_repeat = 46, RULE_try = 47, RULE_switch = 48, 
		RULE_case = 49, RULE_caseDefault = 50, RULE_expression = 51, RULE_bracketedExpression = 52, 
		RULE_ifExpression = 53, RULE_lambda = 54, RULE_index = 55, RULE_range = 56, 
		RULE_value = 57, RULE_scopeQualifier = 58, RULE_literal = 59, RULE_literalValue = 60, 
		RULE_dataStructureDefinition = 61, RULE_literalDataStructure = 62, RULE_tupleDefinition = 63, 
		RULE_literalTuple = 64, RULE_deconstructedTuple = 65, RULE_listDefinition = 66, 
		RULE_literalList = 67, RULE_listDecomp = 68, RULE_arrayDefinition = 69, 
		RULE_dictionaryDefinition = 70, RULE_literalDictionary = 71, RULE_kvp = 72, 
		RULE_literalKvp = 73, RULE_unaryOp = 74, RULE_binaryOp = 75, RULE_arithmeticOp = 76, 
		RULE_logicalOp = 77, RULE_conditionalOp = 78, RULE_type = 79, RULE_dataStructureType = 80, 
		RULE_genericSpecifier = 81, RULE_tupleType = 82, RULE_funcType = 83;
	public static readonly string[] ruleNames = {
		"file", "main", "test", "statementBlock", "callStatement", "throwException", 
		"printStatement", "varDef", "assignment", "inlineAsignment", "assignableValue", 
		"procedureCall", "functionCall", "systemCall", "argumentList", "procedureDef", 
		"procedureSignature", "procedureParameterList", "parameterList", "parameter", 
		"procedureParameter", "functionDef", "functionWithBody", "expressionFunction", 
		"functionSignature", "systemAccessor", "accessorSignature", "constantDef", 
		"enumDef", "enumType", "enumValue", "classDef", "mutableClass", "abstractClass", 
		"immutableClass", "abstractImmutableClass", "inherits", "property", "constructor", 
		"newInstance", "withClause", "proceduralControlFlow", "if", "for", "foreach", 
		"while", "repeat", "try", "switch", "case", "caseDefault", "expression", 
		"bracketedExpression", "ifExpression", "lambda", "index", "range", "value", 
		"scopeQualifier", "literal", "literalValue", "dataStructureDefinition", 
		"literalDataStructure", "tupleDefinition", "literalTuple", "deconstructedTuple", 
		"listDefinition", "literalList", "listDecomp", "arrayDefinition", "dictionaryDefinition", 
		"literalDictionary", "kvp", "literalKvp", "unaryOp", "binaryOp", "arithmeticOp", 
		"logicalOp", "conditionalOp", "type", "dataStructureType", "genericSpecifier", 
		"tupleType", "funcType"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#'", "'as'", "'abstract'", "'call'", "'case'", "'catch'", 
		"'class'", "'constant'", "'constructor'", "'curry'", "'default'", "'else'", 
		"'end'", "'enum'", "'for'", "'foreach'", "'function'", "'global'", "'if'", 
		"'immutable'", "'in'", "'inherits'", "'lambda'", "'let'", "'main'", "'new'", 
		"'of'", "'out'", "'partial'", "'print'", "'private'", "'procedure'", "'property'", 
		"'repeat'", "'return'", "'self'", "'set'", "'step'", "'switch'", "'system'", 
		"'test'", "'then'", "'throw'", "'to'", "'try'", "'until'", "'var'", "'while'", 
		"'with'", null, null, "'Array'", "'List'", "'Dictionary'", "'Iter'", "'='", 
		"'->'", "'{'", "'}'", "'['", "']'", "'('", "')'", "'..'", "'.'", "','", 
		"':'", "'+'", "'-'", "'*'", "'/'", "'^'", "'mod'", "'div'", "'<'", "'>'", 
		"'and'", "'not'", "'or'", "'xor'", "'is'", null, "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NL", "SINGLE_LINE_COMMENT", "COMMENT_MARKER", "AS", "ABSTRACT", 
		"CALL", "CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", "CURRY", 
		"DEFAULT", "ELSE", "END", "ENUM", "FOR", "FOREACH", "FUNCTION", "GLOBAL", 
		"IF", "IMMUTABLE", "IN", "INHERITS", "LAMBDA", "LET", "MAIN", "NEW", "OF", 
		"OUT", "PARTIAL", "PRINT", "PRIVATE", "PROCEDURE", "PROPERTY", "REPEAT", 
		"RETURN", "SELF", "SET", "STEP", "SWITCH", "SYSTEM", "TEST", "THEN", "THROW", 
		"TO", "TRY", "UNTIL", "VAR", "WHILE", "WITH", "BOOL_VALUE", "VALUE_TYPE", 
		"ARRAY", "LIST", "DICTIONARY", "ITERABLE", "ASSIGN", "ARROW", "OPEN_BRACE", 
		"CLOSE_BRACE", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "DOUBLE_DOT", "DOT", "COMMA", "COLON", "PLUS", "MINUS", 
		"MULT", "DIVIDE", "POWER", "MOD", "INT_DIV", "LT", "GT", "OP_AND", "OP_NOT", 
		"OP_OR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "TYPENAME", "IDENTIFIER", 
		"LITERAL_INTEGER", "LITERAL_FLOAT", "LITERAL_CHAR", "LITERAL_STRING", 
		"WHITESPACES", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Elan.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ElanParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElanParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElanParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ElanParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext[] enumDef() {
			return GetRuleContexts<EnumDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef(int i) {
			return GetRuleContext<EnumDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemAccessorContext[] systemAccessor() {
			return GetRuleContexts<SystemAccessorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemAccessorContext systemAccessor(int i) {
			return GetRuleContext<SystemAccessorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 176;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 168;
						main();
						}
						break;
					case 2:
						{
						State = 169;
						procedureDef();
						}
						break;
					case 3:
						{
						State = 170;
						functionDef();
						}
						break;
					case 4:
						{
						State = 171;
						constantDef();
						}
						break;
					case 5:
						{
						State = 172;
						enumDef();
						}
						break;
					case 6:
						{
						State = 173;
						classDef();
						}
						break;
					case 7:
						{
						State = 174;
						test();
						}
						break;
					case 8:
						{
						State = 175;
						systemAccessor();
						}
						break;
					}
					} 
				}
				State = 180;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 181;
				Match(NL);
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 187;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(ElanParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(ElanParser.MAIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(NL);
			State = 190;
			Match(MAIN);
			State = 191;
			statementBlock();
			State = 192;
			Match(NL);
			State = 193;
			Match(END);
			State = 194;
			Match(MAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEST() { return GetTokens(ElanParser.TEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEST(int i) {
			return GetToken(ElanParser.TEST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public TestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTest(this);
		}
	}

	[RuleVersion(0)]
	public TestContext test() {
		TestContext _localctx = new TestContext(Context, State);
		EnterRule(_localctx, 4, RULE_test);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(NL);
			State = 197;
			Match(TEST);
			State = 198;
			Match(IDENTIFIER);
			State = 199;
			statementBlock();
			State = 200;
			Match(NL);
			State = 201;
			Match(END);
			State = 202;
			Match(TEST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext[] proceduralControlFlow() {
			return GetRuleContexts<ProceduralControlFlowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext proceduralControlFlow(int i) {
			return GetRuleContext<ProceduralControlFlowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext[] throwException() {
			return GetRuleContexts<ThrowExceptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException(int i) {
			return GetRuleContext<ThrowExceptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext[] printStatement() {
			return GetRuleContexts<PrintStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement(int i) {
			return GetRuleContext<PrintStatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 210;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 204;
						varDef();
						}
						break;
					case 2:
						{
						State = 205;
						assignment();
						}
						break;
					case 3:
						{
						State = 206;
						proceduralControlFlow();
						}
						break;
					case 4:
						{
						State = 207;
						callStatement();
						}
						break;
					case 5:
						{
						State = 208;
						throwException();
						}
						break;
					case 6:
						{
						State = 209;
						printStatement();
						}
						break;
					}
					} 
				}
				State = 214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(ElanParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(NL);
			State = 216;
			Match(CALL);
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 217;
				procedureCall();
				}
				break;
			case 2:
				{
				{
				State = 218;
				assignableValue();
				State = 219;
				Match(DOT);
				State = 220;
				procedureCall();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(ElanParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public ThrowExceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwException; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterThrowException(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitThrowException(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExceptionContext throwException() {
		ThrowExceptionContext _localctx = new ThrowExceptionContext(Context, State);
		EnterRule(_localctx, 10, RULE_throwException);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(NL);
			State = 225;
			Match(THROW);
			State = 226;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==LITERAL_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ElanParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(NL);
			State = 229;
			Match(PRINT);
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 230;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ElanParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemCallContext systemCall() {
			return GetRuleContext<SystemCallContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterVarDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitVarDef(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 14, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(NL);
			State = 234;
			Match(VAR);
			State = 235;
			assignableValue();
			State = 236;
			Match(ASSIGN);
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case DEFAULT:
			case GLOBAL:
			case IF:
			case NEW:
			case SELF:
			case BOOL_VALUE:
			case ARRAY:
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case MINUS:
			case OP_NOT:
			case TYPENAME:
			case IDENTIFIER:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
			case LITERAL_STRING:
				{
				State = 237;
				expression(0);
				}
				break;
			case SYSTEM:
				{
				State = 238;
				systemCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ElanParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemCallContext systemCall() {
			return GetRuleContext<SystemCallContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(NL);
			State = 242;
			Match(SET);
			State = 243;
			assignableValue();
			State = 244;
			Match(TO);
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case DEFAULT:
			case GLOBAL:
			case IF:
			case NEW:
			case SELF:
			case BOOL_VALUE:
			case ARRAY:
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case MINUS:
			case OP_NOT:
			case TYPENAME:
			case IDENTIFIER:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
			case LITERAL_STRING:
				{
				State = 245;
				expression(0);
				}
				break;
			case SYSTEM:
				{
				State = 246;
				systemCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAsignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InlineAsignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAsignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterInlineAsignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitInlineAsignment(this);
		}
	}

	[RuleVersion(0)]
	public InlineAsignmentContext inlineAsignment() {
		InlineAsignmentContext _localctx = new InlineAsignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_inlineAsignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			assignableValue();
			State = 250;
			Match(ASSIGN);
			State = 251;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeconstructedTupleContext deconstructedTuple() {
			return GetRuleContext<DeconstructedTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDecompContext listDecomp() {
			return GetRuleContext<ListDecompContext>(0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAssignableValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAssignableValue(this);
		}
	}

	[RuleVersion(0)]
	public AssignableValueContext assignableValue() {
		AssignableValueContext _localctx = new AssignableValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignableValue);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL:
			case SELF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SELF) {
					{
					State = 253;
					scopeQualifier();
					}
				}

				State = 256;
				Match(IDENTIFIER);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_SQ_BRACKET) {
					{
					State = 257;
					index();
					}
				}

				}
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260;
				deconstructedTuple();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 261;
				listDecomp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProcedureCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProcedureCall(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureCallContext procedureCall() {
		ProcedureCallContext _localctx = new ProcedureCallContext(Context, State);
		EnterRule(_localctx, 22, RULE_procedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SELF) {
				{
				State = 264;
				scopeQualifier();
				}
			}

			State = 267;
			Match(IDENTIFIER);
			State = 268;
			Match(OPEN_BRACKET);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1175439777926750210L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 528547969L) != 0)) {
				{
				State = 269;
				argumentList();
				}
			}

			State = 272;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SELF) {
				{
				State = 274;
				scopeQualifier();
				}
			}

			State = 277;
			Match(IDENTIFIER);
			State = 278;
			Match(OPEN_BRACKET);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1175439777926750210L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 528547969L) != 0)) {
				{
				State = 279;
				argumentList();
				}
			}

			State = 282;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(ElanParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public SystemCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterSystemCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitSystemCall(this);
		}
	}

	[RuleVersion(0)]
	public SystemCallContext systemCall() {
		SystemCallContext _localctx = new SystemCallContext(Context, State);
		EnterRule(_localctx, 26, RULE_systemCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(SYSTEM);
			State = 285;
			Match(DOT);
			State = 286;
			Match(IDENTIFIER);
			State = 287;
			Match(OPEN_BRACKET);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1175439777926750210L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 528547969L) != 0)) {
				{
				State = 288;
				argumentList();
				}
			}

			State = 291;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext[] lambda() {
			return GetRuleContexts<LambdaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda(int i) {
			return GetRuleContext<LambdaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 28, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case DEFAULT:
			case GLOBAL:
			case IF:
			case NEW:
			case SELF:
			case BOOL_VALUE:
			case ARRAY:
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case MINUS:
			case OP_NOT:
			case TYPENAME:
			case IDENTIFIER:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
			case LITERAL_STRING:
				{
				State = 293;
				expression(0);
				}
				break;
			case LAMBDA:
				{
				State = 294;
				lambda();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 297;
				Match(COMMA);
				State = 300;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NL:
				case DEFAULT:
				case GLOBAL:
				case IF:
				case NEW:
				case SELF:
				case BOOL_VALUE:
				case ARRAY:
				case OPEN_BRACE:
				case OPEN_BRACKET:
				case MINUS:
				case OP_NOT:
				case TYPENAME:
				case IDENTIFIER:
				case LITERAL_INTEGER:
				case LITERAL_FLOAT:
				case LITERAL_CHAR:
				case LITERAL_STRING:
					{
					State = 298;
					expression(0);
					}
					break;
				case LAMBDA:
					{
					State = 299;
					lambda();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ProcedureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProcedureDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProcedureDef(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefContext procedureDef() {
		ProcedureDefContext _localctx = new ProcedureDefContext(Context, State);
		EnterRule(_localctx, 30, RULE_procedureDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(NL);
			State = 308;
			Match(PROCEDURE);
			State = 309;
			procedureSignature();
			State = 310;
			statementBlock();
			State = 311;
			Match(NL);
			State = 312;
			Match(END);
			State = 313;
			Match(PROCEDURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterListContext procedureParameterList() {
			return GetRuleContext<ProcedureParameterListContext>(0);
		}
		public ProcedureSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProcedureSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProcedureSignature(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSignatureContext procedureSignature() {
		ProcedureSignatureContext _localctx = new ProcedureSignatureContext(Context, State);
		EnterRule(_localctx, 32, RULE_procedureSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(IDENTIFIER);
			State = 316;
			Match(OPEN_BRACKET);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT || _la==IDENTIFIER) {
				{
				State = 317;
				procedureParameterList();
				}
			}

			State = 320;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ProcedureParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProcedureParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProcedureParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterListContext procedureParameterList() {
		ProcedureParameterListContext _localctx = new ProcedureParameterListContext(Context, State);
		EnterRule(_localctx, 34, RULE_procedureParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			procedureParameter();
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 323;
				Match(COMMA);
				State = 324;
				procedureParameter();
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			parameter();
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 331;
				Match(COMMA);
				State = 332;
				parameter();
				}
				}
				State = 337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(IDENTIFIER);
			State = 339;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(ElanParser.OUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 341;
				Match(OUT);
				}
			}

			State = 344;
			Match(IDENTIFIER);
			State = 345;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionWithBodyContext functionWithBody() {
			return GetRuleContext<FunctionWithBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionFunctionContext expressionFunction() {
			return GetRuleContext<ExpressionFunctionContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionDef);
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347;
				functionWithBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348;
				expressionFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionWithBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElanParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public FunctionWithBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionWithBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFunctionWithBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFunctionWithBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionWithBodyContext functionWithBody() {
		FunctionWithBodyContext _localctx = new FunctionWithBodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionWithBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(NL);
			State = 352;
			Match(FUNCTION);
			State = 353;
			functionSignature();
			State = 354;
			statementBlock();
			State = 355;
			Match(NL);
			State = 356;
			Match(RETURN);
			State = 357;
			expression(0);
			State = 358;
			Match(NL);
			State = 359;
			Match(END);
			State = 360;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ElanParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterExpressionFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitExpressionFunction(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionFunctionContext expressionFunction() {
		ExpressionFunctionContext _localctx = new ExpressionFunctionContext(Context, State);
		EnterRule(_localctx, 46, RULE_expressionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(NL);
			State = 363;
			Match(FUNCTION);
			State = 364;
			functionSignature();
			State = 365;
			Match(ARROW);
			State = 366;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ElanParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 48, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(IDENTIFIER);
			State = 369;
			Match(OPEN_BRACKET);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 370;
				parameterList();
				}
			}

			State = 373;
			Match(CLOSE_BRACKET);
			State = 374;
			Match(AS);
			State = 375;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SYSTEM() { return GetTokens(ElanParser.SYSTEM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM(int i) {
			return GetToken(ElanParser.SYSTEM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorSignatureContext accessorSignature() {
			return GetRuleContext<AccessorSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElanParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public SystemAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterSystemAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitSystemAccessor(this);
		}
	}

	[RuleVersion(0)]
	public SystemAccessorContext systemAccessor() {
		SystemAccessorContext _localctx = new SystemAccessorContext(Context, State);
		EnterRule(_localctx, 50, RULE_systemAccessor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(NL);
			State = 378;
			Match(SYSTEM);
			State = 379;
			accessorSignature();
			State = 380;
			statementBlock();
			State = 381;
			Match(NL);
			State = 382;
			Match(RETURN);
			State = 383;
			expression(0);
			State = 384;
			Match(NL);
			State = 385;
			Match(END);
			State = 386;
			Match(SYSTEM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ElanParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public AccessorSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAccessorSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAccessorSignature(this);
		}
	}

	[RuleVersion(0)]
	public AccessorSignatureContext accessorSignature() {
		AccessorSignatureContext _localctx = new AccessorSignatureContext(Context, State);
		EnterRule(_localctx, 52, RULE_accessorSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			Match(IDENTIFIER);
			State = 389;
			Match(OPEN_BRACKET);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 390;
				parameterList();
				}
			}

			State = 393;
			Match(CLOSE_BRACKET);
			State = 394;
			Match(AS);
			State = 395;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ElanParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		public ConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterConstantDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitConstantDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefContext constantDef() {
		ConstantDefContext _localctx = new ConstantDefContext(Context, State);
		EnterRule(_localctx, 54, RULE_constantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(NL);
			State = 398;
			Match(CONSTANT);
			State = 399;
			Match(IDENTIFIER);
			State = 400;
			Match(ASSIGN);
			State = 403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case TYPENAME:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
			case LITERAL_STRING:
				{
				State = 401;
				literal();
				}
				break;
			case NEW:
			case IDENTIFIER:
				{
				State = 402;
				newInstance();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENUM() { return GetTokens(ElanParser.ENUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM(int i) {
			return GetToken(ElanParser.ENUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterEnumDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitEnumDef(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 56, RULE_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			Match(NL);
			State = 406;
			Match(ENUM);
			State = 407;
			enumType();
			State = 408;
			Match(NL);
			State = 409;
			Match(IDENTIFIER);
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 410;
				Match(COMMA);
				State = 411;
				Match(IDENTIFIER);
				}
				}
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 417;
			Match(NL);
			State = 418;
			Match(END);
			State = 419;
			Match(ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterEnumType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitEnumType(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_enumType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(TYPENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			enumType();
			State = 424;
			Match(DOT);
			State = 425;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MutableClassContext mutableClass() {
			return GetRuleContext<MutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractClassContext abstractClass() {
			return GetRuleContext<AbstractClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmutableClassContext immutableClass() {
			return GetRuleContext<ImmutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractImmutableClassContext abstractImmutableClass() {
			return GetRuleContext<AbstractImmutableClassContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 62, RULE_classDef);
		try {
			State = 431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427;
				mutableClass();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 428;
				abstractClass();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 429;
				immutableClass();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 430;
				abstractImmutableClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		public MutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterMutableClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitMutableClass(this);
		}
	}

	[RuleVersion(0)]
	public MutableClassContext mutableClass() {
		MutableClassContext _localctx = new MutableClassContext(Context, State);
		EnterRule(_localctx, 64, RULE_mutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(NL);
			State = 434;
			Match(CLASS);
			State = 435;
			Match(TYPENAME);
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 436;
				inherits();
				}
			}

			State = 439;
			constructor();
			State = 445;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 443;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						State = 440;
						property();
						}
						break;
					case 2:
						{
						State = 441;
						functionDef();
						}
						break;
					case 3:
						{
						State = 442;
						procedureDef();
						}
						break;
					}
					} 
				}
				State = 447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			State = 448;
			Match(NL);
			State = 449;
			Match(END);
			State = 450;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext[] procedureSignature() {
			return GetRuleContexts<ProcedureSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature(int i) {
			return GetRuleContext<ProcedureSignatureContext>(i);
		}
		public AbstractClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAbstractClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAbstractClass(this);
		}
	}

	[RuleVersion(0)]
	public AbstractClassContext abstractClass() {
		AbstractClassContext _localctx = new AbstractClassContext(Context, State);
		EnterRule(_localctx, 66, RULE_abstractClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			Match(NL);
			State = 453;
			Match(ABSTRACT);
			State = 454;
			Match(CLASS);
			State = 455;
			Match(TYPENAME);
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 456;
				inherits();
				}
			}

			State = 468;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 466;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						State = 459;
						property();
						}
						break;
					case 2:
						{
						State = 460;
						Match(NL);
						State = 461;
						Match(FUNCTION);
						State = 462;
						functionSignature();
						}
						break;
					case 3:
						{
						State = 463;
						Match(NL);
						State = 464;
						Match(PROCEDURE);
						State = 465;
						procedureSignature();
						}
						break;
					}
					} 
				}
				State = 470;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 471;
			Match(NL);
			State = 472;
			Match(END);
			State = 473;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterImmutableClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitImmutableClass(this);
		}
	}

	[RuleVersion(0)]
	public ImmutableClassContext immutableClass() {
		ImmutableClassContext _localctx = new ImmutableClassContext(Context, State);
		EnterRule(_localctx, 68, RULE_immutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(NL);
			State = 476;
			Match(IMMUTABLE);
			State = 477;
			Match(CLASS);
			State = 478;
			Match(TYPENAME);
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 479;
				inherits();
				}
			}

			State = 482;
			constructor();
			State = 487;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 485;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
					case 1:
						{
						State = 483;
						property();
						}
						break;
					case 2:
						{
						State = 484;
						functionDef();
						}
						break;
					}
					} 
				}
				State = 489;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			State = 490;
			Match(NL);
			State = 491;
			Match(END);
			State = 492;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		public AbstractImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractImmutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAbstractImmutableClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAbstractImmutableClass(this);
		}
	}

	[RuleVersion(0)]
	public AbstractImmutableClassContext abstractImmutableClass() {
		AbstractImmutableClassContext _localctx = new AbstractImmutableClassContext(Context, State);
		EnterRule(_localctx, 70, RULE_abstractImmutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(NL);
			State = 495;
			Match(ABSTRACT);
			State = 496;
			Match(IMMUTABLE);
			State = 497;
			Match(CLASS);
			State = 498;
			Match(TYPENAME);
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 499;
				inherits();
				}
			}

			State = 508;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 506;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
					case 1:
						{
						State = 502;
						property();
						}
						break;
					case 2:
						{
						State = 503;
						Match(NL);
						State = 504;
						Match(FUNCTION);
						State = 505;
						functionSignature();
						}
						break;
					}
					} 
				}
				State = 510;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 511;
			Match(NL);
			State = 512;
			Match(END);
			State = 513;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(ElanParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public InheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterInherits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitInherits(this);
		}
	}

	[RuleVersion(0)]
	public InheritsContext inherits() {
		InheritsContext _localctx = new InheritsContext(Context, State);
		EnterRule(_localctx, 72, RULE_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(INHERITS);
			State = 516;
			type();
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 517;
				Match(COMMA);
				State = 518;
				type();
				}
				}
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(ElanParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ElanParser.PRIVATE, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 74, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(NL);
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 525;
				Match(PRIVATE);
				}
			}

			State = 528;
			Match(PROPERTY);
			State = 529;
			Match(IDENTIFIER);
			State = 530;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRUCTOR() { return GetTokens(ElanParser.CONSTRUCTOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(ElanParser.CONSTRUCTOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 76, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(NL);
			State = 533;
			Match(CONSTRUCTOR);
			State = 534;
			Match(OPEN_BRACKET);
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 535;
				parameterList();
				}
			}

			State = 538;
			Match(CLOSE_BRACKET);
			State = 539;
			statementBlock();
			State = 540;
			Match(NL);
			State = 541;
			Match(END);
			State = 542;
			Match(CONSTRUCTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ElanParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterNewInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitNewInstance(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(Context, State);
		EnterRule(_localctx, 78, RULE_newInstance);
		int _la;
		try {
			State = 556;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 544;
				Match(NEW);
				State = 545;
				type();
				State = 546;
				Match(OPEN_BRACKET);
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1175439777926750210L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 528547969L) != 0)) {
					{
					State = 547;
					argumentList();
					}
				}

				State = 550;
				Match(CLOSE_BRACKET);
				State = 552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 551;
					withClause();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 554;
				Match(IDENTIFIER);
				State = 555;
				withClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(ElanParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InlineAsignmentContext[] inlineAsignment() {
			return GetRuleContexts<InlineAsignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineAsignmentContext inlineAsignment(int i) {
			return GetRuleContext<InlineAsignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			Match(WITH);
			State = 559;
			Match(OPEN_BRACE);
			State = 560;
			inlineAsignment();
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 561;
				Match(COMMA);
				State = 562;
				inlineAsignment();
				}
				}
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 568;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduralControlFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachContext @foreach() {
			return GetRuleContext<ForeachContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryContext @try() {
			return GetRuleContext<TryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ProceduralControlFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proceduralControlFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProceduralControlFlow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProceduralControlFlow(this);
		}
	}

	[RuleVersion(0)]
	public ProceduralControlFlowContext proceduralControlFlow() {
		ProceduralControlFlowContext _localctx = new ProceduralControlFlowContext(Context, State);
		EnterRule(_localctx, 82, RULE_proceduralControlFlow);
		try {
			State = 577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571;
				@for();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 572;
				@foreach();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 573;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 574;
				repeat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 575;
				@try();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 576;
				@switch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(ElanParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(ElanParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(ElanParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(ElanParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(ElanParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(ElanParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 84, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(NL);
			State = 580;
			Match(IF);
			State = 581;
			expression(0);
			State = 582;
			Match(THEN);
			State = 583;
			statementBlock();
			State = 593;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 584;
					Match(NL);
					State = 585;
					Match(ELSE);
					State = 586;
					Match(IF);
					State = 587;
					expression(0);
					State = 588;
					Match(THEN);
					State = 589;
					statementBlock();
					}
					} 
				}
				State = 595;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			State = 599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 596;
				Match(NL);
				State = 597;
				Match(ELSE);
				State = 598;
				statementBlock();
				}
				break;
			}
			State = 601;
			Match(NL);
			State = 602;
			Match(END);
			State = 603;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(ElanParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(ElanParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(ElanParser.STEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 86, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(NL);
			State = 606;
			Match(FOR);
			State = 607;
			Match(IDENTIFIER);
			State = 608;
			Match(ASSIGN);
			State = 609;
			expression(0);
			State = 610;
			Match(TO);
			State = 611;
			expression(0);
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 612;
				Match(STEP);
				State = 614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 613;
					Match(MINUS);
					}
				}

				State = 616;
				Match(LITERAL_INTEGER);
				}
			}

			State = 619;
			statementBlock();
			State = 620;
			Match(NL);
			State = 621;
			Match(END);
			State = 622;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOREACH() { return GetTokens(ElanParser.FOREACH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH(int i) {
			return GetToken(ElanParser.FOREACH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ForeachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterForeach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitForeach(this);
		}
	}

	[RuleVersion(0)]
	public ForeachContext @foreach() {
		ForeachContext _localctx = new ForeachContext(Context, State);
		EnterRule(_localctx, 88, RULE_foreach);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			Match(NL);
			State = 625;
			Match(FOREACH);
			State = 626;
			Match(IDENTIFIER);
			State = 627;
			Match(IN);
			State = 628;
			expression(0);
			State = 629;
			statementBlock();
			State = 630;
			Match(NL);
			State = 631;
			Match(END);
			State = 632;
			Match(FOREACH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(ElanParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(ElanParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 90, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			Match(NL);
			State = 635;
			Match(WHILE);
			State = 636;
			expression(0);
			State = 637;
			statementBlock();
			State = 638;
			Match(NL);
			State = 639;
			Match(END);
			State = 640;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(ElanParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(ElanParser.REPEAT, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 92, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			Match(NL);
			{
			State = 643;
			Match(REPEAT);
			}
			State = 644;
			statementBlock();
			State = 645;
			Match(NL);
			State = 646;
			Match(UNTIL);
			State = 647;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(ElanParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(ElanParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ElanParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public TryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTry(this);
		}
	}

	[RuleVersion(0)]
	public TryContext @try() {
		TryContext _localctx = new TryContext(Context, State);
		EnterRule(_localctx, 94, RULE_try);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(NL);
			State = 650;
			Match(TRY);
			State = 651;
			statementBlock();
			State = 652;
			Match(NL);
			State = 653;
			Match(CATCH);
			State = 654;
			Match(IDENTIFIER);
			State = 655;
			statementBlock();
			State = 656;
			Match(NL);
			State = 657;
			Match(END);
			State = 658;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(ElanParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(ElanParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseDefaultContext caseDefault() {
			return GetRuleContext<CaseDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterSwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitSwitch(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 96, RULE_switch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			Match(NL);
			State = 661;
			Match(SWITCH);
			State = 662;
			expression(0);
			State = 664;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 663;
					@case();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 666;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 668;
			caseDefault();
			State = 669;
			Match(NL);
			State = 670;
			Match(END);
			State = 671;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(ElanParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 98, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			Match(NL);
			State = 674;
			Match(CASE);
			State = 676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 675;
				Match(MINUS);
				}
			}

			State = 678;
			literalValue();
			State = 679;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterCaseDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitCaseDefault(this);
		}
	}

	[RuleVersion(0)]
	public CaseDefaultContext caseDefault() {
		CaseDefaultContext _localctx = new CaseDefaultContext(Context, State);
		EnterRule(_localctx, 100, RULE_caseDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			Match(NL);
			State = 682;
			Match(DEFAULT);
			State = 683;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracketedExpressionContext bracketedExpression() {
			return GetRuleContext<BracketedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 102;
		EnterRecursionRule(_localctx, 102, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 686;
				bracketedExpression();
				}
				break;
			case 2:
				{
				State = 687;
				functionCall();
				}
				break;
			case 3:
				{
				State = 688;
				value();
				}
				break;
			case 4:
				{
				State = 689;
				unaryOp();
				State = 690;
				expression(10);
				}
				break;
			case 5:
				{
				State = 692;
				newInstance();
				}
				break;
			case 6:
				{
				State = 693;
				ifExpression();
				}
				break;
			case 7:
				{
				State = 694;
				Match(NL);
				State = 695;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 717;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 715;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 698;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 699;
						Match(POWER);
						State = 700;
						expression(5);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 701;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 702;
						binaryOp();
						State = 703;
						expression(4);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 705;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 706;
						index();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 707;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 708;
						Match(DOT);
						State = 709;
						functionCall();
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 710;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 711;
						Match(DOT);
						State = 712;
						Match(IDENTIFIER);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 713;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 714;
						withClause();
						}
						break;
					}
					} 
				}
				State = 719;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracketedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public BracketedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterBracketedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitBracketedExpression(this);
		}
	}

	[RuleVersion(0)]
	public BracketedExpressionContext bracketedExpression() {
		BracketedExpressionContext _localctx = new BracketedExpressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_bracketedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			Match(OPEN_BRACKET);
			State = 721;
			expression(0);
			State = 722;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ElanParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ElanParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ElanParser.ELSE, 0); }
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_ifExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			Match(IF);
			State = 725;
			expression(0);
			State = 726;
			Match(NL);
			State = 727;
			Match(THEN);
			State = 728;
			expression(0);
			State = 729;
			Match(NL);
			State = 730;
			Match(ELSE);
			State = 731;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(ElanParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 108, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			Match(LAMBDA);
			State = 734;
			argumentList();
			State = 735;
			Match(ARROW);
			State = 736;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(ElanParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(ElanParser.CLOSE_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ElanParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 110, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			Match(OPEN_SQ_BRACKET);
			State = 745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 739;
				expression(0);
				}
				break;
			case 2:
				{
				State = 740;
				expression(0);
				State = 741;
				Match(COMMA);
				State = 742;
				expression(0);
				}
				break;
			case 3:
				{
				State = 744;
				range();
				}
				break;
			}
			State = 747;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(ElanParser.DOUBLE_DOT, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 112, RULE_range);
		try {
			State = 758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 749;
				expression(0);
				State = 750;
				Match(DOUBLE_DOT);
				State = 751;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 753;
				expression(0);
				State = 754;
				Match(DOUBLE_DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 756;
				Match(DOUBLE_DOT);
				State = 757;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureDefinitionContext dataStructureDefinition() {
			return GetRuleContext<DataStructureDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 114, RULE_value);
		int _la;
		try {
			State = 769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 760;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SELF) {
					{
					State = 761;
					scopeQualifier();
					}
				}

				State = 764;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 765;
				dataStructureDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 766;
				Match(SELF);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 767;
				Match(DEFAULT);
				State = 768;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(ElanParser.GLOBAL, 0); }
		public ScopeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterScopeQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitScopeQualifier(this);
		}
	}

	[RuleVersion(0)]
	public ScopeQualifierContext scopeQualifier() {
		ScopeQualifierContext _localctx = new ScopeQualifierContext(Context, State);
		EnterRule(_localctx, 116, RULE_scopeQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL || _la==SELF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 772;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDataStructureContext literalDataStructure() {
			return GetRuleContext<LiteralDataStructureContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 118, RULE_literal);
		try {
			State = 776;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
			case TYPENAME:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 774;
				literalValue();
				}
				break;
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 775;
				literalDataStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VALUE() { return GetToken(ElanParser.BOOL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(ElanParser.LITERAL_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_CHAR() { return GetToken(ElanParser.LITERAL_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 120, RULE_literalValue);
		try {
			State = 783;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 778;
				Match(BOOL_VALUE);
				}
				break;
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 779;
				Match(LITERAL_INTEGER);
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 780;
				Match(LITERAL_FLOAT);
				}
				break;
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 781;
				Match(LITERAL_CHAR);
				}
				break;
			case TYPENAME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 782;
				enumValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListDefinitionContext listDefinition() {
			return GetRuleContext<ListDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDefinitionContext arrayDefinition() {
			return GetRuleContext<ArrayDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleDefinitionContext tupleDefinition() {
			return GetRuleContext<TupleDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryDefinitionContext dictionaryDefinition() {
			return GetRuleContext<DictionaryDefinitionContext>(0);
		}
		public DataStructureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDataStructureDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDataStructureDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureDefinitionContext dataStructureDefinition() {
		DataStructureDefinitionContext _localctx = new DataStructureDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_dataStructureDefinition);
		try {
			State = 789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785;
				listDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786;
				arrayDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 787;
				tupleDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 788;
				dictionaryDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDataStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTupleContext literalTuple() {
			return GetRuleContext<LiteralTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralListContext literalList() {
			return GetRuleContext<LiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDictionaryContext literalDictionary() {
			return GetRuleContext<LiteralDictionaryContext>(0);
		}
		public LiteralDataStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDataStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralDataStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralDataStructure(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDataStructureContext literalDataStructure() {
		LiteralDataStructureContext _localctx = new LiteralDataStructureContext(Context, State);
		EnterRule(_localctx, 124, RULE_literalDataStructure);
		try {
			State = 795;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 791;
				Match(LITERAL_STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 792;
				literalTuple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 793;
				literalList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 794;
				literalDictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public TupleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTupleDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTupleDefinition(this);
		}
	}

	[RuleVersion(0)]
	public TupleDefinitionContext tupleDefinition() {
		TupleDefinitionContext _localctx = new TupleDefinitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_tupleDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			Match(OPEN_BRACKET);
			State = 798;
			expression(0);
			State = 799;
			Match(COMMA);
			State = 800;
			expression(0);
			State = 805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 801;
				Match(COMMA);
				State = 802;
				expression(0);
				}
				}
				State = 807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 808;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public LiteralTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralTuple(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTupleContext literalTuple() {
		LiteralTupleContext _localctx = new LiteralTupleContext(Context, State);
		EnterRule(_localctx, 128, RULE_literalTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(OPEN_BRACKET);
			State = 811;
			literal();
			State = 812;
			Match(COMMA);
			State = 813;
			literal();
			State = 818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 814;
				Match(COMMA);
				State = 815;
				literal();
				}
				}
				State = 820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 821;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeconstructedTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DeconstructedTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deconstructedTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDeconstructedTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDeconstructedTuple(this);
		}
	}

	[RuleVersion(0)]
	public DeconstructedTupleContext deconstructedTuple() {
		DeconstructedTupleContext _localctx = new DeconstructedTupleContext(Context, State);
		EnterRule(_localctx, 130, RULE_deconstructedTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(OPEN_BRACKET);
			State = 824;
			Match(IDENTIFIER);
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 825;
				Match(COMMA);
				State = 826;
				Match(IDENTIFIER);
				}
				}
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 831;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ListDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterListDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitListDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ListDefinitionContext listDefinition() {
		ListDefinitionContext _localctx = new ListDefinitionContext(Context, State);
		EnterRule(_localctx, 132, RULE_listDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			Match(OPEN_BRACE);
			{
			State = 834;
			expression(0);
			State = 839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 835;
				Match(COMMA);
				State = 836;
				expression(0);
				}
				}
				State = 841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 842;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralList(this);
		}
	}

	[RuleVersion(0)]
	public LiteralListContext literalList() {
		LiteralListContext _localctx = new LiteralListContext(Context, State);
		EnterRule(_localctx, 134, RULE_literalList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			Match(OPEN_BRACE);
			{
			State = 845;
			literal();
			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 846;
				Match(COMMA);
				State = 847;
				literal();
				}
				}
				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 853;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		public ListDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterListDecomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitListDecomp(this);
		}
	}

	[RuleVersion(0)]
	public ListDecompContext listDecomp() {
		ListDecompContext _localctx = new ListDecompContext(Context, State);
		EnterRule(_localctx, 136, RULE_listDecomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 855;
			Match(OPEN_BRACE);
			State = 856;
			Match(IDENTIFIER);
			State = 857;
			Match(COLON);
			State = 858;
			Match(IDENTIFIER);
			State = 859;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		public ArrayDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterArrayDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitArrayDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDefinitionContext arrayDefinition() {
		ArrayDefinitionContext _localctx = new ArrayDefinitionContext(Context, State);
		EnterRule(_localctx, 138, RULE_arrayDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			Match(ARRAY);
			State = 862;
			genericSpecifier();
			State = 863;
			Match(OPEN_BRACKET);
			State = 865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LITERAL_INTEGER) {
				{
				State = 864;
				Match(LITERAL_INTEGER);
				}
			}

			State = 867;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext[] kvp() {
			return GetRuleContexts<KvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext kvp(int i) {
			return GetRuleContext<KvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DictionaryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDictionaryDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDictionaryDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryDefinitionContext dictionaryDefinition() {
		DictionaryDefinitionContext _localctx = new DictionaryDefinitionContext(Context, State);
		EnterRule(_localctx, 140, RULE_dictionaryDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			Match(OPEN_BRACE);
			{
			State = 870;
			kvp();
			State = 875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 871;
				Match(COMMA);
				State = 872;
				kvp();
				}
				}
				State = 877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 878;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext[] literalKvp() {
			return GetRuleContexts<LiteralKvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext literalKvp(int i) {
			return GetRuleContext<LiteralKvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralDictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralDictionary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralDictionary(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDictionaryContext literalDictionary() {
		LiteralDictionaryContext _localctx = new LiteralDictionaryContext(Context, State);
		EnterRule(_localctx, 142, RULE_literalDictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880;
			Match(OPEN_BRACE);
			{
			State = 881;
			literalKvp();
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 882;
				Match(COMMA);
				State = 883;
				literalKvp();
				}
				}
				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 889;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public KvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterKvp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitKvp(this);
		}
	}

	[RuleVersion(0)]
	public KvpContext kvp() {
		KvpContext _localctx = new KvpContext(Context, State);
		EnterRule(_localctx, 144, RULE_kvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 891;
			expression(0);
			State = 892;
			Match(COLON);
			State = 893;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralKvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public LiteralKvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalKvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralKvp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralKvp(this);
		}
	}

	[RuleVersion(0)]
	public LiteralKvpContext literalKvp() {
		LiteralKvpContext _localctx = new LiteralKvpContext(Context, State);
		EnterRule(_localctx, 146, RULE_literalKvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			literal();
			State = 896;
			Match(COLON);
			State = 897;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(ElanParser.OP_NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 148, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==OP_NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOpContext arithmeticOp() {
			return GetRuleContext<ArithmeticOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 150, RULE_binaryOp);
		try {
			State = 904;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case MULT:
			case DIVIDE:
			case POWER:
			case MOD:
			case INT_DIV:
				EnterOuterAlt(_localctx, 1);
				{
				State = 901;
				arithmeticOp();
				}
				break;
			case OP_AND:
			case OP_OR:
			case OP_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 902;
				logicalOp();
				}
				break;
			case LT:
			case GT:
			case OP_EQ:
			case OP_NE:
			case OP_LE:
			case OP_GE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 903;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(ElanParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ElanParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ElanParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DIV() { return GetToken(ElanParser.INT_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ElanParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ArithmeticOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterArithmeticOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitArithmeticOp(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOpContext arithmeticOp() {
		ArithmeticOpContext _localctx = new ArithmeticOpContext(Context, State);
		EnterRule(_localctx, 152, RULE_arithmeticOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(ElanParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(ElanParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(ElanParser.OP_XOR, 0); }
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLogicalOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLogicalOp(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 154, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(ElanParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(ElanParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(ElanParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(ElanParser.OP_NE, 0); }
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterConditionalOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitConditionalOp(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 156, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 963L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_TYPE() { return GetToken(ElanParser.VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureTypeContext dataStructureType() {
			return GetRuleContext<DataStructureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_type);
		try {
			State = 919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 912;
				Match(VALUE_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 913;
				dataStructureType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 914;
				Match(TYPENAME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 915;
				Match(TYPENAME);
				State = 916;
				genericSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 917;
				tupleType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 918;
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ElanParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(ElanParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERABLE() { return GetToken(ElanParser.ITERABLE, 0); }
		public DataStructureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDataStructureType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDataStructureType(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureTypeContext dataStructureType() {
		DataStructureTypeContext _localctx = new DataStructureTypeContext(Context, State);
		EnterRule(_localctx, 160, RULE_dataStructureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 921;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 270215977642229760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 922;
			genericSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ElanParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public GenericSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterGenericSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitGenericSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public GenericSpecifierContext genericSpecifier() {
		GenericSpecifierContext _localctx = new GenericSpecifierContext(Context, State);
		EnterRule(_localctx, 162, RULE_genericSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			Match(LT);
			State = 925;
			Match(OF);
			State = 926;
			type();
			State = 931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 927;
				Match(COMMA);
				State = 928;
				type();
				}
				}
				State = 933;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 934;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			Match(OPEN_BRACKET);
			State = 937;
			type();
			State = 940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 938;
				Match(COMMA);
				State = 939;
				type();
				}
				}
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 944;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFuncType(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 166, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946;
			Match(OPEN_BRACKET);
			State = 947;
			type();
			State = 952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 948;
				Match(COMMA);
				State = 949;
				type();
				}
				}
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 955;
			Match(ARROW);
			State = 956;
			type();
			State = 957;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 51: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,95,960,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,5,0,177,8,0,10,0,12,0,180,9,0,1,0,5,0,183,8,0,10,
		0,12,0,186,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,211,8,3,10,3,12,3,214,9,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,3,4,223,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,232,
		8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,240,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,248,
		8,8,1,9,1,9,1,9,1,9,1,10,3,10,255,8,10,1,10,1,10,3,10,259,8,10,1,10,1,
		10,3,10,263,8,10,1,11,3,11,266,8,11,1,11,1,11,1,11,3,11,271,8,11,1,11,
		1,11,1,12,3,12,276,8,12,1,12,1,12,1,12,3,12,281,8,12,1,12,1,12,1,13,1,
		13,1,13,1,13,1,13,3,13,290,8,13,1,13,1,13,1,14,1,14,3,14,296,8,14,1,14,
		1,14,1,14,3,14,301,8,14,5,14,303,8,14,10,14,12,14,306,9,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,319,8,16,1,16,1,16,1,17,
		1,17,1,17,5,17,326,8,17,10,17,12,17,329,9,17,1,18,1,18,1,18,5,18,334,8,
		18,10,18,12,18,337,9,18,1,19,1,19,1,19,1,20,3,20,343,8,20,1,20,1,20,1,
		20,1,21,1,21,3,21,350,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,3,24,372,8,24,1,
		24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,26,1,26,1,26,3,26,392,8,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
		1,27,1,27,3,27,404,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,413,8,
		28,10,28,12,28,416,9,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,
		30,1,31,1,31,1,31,1,31,3,31,432,8,31,1,32,1,32,1,32,1,32,3,32,438,8,32,
		1,32,1,32,1,32,1,32,5,32,444,8,32,10,32,12,32,447,9,32,1,32,1,32,1,32,
		1,32,1,33,1,33,1,33,1,33,1,33,3,33,458,8,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,5,33,467,8,33,10,33,12,33,470,9,33,1,33,1,33,1,33,1,33,1,34,1,
		34,1,34,1,34,1,34,3,34,481,8,34,1,34,1,34,1,34,5,34,486,8,34,10,34,12,
		34,489,9,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,501,
		8,35,1,35,1,35,1,35,1,35,5,35,507,8,35,10,35,12,35,510,9,35,1,35,1,35,
		1,35,1,35,1,36,1,36,1,36,1,36,5,36,520,8,36,10,36,12,36,523,9,36,1,37,
		1,37,3,37,527,8,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,537,8,
		38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,549,8,39,1,39,
		1,39,3,39,553,8,39,1,39,1,39,3,39,557,8,39,1,40,1,40,1,40,1,40,1,40,5,
		40,564,8,40,10,40,12,40,567,9,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,3,41,578,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,5,42,592,8,42,10,42,12,42,595,9,42,1,42,1,42,1,42,3,42,600,8,
		42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,
		43,615,8,43,1,43,3,43,618,8,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
		1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,
		1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,4,48,665,8,48,11,48,12,48,
		666,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,3,49,677,8,49,1,49,1,49,1,
		49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
		51,1,51,3,51,697,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
		1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,716,8,51,10,51,12,51,719,9,51,
		1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,
		1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,746,8,55,1,
		55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,759,8,56,1,57,
		1,57,3,57,763,8,57,1,57,1,57,1,57,1,57,1,57,3,57,770,8,57,1,58,1,58,1,
		58,1,59,1,59,3,59,777,8,59,1,60,1,60,1,60,1,60,1,60,3,60,784,8,60,1,61,
		1,61,1,61,1,61,3,61,790,8,61,1,62,1,62,1,62,1,62,3,62,796,8,62,1,63,1,
		63,1,63,1,63,1,63,1,63,5,63,804,8,63,10,63,12,63,807,9,63,1,63,1,63,1,
		64,1,64,1,64,1,64,1,64,1,64,5,64,817,8,64,10,64,12,64,820,9,64,1,64,1,
		64,1,65,1,65,1,65,1,65,4,65,828,8,65,11,65,12,65,829,1,65,1,65,1,66,1,
		66,1,66,1,66,5,66,838,8,66,10,66,12,66,841,9,66,1,66,1,66,1,67,1,67,1,
		67,1,67,5,67,849,8,67,10,67,12,67,852,9,67,1,67,1,67,1,68,1,68,1,68,1,
		68,1,68,1,68,1,69,1,69,1,69,1,69,3,69,866,8,69,1,69,1,69,1,70,1,70,1,70,
		1,70,5,70,874,8,70,10,70,12,70,877,9,70,1,70,1,70,1,71,1,71,1,71,1,71,
		5,71,885,8,71,10,71,12,71,888,9,71,1,71,1,71,1,72,1,72,1,72,1,72,1,73,
		1,73,1,73,1,73,1,74,1,74,1,75,1,75,1,75,3,75,905,8,75,1,76,1,76,1,77,1,
		77,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,920,8,79,1,80,1,80,
		1,80,1,81,1,81,1,81,1,81,1,81,5,81,930,8,81,10,81,12,81,933,9,81,1,81,
		1,81,1,82,1,82,1,82,1,82,4,82,941,8,82,11,82,12,82,942,1,82,1,82,1,83,
		1,83,1,83,1,83,5,83,951,8,83,10,83,12,83,954,9,83,1,83,1,83,1,83,1,83,
		1,83,0,1,102,84,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
		88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
		162,164,166,0,7,2,0,88,88,92,92,2,0,20,20,38,38,2,0,71,71,80,80,1,0,70,
		76,2,0,79,79,81,82,2,0,77,78,83,86,1,0,54,57,1001,0,178,1,0,0,0,2,189,
		1,0,0,0,4,196,1,0,0,0,6,212,1,0,0,0,8,215,1,0,0,0,10,224,1,0,0,0,12,228,
		1,0,0,0,14,233,1,0,0,0,16,241,1,0,0,0,18,249,1,0,0,0,20,262,1,0,0,0,22,
		265,1,0,0,0,24,275,1,0,0,0,26,284,1,0,0,0,28,295,1,0,0,0,30,307,1,0,0,
		0,32,315,1,0,0,0,34,322,1,0,0,0,36,330,1,0,0,0,38,338,1,0,0,0,40,342,1,
		0,0,0,42,349,1,0,0,0,44,351,1,0,0,0,46,362,1,0,0,0,48,368,1,0,0,0,50,377,
		1,0,0,0,52,388,1,0,0,0,54,397,1,0,0,0,56,405,1,0,0,0,58,421,1,0,0,0,60,
		423,1,0,0,0,62,431,1,0,0,0,64,433,1,0,0,0,66,452,1,0,0,0,68,475,1,0,0,
		0,70,494,1,0,0,0,72,515,1,0,0,0,74,524,1,0,0,0,76,532,1,0,0,0,78,556,1,
		0,0,0,80,558,1,0,0,0,82,577,1,0,0,0,84,579,1,0,0,0,86,605,1,0,0,0,88,624,
		1,0,0,0,90,634,1,0,0,0,92,642,1,0,0,0,94,649,1,0,0,0,96,660,1,0,0,0,98,
		673,1,0,0,0,100,681,1,0,0,0,102,696,1,0,0,0,104,720,1,0,0,0,106,724,1,
		0,0,0,108,733,1,0,0,0,110,738,1,0,0,0,112,758,1,0,0,0,114,769,1,0,0,0,
		116,771,1,0,0,0,118,776,1,0,0,0,120,783,1,0,0,0,122,789,1,0,0,0,124,795,
		1,0,0,0,126,797,1,0,0,0,128,810,1,0,0,0,130,823,1,0,0,0,132,833,1,0,0,
		0,134,844,1,0,0,0,136,855,1,0,0,0,138,861,1,0,0,0,140,869,1,0,0,0,142,
		880,1,0,0,0,144,891,1,0,0,0,146,895,1,0,0,0,148,899,1,0,0,0,150,904,1,
		0,0,0,152,906,1,0,0,0,154,908,1,0,0,0,156,910,1,0,0,0,158,919,1,0,0,0,
		160,921,1,0,0,0,162,924,1,0,0,0,164,936,1,0,0,0,166,946,1,0,0,0,168,177,
		3,2,1,0,169,177,3,30,15,0,170,177,3,42,21,0,171,177,3,54,27,0,172,177,
		3,56,28,0,173,177,3,62,31,0,174,177,3,4,2,0,175,177,3,50,25,0,176,168,
		1,0,0,0,176,169,1,0,0,0,176,170,1,0,0,0,176,171,1,0,0,0,176,172,1,0,0,
		0,176,173,1,0,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,
		176,1,0,0,0,178,179,1,0,0,0,179,184,1,0,0,0,180,178,1,0,0,0,181,183,5,
		1,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,
		185,187,1,0,0,0,186,184,1,0,0,0,187,188,5,0,0,1,188,1,1,0,0,0,189,190,
		5,1,0,0,190,191,5,27,0,0,191,192,3,6,3,0,192,193,5,1,0,0,193,194,5,15,
		0,0,194,195,5,27,0,0,195,3,1,0,0,0,196,197,5,1,0,0,197,198,5,43,0,0,198,
		199,5,88,0,0,199,200,3,6,3,0,200,201,5,1,0,0,201,202,5,15,0,0,202,203,
		5,43,0,0,203,5,1,0,0,0,204,211,3,14,7,0,205,211,3,16,8,0,206,211,3,82,
		41,0,207,211,3,8,4,0,208,211,3,10,5,0,209,211,3,12,6,0,210,204,1,0,0,0,
		210,205,1,0,0,0,210,206,1,0,0,0,210,207,1,0,0,0,210,208,1,0,0,0,210,209,
		1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,7,1,0,0,0,
		214,212,1,0,0,0,215,216,5,1,0,0,216,222,5,6,0,0,217,223,3,22,11,0,218,
		219,3,20,10,0,219,220,5,67,0,0,220,221,3,22,11,0,221,223,1,0,0,0,222,217,
		1,0,0,0,222,218,1,0,0,0,223,9,1,0,0,0,224,225,5,1,0,0,225,226,5,45,0,0,
		226,227,7,0,0,0,227,11,1,0,0,0,228,229,5,1,0,0,229,231,5,32,0,0,230,232,
		3,102,51,0,231,230,1,0,0,0,231,232,1,0,0,0,232,13,1,0,0,0,233,234,5,1,
		0,0,234,235,5,49,0,0,235,236,3,20,10,0,236,239,5,58,0,0,237,240,3,102,
		51,0,238,240,3,26,13,0,239,237,1,0,0,0,239,238,1,0,0,0,240,15,1,0,0,0,
		241,242,5,1,0,0,242,243,5,39,0,0,243,244,3,20,10,0,244,247,5,46,0,0,245,
		248,3,102,51,0,246,248,3,26,13,0,247,245,1,0,0,0,247,246,1,0,0,0,248,17,
		1,0,0,0,249,250,3,20,10,0,250,251,5,58,0,0,251,252,3,102,51,0,252,19,1,
		0,0,0,253,255,3,116,58,0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,
		0,256,258,5,88,0,0,257,259,3,110,55,0,258,257,1,0,0,0,258,259,1,0,0,0,
		259,263,1,0,0,0,260,263,3,130,65,0,261,263,3,136,68,0,262,254,1,0,0,0,
		262,260,1,0,0,0,262,261,1,0,0,0,263,21,1,0,0,0,264,266,3,116,58,0,265,
		264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,88,0,0,268,270,5,
		64,0,0,269,271,3,28,14,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,
		0,272,273,5,65,0,0,273,23,1,0,0,0,274,276,3,116,58,0,275,274,1,0,0,0,275,
		276,1,0,0,0,276,277,1,0,0,0,277,278,5,88,0,0,278,280,5,64,0,0,279,281,
		3,28,14,0,280,279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,283,5,65,
		0,0,283,25,1,0,0,0,284,285,5,42,0,0,285,286,5,67,0,0,286,287,5,88,0,0,
		287,289,5,64,0,0,288,290,3,28,14,0,289,288,1,0,0,0,289,290,1,0,0,0,290,
		291,1,0,0,0,291,292,5,65,0,0,292,27,1,0,0,0,293,296,3,102,51,0,294,296,
		3,108,54,0,295,293,1,0,0,0,295,294,1,0,0,0,296,304,1,0,0,0,297,300,5,68,
		0,0,298,301,3,102,51,0,299,301,3,108,54,0,300,298,1,0,0,0,300,299,1,0,
		0,0,301,303,1,0,0,0,302,297,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,
		305,1,0,0,0,305,29,1,0,0,0,306,304,1,0,0,0,307,308,5,1,0,0,308,309,5,34,
		0,0,309,310,3,32,16,0,310,311,3,6,3,0,311,312,5,1,0,0,312,313,5,15,0,0,
		313,314,5,34,0,0,314,31,1,0,0,0,315,316,5,88,0,0,316,318,5,64,0,0,317,
		319,3,34,17,0,318,317,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,321,
		5,65,0,0,321,33,1,0,0,0,322,327,3,40,20,0,323,324,5,68,0,0,324,326,3,40,
		20,0,325,323,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,
		35,1,0,0,0,329,327,1,0,0,0,330,335,3,38,19,0,331,332,5,68,0,0,332,334,
		3,38,19,0,333,331,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,
		0,0,336,37,1,0,0,0,337,335,1,0,0,0,338,339,5,88,0,0,339,340,3,158,79,0,
		340,39,1,0,0,0,341,343,5,30,0,0,342,341,1,0,0,0,342,343,1,0,0,0,343,344,
		1,0,0,0,344,345,5,88,0,0,345,346,3,158,79,0,346,41,1,0,0,0,347,350,3,44,
		22,0,348,350,3,46,23,0,349,347,1,0,0,0,349,348,1,0,0,0,350,43,1,0,0,0,
		351,352,5,1,0,0,352,353,5,19,0,0,353,354,3,48,24,0,354,355,3,6,3,0,355,
		356,5,1,0,0,356,357,5,37,0,0,357,358,3,102,51,0,358,359,5,1,0,0,359,360,
		5,15,0,0,360,361,5,19,0,0,361,45,1,0,0,0,362,363,5,1,0,0,363,364,5,19,
		0,0,364,365,3,48,24,0,365,366,5,59,0,0,366,367,3,102,51,0,367,47,1,0,0,
		0,368,369,5,88,0,0,369,371,5,64,0,0,370,372,3,36,18,0,371,370,1,0,0,0,
		371,372,1,0,0,0,372,373,1,0,0,0,373,374,5,65,0,0,374,375,5,4,0,0,375,376,
		3,158,79,0,376,49,1,0,0,0,377,378,5,1,0,0,378,379,5,42,0,0,379,380,3,52,
		26,0,380,381,3,6,3,0,381,382,5,1,0,0,382,383,5,37,0,0,383,384,3,102,51,
		0,384,385,5,1,0,0,385,386,5,15,0,0,386,387,5,42,0,0,387,51,1,0,0,0,388,
		389,5,88,0,0,389,391,5,64,0,0,390,392,3,36,18,0,391,390,1,0,0,0,391,392,
		1,0,0,0,392,393,1,0,0,0,393,394,5,65,0,0,394,395,5,4,0,0,395,396,3,158,
		79,0,396,53,1,0,0,0,397,398,5,1,0,0,398,399,5,10,0,0,399,400,5,88,0,0,
		400,403,5,58,0,0,401,404,3,118,59,0,402,404,3,78,39,0,403,401,1,0,0,0,
		403,402,1,0,0,0,404,55,1,0,0,0,405,406,5,1,0,0,406,407,5,16,0,0,407,408,
		3,58,29,0,408,409,5,1,0,0,409,414,5,88,0,0,410,411,5,68,0,0,411,413,5,
		88,0,0,412,410,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,
		415,417,1,0,0,0,416,414,1,0,0,0,417,418,5,1,0,0,418,419,5,15,0,0,419,420,
		5,16,0,0,420,57,1,0,0,0,421,422,5,87,0,0,422,59,1,0,0,0,423,424,3,58,29,
		0,424,425,5,67,0,0,425,426,5,88,0,0,426,61,1,0,0,0,427,432,3,64,32,0,428,
		432,3,66,33,0,429,432,3,68,34,0,430,432,3,70,35,0,431,427,1,0,0,0,431,
		428,1,0,0,0,431,429,1,0,0,0,431,430,1,0,0,0,432,63,1,0,0,0,433,434,5,1,
		0,0,434,435,5,9,0,0,435,437,5,87,0,0,436,438,3,72,36,0,437,436,1,0,0,0,
		437,438,1,0,0,0,438,439,1,0,0,0,439,445,3,76,38,0,440,444,3,74,37,0,441,
		444,3,42,21,0,442,444,3,30,15,0,443,440,1,0,0,0,443,441,1,0,0,0,443,442,
		1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,
		0,447,445,1,0,0,0,448,449,5,1,0,0,449,450,5,15,0,0,450,451,5,9,0,0,451,
		65,1,0,0,0,452,453,5,1,0,0,453,454,5,5,0,0,454,455,5,9,0,0,455,457,5,87,
		0,0,456,458,3,72,36,0,457,456,1,0,0,0,457,458,1,0,0,0,458,468,1,0,0,0,
		459,467,3,74,37,0,460,461,5,1,0,0,461,462,5,19,0,0,462,467,3,48,24,0,463,
		464,5,1,0,0,464,465,5,34,0,0,465,467,3,32,16,0,466,459,1,0,0,0,466,460,
		1,0,0,0,466,463,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,
		0,469,471,1,0,0,0,470,468,1,0,0,0,471,472,5,1,0,0,472,473,5,15,0,0,473,
		474,5,9,0,0,474,67,1,0,0,0,475,476,5,1,0,0,476,477,5,22,0,0,477,478,5,
		9,0,0,478,480,5,87,0,0,479,481,3,72,36,0,480,479,1,0,0,0,480,481,1,0,0,
		0,481,482,1,0,0,0,482,487,3,76,38,0,483,486,3,74,37,0,484,486,3,42,21,
		0,485,483,1,0,0,0,485,484,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,
		488,1,0,0,0,488,490,1,0,0,0,489,487,1,0,0,0,490,491,5,1,0,0,491,492,5,
		15,0,0,492,493,5,9,0,0,493,69,1,0,0,0,494,495,5,1,0,0,495,496,5,5,0,0,
		496,497,5,22,0,0,497,498,5,9,0,0,498,500,5,87,0,0,499,501,3,72,36,0,500,
		499,1,0,0,0,500,501,1,0,0,0,501,508,1,0,0,0,502,507,3,74,37,0,503,504,
		5,1,0,0,504,505,5,19,0,0,505,507,3,48,24,0,506,502,1,0,0,0,506,503,1,0,
		0,0,507,510,1,0,0,0,508,506,1,0,0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,
		508,1,0,0,0,511,512,5,1,0,0,512,513,5,15,0,0,513,514,5,9,0,0,514,71,1,
		0,0,0,515,516,5,24,0,0,516,521,3,158,79,0,517,518,5,68,0,0,518,520,3,158,
		79,0,519,517,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,
		73,1,0,0,0,523,521,1,0,0,0,524,526,5,1,0,0,525,527,5,33,0,0,526,525,1,
		0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,529,5,35,0,0,529,530,5,88,0,
		0,530,531,3,158,79,0,531,75,1,0,0,0,532,533,5,1,0,0,533,534,5,11,0,0,534,
		536,5,64,0,0,535,537,3,36,18,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,
		1,0,0,0,538,539,5,65,0,0,539,540,3,6,3,0,540,541,5,1,0,0,541,542,5,15,
		0,0,542,543,5,11,0,0,543,77,1,0,0,0,544,545,5,28,0,0,545,546,3,158,79,
		0,546,548,5,64,0,0,547,549,3,28,14,0,548,547,1,0,0,0,548,549,1,0,0,0,549,
		550,1,0,0,0,550,552,5,65,0,0,551,553,3,80,40,0,552,551,1,0,0,0,552,553,
		1,0,0,0,553,557,1,0,0,0,554,555,5,88,0,0,555,557,3,80,40,0,556,544,1,0,
		0,0,556,554,1,0,0,0,557,79,1,0,0,0,558,559,5,51,0,0,559,560,5,60,0,0,560,
		565,3,18,9,0,561,562,5,68,0,0,562,564,3,18,9,0,563,561,1,0,0,0,564,567,
		1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,565,1,0,0,
		0,568,569,5,61,0,0,569,81,1,0,0,0,570,578,3,84,42,0,571,578,3,86,43,0,
		572,578,3,88,44,0,573,578,3,90,45,0,574,578,3,92,46,0,575,578,3,94,47,
		0,576,578,3,96,48,0,577,570,1,0,0,0,577,571,1,0,0,0,577,572,1,0,0,0,577,
		573,1,0,0,0,577,574,1,0,0,0,577,575,1,0,0,0,577,576,1,0,0,0,578,83,1,0,
		0,0,579,580,5,1,0,0,580,581,5,21,0,0,581,582,3,102,51,0,582,583,5,44,0,
		0,583,593,3,6,3,0,584,585,5,1,0,0,585,586,5,14,0,0,586,587,5,21,0,0,587,
		588,3,102,51,0,588,589,5,44,0,0,589,590,3,6,3,0,590,592,1,0,0,0,591,584,
		1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,599,1,0,0,
		0,595,593,1,0,0,0,596,597,5,1,0,0,597,598,5,14,0,0,598,600,3,6,3,0,599,
		596,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,602,5,1,0,0,602,603,5,
		15,0,0,603,604,5,21,0,0,604,85,1,0,0,0,605,606,5,1,0,0,606,607,5,17,0,
		0,607,608,5,88,0,0,608,609,5,58,0,0,609,610,3,102,51,0,610,611,5,46,0,
		0,611,617,3,102,51,0,612,614,5,40,0,0,613,615,5,71,0,0,614,613,1,0,0,0,
		614,615,1,0,0,0,615,616,1,0,0,0,616,618,5,89,0,0,617,612,1,0,0,0,617,618,
		1,0,0,0,618,619,1,0,0,0,619,620,3,6,3,0,620,621,5,1,0,0,621,622,5,15,0,
		0,622,623,5,17,0,0,623,87,1,0,0,0,624,625,5,1,0,0,625,626,5,18,0,0,626,
		627,5,88,0,0,627,628,5,23,0,0,628,629,3,102,51,0,629,630,3,6,3,0,630,631,
		5,1,0,0,631,632,5,15,0,0,632,633,5,18,0,0,633,89,1,0,0,0,634,635,5,1,0,
		0,635,636,5,50,0,0,636,637,3,102,51,0,637,638,3,6,3,0,638,639,5,1,0,0,
		639,640,5,15,0,0,640,641,5,50,0,0,641,91,1,0,0,0,642,643,5,1,0,0,643,644,
		5,36,0,0,644,645,3,6,3,0,645,646,5,1,0,0,646,647,5,48,0,0,647,648,3,102,
		51,0,648,93,1,0,0,0,649,650,5,1,0,0,650,651,5,47,0,0,651,652,3,6,3,0,652,
		653,5,1,0,0,653,654,5,8,0,0,654,655,5,88,0,0,655,656,3,6,3,0,656,657,5,
		1,0,0,657,658,5,15,0,0,658,659,5,47,0,0,659,95,1,0,0,0,660,661,5,1,0,0,
		661,662,5,41,0,0,662,664,3,102,51,0,663,665,3,98,49,0,664,663,1,0,0,0,
		665,666,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,668,1,0,0,0,668,669,
		3,100,50,0,669,670,5,1,0,0,670,671,5,15,0,0,671,672,5,41,0,0,672,97,1,
		0,0,0,673,674,5,1,0,0,674,676,5,7,0,0,675,677,5,71,0,0,676,675,1,0,0,0,
		676,677,1,0,0,0,677,678,1,0,0,0,678,679,3,120,60,0,679,680,3,6,3,0,680,
		99,1,0,0,0,681,682,5,1,0,0,682,683,5,13,0,0,683,684,3,6,3,0,684,101,1,
		0,0,0,685,686,6,51,-1,0,686,697,3,104,52,0,687,697,3,24,12,0,688,697,3,
		114,57,0,689,690,3,148,74,0,690,691,3,102,51,10,691,697,1,0,0,0,692,697,
		3,78,39,0,693,697,3,106,53,0,694,695,5,1,0,0,695,697,3,102,51,1,696,685,
		1,0,0,0,696,687,1,0,0,0,696,688,1,0,0,0,696,689,1,0,0,0,696,692,1,0,0,
		0,696,693,1,0,0,0,696,694,1,0,0,0,697,717,1,0,0,0,698,699,10,4,0,0,699,
		700,5,74,0,0,700,716,3,102,51,5,701,702,10,3,0,0,702,703,3,150,75,0,703,
		704,3,102,51,4,704,716,1,0,0,0,705,706,10,7,0,0,706,716,3,110,55,0,707,
		708,10,6,0,0,708,709,5,67,0,0,709,716,3,24,12,0,710,711,10,5,0,0,711,712,
		5,67,0,0,712,716,5,88,0,0,713,714,10,2,0,0,714,716,3,80,40,0,715,698,1,
		0,0,0,715,701,1,0,0,0,715,705,1,0,0,0,715,707,1,0,0,0,715,710,1,0,0,0,
		715,713,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,103,
		1,0,0,0,719,717,1,0,0,0,720,721,5,64,0,0,721,722,3,102,51,0,722,723,5,
		65,0,0,723,105,1,0,0,0,724,725,5,21,0,0,725,726,3,102,51,0,726,727,5,1,
		0,0,727,728,5,44,0,0,728,729,3,102,51,0,729,730,5,1,0,0,730,731,5,14,0,
		0,731,732,3,102,51,0,732,107,1,0,0,0,733,734,5,25,0,0,734,735,3,28,14,
		0,735,736,5,59,0,0,736,737,3,102,51,0,737,109,1,0,0,0,738,745,5,62,0,0,
		739,746,3,102,51,0,740,741,3,102,51,0,741,742,5,68,0,0,742,743,3,102,51,
		0,743,746,1,0,0,0,744,746,3,112,56,0,745,739,1,0,0,0,745,740,1,0,0,0,745,
		744,1,0,0,0,746,747,1,0,0,0,747,748,5,63,0,0,748,111,1,0,0,0,749,750,3,
		102,51,0,750,751,5,66,0,0,751,752,3,102,51,0,752,759,1,0,0,0,753,754,3,
		102,51,0,754,755,5,66,0,0,755,759,1,0,0,0,756,757,5,66,0,0,757,759,3,102,
		51,0,758,749,1,0,0,0,758,753,1,0,0,0,758,756,1,0,0,0,759,113,1,0,0,0,760,
		770,3,118,59,0,761,763,3,116,58,0,762,761,1,0,0,0,762,763,1,0,0,0,763,
		764,1,0,0,0,764,770,5,88,0,0,765,770,3,122,61,0,766,770,5,38,0,0,767,768,
		5,13,0,0,768,770,3,158,79,0,769,760,1,0,0,0,769,762,1,0,0,0,769,765,1,
		0,0,0,769,766,1,0,0,0,769,767,1,0,0,0,770,115,1,0,0,0,771,772,7,1,0,0,
		772,773,5,67,0,0,773,117,1,0,0,0,774,777,3,120,60,0,775,777,3,124,62,0,
		776,774,1,0,0,0,776,775,1,0,0,0,777,119,1,0,0,0,778,784,5,52,0,0,779,784,
		5,89,0,0,780,784,5,90,0,0,781,784,5,91,0,0,782,784,3,60,30,0,783,778,1,
		0,0,0,783,779,1,0,0,0,783,780,1,0,0,0,783,781,1,0,0,0,783,782,1,0,0,0,
		784,121,1,0,0,0,785,790,3,132,66,0,786,790,3,138,69,0,787,790,3,126,63,
		0,788,790,3,140,70,0,789,785,1,0,0,0,789,786,1,0,0,0,789,787,1,0,0,0,789,
		788,1,0,0,0,790,123,1,0,0,0,791,796,5,92,0,0,792,796,3,128,64,0,793,796,
		3,134,67,0,794,796,3,142,71,0,795,791,1,0,0,0,795,792,1,0,0,0,795,793,
		1,0,0,0,795,794,1,0,0,0,796,125,1,0,0,0,797,798,5,64,0,0,798,799,3,102,
		51,0,799,800,5,68,0,0,800,805,3,102,51,0,801,802,5,68,0,0,802,804,3,102,
		51,0,803,801,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,
		808,1,0,0,0,807,805,1,0,0,0,808,809,5,65,0,0,809,127,1,0,0,0,810,811,5,
		64,0,0,811,812,3,118,59,0,812,813,5,68,0,0,813,818,3,118,59,0,814,815,
		5,68,0,0,815,817,3,118,59,0,816,814,1,0,0,0,817,820,1,0,0,0,818,816,1,
		0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,818,1,0,0,0,821,822,5,65,0,0,
		822,129,1,0,0,0,823,824,5,64,0,0,824,827,5,88,0,0,825,826,5,68,0,0,826,
		828,5,88,0,0,827,825,1,0,0,0,828,829,1,0,0,0,829,827,1,0,0,0,829,830,1,
		0,0,0,830,831,1,0,0,0,831,832,5,65,0,0,832,131,1,0,0,0,833,834,5,60,0,
		0,834,839,3,102,51,0,835,836,5,68,0,0,836,838,3,102,51,0,837,835,1,0,0,
		0,838,841,1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,842,1,0,0,0,841,
		839,1,0,0,0,842,843,5,61,0,0,843,133,1,0,0,0,844,845,5,60,0,0,845,850,
		3,118,59,0,846,847,5,68,0,0,847,849,3,118,59,0,848,846,1,0,0,0,849,852,
		1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,853,1,0,0,0,852,850,1,0,0,
		0,853,854,5,61,0,0,854,135,1,0,0,0,855,856,5,60,0,0,856,857,5,88,0,0,857,
		858,5,69,0,0,858,859,5,88,0,0,859,860,5,61,0,0,860,137,1,0,0,0,861,862,
		5,54,0,0,862,863,3,162,81,0,863,865,5,64,0,0,864,866,5,89,0,0,865,864,
		1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,868,5,65,0,0,868,139,1,0,0,
		0,869,870,5,60,0,0,870,875,3,144,72,0,871,872,5,68,0,0,872,874,3,144,72,
		0,873,871,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,
		878,1,0,0,0,877,875,1,0,0,0,878,879,5,61,0,0,879,141,1,0,0,0,880,881,5,
		60,0,0,881,886,3,146,73,0,882,883,5,68,0,0,883,885,3,146,73,0,884,882,
		1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,
		0,888,886,1,0,0,0,889,890,5,61,0,0,890,143,1,0,0,0,891,892,3,102,51,0,
		892,893,5,69,0,0,893,894,3,102,51,0,894,145,1,0,0,0,895,896,3,118,59,0,
		896,897,5,69,0,0,897,898,3,118,59,0,898,147,1,0,0,0,899,900,7,2,0,0,900,
		149,1,0,0,0,901,905,3,152,76,0,902,905,3,154,77,0,903,905,3,156,78,0,904,
		901,1,0,0,0,904,902,1,0,0,0,904,903,1,0,0,0,905,151,1,0,0,0,906,907,7,
		3,0,0,907,153,1,0,0,0,908,909,7,4,0,0,909,155,1,0,0,0,910,911,7,5,0,0,
		911,157,1,0,0,0,912,920,5,53,0,0,913,920,3,160,80,0,914,920,5,87,0,0,915,
		916,5,87,0,0,916,920,3,162,81,0,917,920,3,164,82,0,918,920,3,166,83,0,
		919,912,1,0,0,0,919,913,1,0,0,0,919,914,1,0,0,0,919,915,1,0,0,0,919,917,
		1,0,0,0,919,918,1,0,0,0,920,159,1,0,0,0,921,922,7,6,0,0,922,923,3,162,
		81,0,923,161,1,0,0,0,924,925,5,77,0,0,925,926,5,29,0,0,926,931,3,158,79,
		0,927,928,5,68,0,0,928,930,3,158,79,0,929,927,1,0,0,0,930,933,1,0,0,0,
		931,929,1,0,0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,931,1,0,0,0,934,935,
		5,78,0,0,935,163,1,0,0,0,936,937,5,64,0,0,937,940,3,158,79,0,938,939,5,
		68,0,0,939,941,3,158,79,0,940,938,1,0,0,0,941,942,1,0,0,0,942,940,1,0,
		0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,945,5,65,0,0,945,165,1,0,0,0,946,
		947,5,64,0,0,947,952,3,158,79,0,948,949,5,68,0,0,949,951,3,158,79,0,950,
		948,1,0,0,0,951,954,1,0,0,0,952,950,1,0,0,0,952,953,1,0,0,0,953,955,1,
		0,0,0,954,952,1,0,0,0,955,956,5,59,0,0,956,957,3,158,79,0,957,958,5,65,
		0,0,958,167,1,0,0,0,80,176,178,184,210,212,222,231,239,247,254,258,262,
		265,270,275,280,289,295,300,304,318,327,335,342,349,371,391,403,414,431,
		437,443,445,457,466,468,480,485,487,500,506,508,521,526,536,548,552,556,
		565,577,593,599,614,617,666,676,696,715,717,745,758,762,769,776,783,789,
		795,805,818,829,839,850,865,875,886,904,919,931,942,952
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
