//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\\Elan\\Repository\\Parser\\Elan.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ElanParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, NL=2, SINGLE_LINE_COMMENT=3, COMMENT_MARKER=4, AS=5, 
		ABSTRACT=6, CASE=7, CATCH=8, CLASS=9, CONSTANT=10, CONSTRUCTOR=11, CURRY=12, 
		DEFAULT=13, ELSE=14, END=15, ENUMERATION=16, FOR=17, FUNCTION=18, IF=19, 
		IMMUTABLE=20, IN=21, INHERITS=22, LAMBDA=23, LET=24, MAIN=25, NEW=26, 
		PARTIAL=27, PRIVATE=28, PROCEDURE=29, PROPERTY=30, REPEAT=31, RETURN=32, 
		SELF=33, STEP=34, SWITCH=35, THEN=36, THROW=37, TO=38, TRY=39, UNTIL=40, 
		VAR=41, WHILE=42, WITH=43, BOOL_VALUE=44, VALUE_TYPE=45, ARRAY=46, LIST=47, 
		DICTIONARY=48, ITERABLE=49, ASSIGN=50, ARROW=51, OPEN_BRACE=52, CLOSE_BRACE=53, 
		OPEN_SQ_BRACKET=54, CLOSE_SQ_BRACKET=55, OPEN_BRACKET=56, CLOSE_BRACKET=57, 
		DOUBLE_DOT=58, DOT=59, COMMA=60, COLON=61, PLUS=62, MINUS=63, MULT=64, 
		DIVIDE=65, POWER=66, MOD=67, INT_DIV=68, LT=69, GT=70, NULLABLE=71, OP_AND=72, 
		OP_NOT=73, OP_OR=74, OP_XOR=75, OP_EQ=76, OP_NE=77, OP_LE=78, OP_GE=79, 
		TYPENAME=80, IDENTIFIER=81, LITERAL_INTEGER=82, LITERAL_FLOAT=83, LITERAL_DECIMAL=84, 
		LITERAL_CHAR=85, LITERAL_STRING=86, VERBATIM_ONLY_STRING=87, WHITESPACES=88, 
		NEWLINE=89, WS=90;
	public const int
		RULE_file = 0, RULE_main = 1, RULE_statementBlock = 2, RULE_callStatement = 3, 
		RULE_freestandingException = 4, RULE_varDef = 5, RULE_assignment = 6, 
		RULE_assignableValue = 7, RULE_methodCall = 8, RULE_argumentList = 9, 
		RULE_procedureDef = 10, RULE_procedureSignature = 11, RULE_parameterList = 12, 
		RULE_parameter = 13, RULE_functionDef = 14, RULE_functionWithBody = 15, 
		RULE_expressionFunction = 16, RULE_letIn = 17, RULE_functionSignature = 18, 
		RULE_constantDef = 19, RULE_enumDef = 20, RULE_enumType = 21, RULE_enumValue = 22, 
		RULE_classDef = 23, RULE_mutableClass = 24, RULE_immutableClass = 25, 
		RULE_abstractClass = 26, RULE_inherits = 27, RULE_property = 28, RULE_constructor = 29, 
		RULE_newInstance = 30, RULE_withClause = 31, RULE_proceduralControlFlow = 32, 
		RULE_if = 33, RULE_for = 34, RULE_forIn = 35, RULE_while = 36, RULE_repeat = 37, 
		RULE_try = 38, RULE_switch = 39, RULE_case = 40, RULE_caseDefault = 41, 
		RULE_expression = 42, RULE_bracketedExpression = 43, RULE_ifExpression = 44, 
		RULE_lambda = 45, RULE_throwException = 46, RULE_index = 47, RULE_range = 48, 
		RULE_value = 49, RULE_literal = 50, RULE_literalValue = 51, RULE_dataStructureDefinition = 52, 
		RULE_literalDataStructure = 53, RULE_tupleDefinition = 54, RULE_literalTuple = 55, 
		RULE_tupleDecomp = 56, RULE_listDefinition = 57, RULE_literalList = 58, 
		RULE_listDecomp = 59, RULE_dictionaryDefinition = 60, RULE_literalDictionary = 61, 
		RULE_kvp = 62, RULE_literalKvp = 63, RULE_unaryOp = 64, RULE_binaryOp = 65, 
		RULE_arithmeticOp = 66, RULE_logicalOp = 67, RULE_conditionalOp = 68, 
		RULE_type = 69, RULE_dataStructureType = 70, RULE_genericSpecifier = 71, 
		RULE_tupleType = 72, RULE_funcType = 73;
	public static readonly string[] ruleNames = {
		"file", "main", "statementBlock", "callStatement", "freestandingException", 
		"varDef", "assignment", "assignableValue", "methodCall", "argumentList", 
		"procedureDef", "procedureSignature", "parameterList", "parameter", "functionDef", 
		"functionWithBody", "expressionFunction", "letIn", "functionSignature", 
		"constantDef", "enumDef", "enumType", "enumValue", "classDef", "mutableClass", 
		"immutableClass", "abstractClass", "inherits", "property", "constructor", 
		"newInstance", "withClause", "proceduralControlFlow", "if", "for", "forIn", 
		"while", "repeat", "try", "switch", "case", "caseDefault", "expression", 
		"bracketedExpression", "ifExpression", "lambda", "throwException", "index", 
		"range", "value", "literal", "literalValue", "dataStructureDefinition", 
		"literalDataStructure", "tupleDefinition", "literalTuple", "tupleDecomp", 
		"listDefinition", "literalList", "listDecomp", "dictionaryDefinition", 
		"literalDictionary", "kvp", "literalKvp", "unaryOp", "binaryOp", "arithmeticOp", 
		"logicalOp", "conditionalOp", "type", "dataStructureType", "genericSpecifier", 
		"tupleType", "funcType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, "'#'", "'as'", "'abstract'", 
		"'case'", "'catch'", "'class'", "'constant'", "'constructor'", "'curry'", 
		"'default'", "'else'", "'end'", "'enumeration'", "'for'", "'function'", 
		"'if'", "'immutable'", "'in'", "'inherits'", "'lambda'", "'let'", "'main'", 
		"'new'", "'partial'", "'private'", "'procedure'", "'property'", "'repeat'", 
		"'return'", "'self'", "'step'", "'switch'", "'then'", "'throw'", "'to'", 
		"'try'", "'until'", "'var'", "'while'", "'with'", null, null, "'Array'", 
		"'List'", "'Dictionary'", "'Iter'", "'='", "'->'", "'{'", "'}'", "'['", 
		"']'", "'('", "')'", "'..'", "'.'", null, "':'", "'+'", "'-'", "'*'", 
		"'/'", "'^'", "'mod'", "'div'", "'<'", "'>'", "'?'", "'and'", "'not'", 
		"'or'", "'xor'", null, null, "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "NL", "SINGLE_LINE_COMMENT", "COMMENT_MARKER", 
		"AS", "ABSTRACT", "CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", 
		"CURRY", "DEFAULT", "ELSE", "END", "ENUMERATION", "FOR", "FUNCTION", "IF", 
		"IMMUTABLE", "IN", "INHERITS", "LAMBDA", "LET", "MAIN", "NEW", "PARTIAL", 
		"PRIVATE", "PROCEDURE", "PROPERTY", "REPEAT", "RETURN", "SELF", "STEP", 
		"SWITCH", "THEN", "THROW", "TO", "TRY", "UNTIL", "VAR", "WHILE", "WITH", 
		"BOOL_VALUE", "VALUE_TYPE", "ARRAY", "LIST", "DICTIONARY", "ITERABLE", 
		"ASSIGN", "ARROW", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "DOUBLE_DOT", "DOT", "COMMA", "COLON", 
		"PLUS", "MINUS", "MULT", "DIVIDE", "POWER", "MOD", "INT_DIV", "LT", "GT", 
		"NULLABLE", "OP_AND", "OP_NOT", "OP_OR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LE", 
		"OP_GE", "TYPENAME", "IDENTIFIER", "LITERAL_INTEGER", "LITERAL_FLOAT", 
		"LITERAL_DECIMAL", "LITERAL_CHAR", "LITERAL_STRING", "VERBATIM_ONLY_STRING", 
		"WHITESPACES", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Elan.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ElanParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElanParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElanParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ElanParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext[] enumDef() {
			return GetRuleContexts<EnumDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef(int i) {
			return GetRuleContext<EnumDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 154;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 148;
						main();
						}
						break;
					case 2:
						{
						State = 149;
						procedureDef();
						}
						break;
					case 3:
						{
						State = 150;
						functionDef();
						}
						break;
					case 4:
						{
						State = 151;
						constantDef();
						}
						break;
					case 5:
						{
						State = 152;
						enumDef();
						}
						break;
					case 6:
						{
						State = 153;
						classDef();
						}
						break;
					}
					} 
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 159;
				Match(NL);
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(ElanParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(ElanParser.MAIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(NL);
			State = 168;
			Match(MAIN);
			State = 169;
			statementBlock();
			State = 170;
			Match(NL);
			State = 171;
			Match(END);
			State = 172;
			Match(MAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext[] proceduralControlFlow() {
			return GetRuleContexts<ProceduralControlFlowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext proceduralControlFlow(int i) {
			return GetRuleContext<ProceduralControlFlowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreestandingExceptionContext[] freestandingException() {
			return GetRuleContexts<FreestandingExceptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreestandingExceptionContext freestandingException(int i) {
			return GetRuleContext<FreestandingExceptionContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 179;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 174;
						varDef();
						}
						break;
					case 2:
						{
						State = 175;
						assignment();
						}
						break;
					case 3:
						{
						State = 176;
						proceduralControlFlow();
						}
						break;
					case 4:
						{
						State = 177;
						callStatement();
						}
						break;
					case 5:
						{
						State = 178;
						freestandingException();
						}
						break;
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(NL);
			State = 185;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreestandingExceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException() {
			return GetRuleContext<ThrowExceptionContext>(0);
		}
		public FreestandingExceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freestandingException; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreestandingException(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreestandingExceptionContext freestandingException() {
		FreestandingExceptionContext _localctx = new FreestandingExceptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_freestandingException);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(NL);
			State = 188;
			throwException();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ElanParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(NL);
			State = 191;
			Match(VAR);
			State = 192;
			assignableValue();
			State = 193;
			Match(ASSIGN);
			State = 194;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(NL);
			State = 197;
			assignableValue();
			State = 198;
			Match(ASSIGN);
			State = 199;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleDecompContext tupleDecomp() {
			return GetRuleContext<TupleDecompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDecompContext listDecomp() {
			return GetRuleContext<ListDecompContext>(0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableValueContext assignableValue() {
		AssignableValueContext _localctx = new AssignableValueContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignableValue);
		int _la;
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SELF) {
					{
					State = 201;
					Match(SELF);
					State = 202;
					Match(DOT);
					}
				}

				State = 205;
				Match(IDENTIFIER);
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_SQ_BRACKET) {
					{
					State = 206;
					index();
					}
				}

				}
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				tupleDecomp();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 210;
				listDecomp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRY() { return GetToken(ElanParser.CURRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(ElanParser.PARTIAL, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRY || _la==PARTIAL) {
				{
				State = 213;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRY || _la==PARTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 216;
			Match(IDENTIFIER);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 217;
				genericSpecifier();
				}
			}

			State = 220;
			Match(OPEN_BRACKET);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET) | (1L << MINUS))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (OP_NOT - 73)) | (1L << (TYPENAME - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (LITERAL_INTEGER - 73)) | (1L << (LITERAL_FLOAT - 73)) | (1L << (LITERAL_DECIMAL - 73)) | (1L << (LITERAL_CHAR - 73)) | (1L << (LITERAL_STRING - 73)))) != 0)) {
				{
				State = 221;
				argumentList();
				}
			}

			State = 224;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 18, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			expression(0);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 227;
				Match(COMMA);
				State = 228;
				expression(0);
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ProcedureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefContext procedureDef() {
		ProcedureDefContext _localctx = new ProcedureDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_procedureDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(NL);
			State = 235;
			Match(PROCEDURE);
			State = 236;
			procedureSignature();
			State = 237;
			statementBlock();
			State = 238;
			Match(NL);
			State = 239;
			Match(END);
			State = 240;
			Match(PROCEDURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ProcedureSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSignatureContext procedureSignature() {
		ProcedureSignatureContext _localctx = new ProcedureSignatureContext(Context, State);
		EnterRule(_localctx, 22, RULE_procedureSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(IDENTIFIER);
			State = 243;
			Match(OPEN_BRACKET);
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 244;
				Match(NL);
				}
				break;
			}
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL || _la==IDENTIFIER) {
				{
				State = 247;
				parameterList();
				}
			}

			State = 250;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			parameter();
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 253;
				Match(COMMA);
				State = 254;
				parameter();
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 260;
				Match(NL);
				}
			}

			State = 263;
			Match(IDENTIFIER);
			State = 264;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionWithBodyContext functionWithBody() {
			return GetRuleContext<FunctionWithBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionFunctionContext expressionFunction() {
			return GetRuleContext<ExpressionFunctionContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionDef);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266;
				functionWithBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267;
				expressionFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionWithBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElanParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public FunctionWithBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionWithBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionWithBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionWithBodyContext functionWithBody() {
		FunctionWithBodyContext _localctx = new FunctionWithBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionWithBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(NL);
			State = 271;
			Match(FUNCTION);
			State = 272;
			functionSignature();
			State = 273;
			statementBlock();
			State = 274;
			Match(NL);
			State = 275;
			Match(RETURN);
			State = 276;
			expression(0);
			State = 277;
			Match(NL);
			State = 278;
			Match(END);
			State = 279;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ElanParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetInContext letIn() {
			return GetRuleContext<LetInContext>(0);
		}
		public ExpressionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionFunctionContext expressionFunction() {
		ExpressionFunctionContext _localctx = new ExpressionFunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_expressionFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(NL);
			State = 282;
			Match(FUNCTION);
			State = 283;
			functionSignature();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 284;
				Match(NL);
				}
			}

			State = 287;
			Match(ARROW);
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 288;
				Match(NL);
				}
				break;
			}
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET) {
				{
				State = 291;
				letIn();
				}
			}

			State = 294;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ElanParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext[] assignableValue() {
			return GetRuleContexts<AssignableValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue(int i) {
			return GetRuleContext<AssignableValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(ElanParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(ElanParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LetInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetInContext letIn() {
		LetInContext _localctx = new LetInContext(Context, State);
		EnterRule(_localctx, 34, RULE_letIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(LET);
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 297;
				Match(NL);
				}
			}

			State = 300;
			assignableValue();
			State = 301;
			Match(ASSIGN);
			State = 302;
			expression(0);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 303;
				Match(COMMA);
				State = 304;
				assignableValue();
				State = 305;
				Match(ASSIGN);
				State = 306;
				expression(0);
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 313;
				Match(NL);
				}
			}

			State = 316;
			Match(IN);
			State = 318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 317;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ElanParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(IDENTIFIER);
			State = 321;
			Match(OPEN_BRACKET);
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 322;
				Match(NL);
				}
				break;
			}
			State = 326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 325;
				parameterList();
				}
				break;
			}
			State = 329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 328;
				Match(NL);
				}
			}

			State = 331;
			Match(CLOSE_BRACKET);
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 332;
				Match(NL);
				}
			}

			State = 335;
			Match(AS);
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 336;
				Match(NL);
				}
			}

			State = 339;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ElanParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefContext constantDef() {
		ConstantDefContext _localctx = new ConstantDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_constantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(NL);
			State = 342;
			Match(CONSTANT);
			State = 343;
			Match(IDENTIFIER);
			State = 344;
			Match(ASSIGN);
			State = 345;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENUMERATION() { return GetTokens(ElanParser.ENUMERATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATION(int i) {
			return GetToken(ElanParser.ENUMERATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(NL);
			State = 348;
			Match(ENUMERATION);
			State = 349;
			enumType();
			State = 350;
			Match(NL);
			State = 351;
			Match(IDENTIFIER);
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 352;
				Match(COMMA);
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 353;
					Match(NL);
					}
				}

				State = 356;
				Match(IDENTIFIER);
				}
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 362;
			Match(NL);
			State = 363;
			Match(END);
			State = 364;
			Match(ENUMERATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_enumType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(TYPENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			enumType();
			State = 369;
			Match(DOT);
			State = 370;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbstractClassContext abstractClass() {
			return GetRuleContext<AbstractClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MutableClassContext mutableClass() {
			return GetRuleContext<MutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmutableClassContext immutableClass() {
			return GetRuleContext<ImmutableClassContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 46, RULE_classDef);
		try {
			State = 375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				abstractClass();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				mutableClass();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 374;
				immutableClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		public MutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MutableClassContext mutableClass() {
		MutableClassContext _localctx = new MutableClassContext(Context, State);
		EnterRule(_localctx, 48, RULE_mutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(NL);
			State = 378;
			Match(CLASS);
			State = 379;
			Match(TYPENAME);
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 380;
				inherits();
				}
			}

			State = 389;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 387;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
					case 1:
						{
						State = 383;
						constructor();
						}
						break;
					case 2:
						{
						State = 384;
						property();
						}
						break;
					case 3:
						{
						State = 385;
						functionDef();
						}
						break;
					case 4:
						{
						State = 386;
						procedureDef();
						}
						break;
					}
					} 
				}
				State = 391;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 392;
			Match(NL);
			State = 393;
			Match(END);
			State = 394;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmutableClassContext immutableClass() {
		ImmutableClassContext _localctx = new ImmutableClassContext(Context, State);
		EnterRule(_localctx, 50, RULE_immutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(NL);
			State = 397;
			Match(IMMUTABLE);
			State = 398;
			Match(CLASS);
			State = 399;
			Match(TYPENAME);
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 400;
				inherits();
				}
			}

			State = 408;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 406;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						State = 403;
						constructor();
						}
						break;
					case 2:
						{
						State = 404;
						property();
						}
						break;
					case 3:
						{
						State = 405;
						functionDef();
						}
						break;
					}
					} 
				}
				State = 410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			State = 411;
			Match(NL);
			State = 412;
			Match(END);
			State = 413;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext[] procedureSignature() {
			return GetRuleContexts<ProcedureSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature(int i) {
			return GetRuleContext<ProcedureSignatureContext>(i);
		}
		public AbstractClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractClassContext abstractClass() {
		AbstractClassContext _localctx = new AbstractClassContext(Context, State);
		EnterRule(_localctx, 52, RULE_abstractClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(NL);
			State = 416;
			Match(ABSTRACT);
			State = 417;
			Match(CLASS);
			State = 418;
			Match(TYPENAME);
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 419;
				inherits();
				}
			}

			State = 431;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 429;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						State = 422;
						property();
						}
						break;
					case 2:
						{
						State = 423;
						Match(NL);
						State = 424;
						Match(FUNCTION);
						State = 425;
						functionSignature();
						}
						break;
					case 3:
						{
						State = 426;
						Match(NL);
						State = 427;
						Match(PROCEDURE);
						State = 428;
						procedureSignature();
						}
						break;
					}
					} 
				}
				State = 433;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 434;
			Match(NL);
			State = 435;
			Match(END);
			State = 436;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(ElanParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public InheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritsContext inherits() {
		InheritsContext _localctx = new InheritsContext(Context, State);
		EnterRule(_localctx, 54, RULE_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(INHERITS);
			State = 439;
			type();
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 440;
				Match(COMMA);
				State = 441;
				type();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(ElanParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ElanParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ElanParser.PRIVATE, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 56, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(NL);
			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 448;
				Match(PRIVATE);
				}
			}

			State = 451;
			Match(PROPERTY);
			State = 452;
			Match(IDENTIFIER);
			State = 453;
			Match(AS);
			State = 454;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRUCTOR() { return GetTokens(ElanParser.CONSTRUCTOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(ElanParser.CONSTRUCTOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 58, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			Match(NL);
			State = 457;
			Match(CONSTRUCTOR);
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 458;
				Match(OPEN_BRACKET);
				State = 460;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 459;
					Match(NL);
					}
					break;
				}
				State = 463;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 462;
					parameterList();
					}
					break;
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 465;
					Match(NL);
					}
				}

				State = 468;
				Match(CLOSE_BRACKET);
				}
			}

			State = 471;
			statementBlock();
			State = 472;
			Match(NL);
			State = 473;
			Match(END);
			State = 474;
			Match(CONSTRUCTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ElanParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(Context, State);
		EnterRule(_localctx, 60, RULE_newInstance);
		int _la;
		try {
			State = 488;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476;
				Match(NEW);
				State = 477;
				type();
				State = 478;
				Match(OPEN_BRACKET);
				State = 480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET) | (1L << MINUS))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (OP_NOT - 73)) | (1L << (TYPENAME - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (LITERAL_INTEGER - 73)) | (1L << (LITERAL_FLOAT - 73)) | (1L << (LITERAL_DECIMAL - 73)) | (1L << (LITERAL_CHAR - 73)) | (1L << (LITERAL_STRING - 73)))) != 0)) {
					{
					State = 479;
					argumentList();
					}
				}

				State = 482;
				Match(CLOSE_BRACKET);
				State = 484;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 483;
					withClause();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				Match(IDENTIFIER);
				State = 487;
				withClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(ElanParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 62, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(WITH);
			State = 491;
			Match(OPEN_BRACE);
			State = 492;
			assignment();
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 493;
				Match(COMMA);
				State = 494;
				assignment();
				}
				}
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 500;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduralControlFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInContext forIn() {
			return GetRuleContext<ForInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryContext @try() {
			return GetRuleContext<TryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ProceduralControlFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proceduralControlFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProceduralControlFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProceduralControlFlowContext proceduralControlFlow() {
		ProceduralControlFlowContext _localctx = new ProceduralControlFlowContext(Context, State);
		EnterRule(_localctx, 64, RULE_proceduralControlFlow);
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 502;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 503;
				@for();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 504;
				forIn();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 505;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 506;
				repeat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 507;
				@try();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 508;
				@switch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(ElanParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(ElanParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(ElanParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(ElanParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(ElanParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(ElanParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 66, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(NL);
			State = 512;
			Match(IF);
			State = 513;
			expression(0);
			State = 514;
			Match(THEN);
			State = 515;
			statementBlock();
			State = 525;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 516;
					Match(NL);
					State = 517;
					Match(ELSE);
					State = 518;
					Match(IF);
					State = 519;
					expression(0);
					State = 520;
					Match(THEN);
					State = 521;
					statementBlock();
					}
					} 
				}
				State = 527;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 528;
				Match(NL);
				State = 529;
				Match(ELSE);
				State = 530;
				statementBlock();
				}
				break;
			}
			State = 533;
			Match(NL);
			State = 534;
			Match(END);
			State = 535;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(ElanParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(ElanParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(ElanParser.STEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 68, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(NL);
			State = 538;
			Match(FOR);
			State = 539;
			Match(IDENTIFIER);
			State = 540;
			Match(ASSIGN);
			State = 541;
			expression(0);
			State = 542;
			Match(TO);
			State = 543;
			expression(0);
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 544;
				Match(STEP);
				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 545;
					Match(MINUS);
					}
				}

				State = 548;
				Match(LITERAL_INTEGER);
				}
			}

			State = 551;
			statementBlock();
			State = 552;
			Match(NL);
			State = 553;
			Match(END);
			State = 554;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(ElanParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(ElanParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ForInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInContext forIn() {
		ForInContext _localctx = new ForInContext(Context, State);
		EnterRule(_localctx, 70, RULE_forIn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(NL);
			State = 557;
			Match(FOR);
			State = 558;
			Match(IDENTIFIER);
			State = 559;
			Match(IN);
			State = 560;
			expression(0);
			State = 561;
			statementBlock();
			State = 562;
			Match(NL);
			State = 563;
			Match(END);
			State = 564;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(ElanParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(ElanParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 72, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			Match(NL);
			State = 567;
			Match(WHILE);
			State = 568;
			expression(0);
			State = 569;
			statementBlock();
			State = 570;
			Match(NL);
			State = 571;
			Match(END);
			State = 572;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(ElanParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(ElanParser.REPEAT, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 74, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(NL);
			{
			State = 575;
			Match(REPEAT);
			}
			State = 576;
			statementBlock();
			State = 577;
			Match(NL);
			State = 578;
			Match(UNTIL);
			State = 579;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(ElanParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(ElanParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ElanParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryContext @try() {
		TryContext _localctx = new TryContext(Context, State);
		EnterRule(_localctx, 76, RULE_try);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(NL);
			State = 582;
			Match(TRY);
			State = 583;
			statementBlock();
			State = 590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 584;
				Match(NL);
				State = 585;
				Match(CATCH);
				State = 586;
				Match(IDENTIFIER);
				State = 587;
				type();
				State = 588;
				statementBlock();
				}
				break;
			}
			State = 592;
			Match(NL);
			State = 593;
			Match(END);
			State = 594;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(ElanParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(ElanParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseDefaultContext caseDefault() {
			return GetRuleContext<CaseDefaultContext>(0);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 78, RULE_switch);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(NL);
			State = 597;
			Match(SWITCH);
			State = 598;
			expression(0);
			State = 602;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 599;
					@case();
					}
					} 
				}
				State = 604;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 605;
				caseDefault();
				}
			}

			State = 608;
			Match(END);
			State = 609;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(ElanParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 80, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(NL);
			State = 612;
			Match(CASE);
			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 613;
				Match(MINUS);
				}
			}

			State = 616;
			literalValue();
			State = 617;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseDefaultContext caseDefault() {
		CaseDefaultContext _localctx = new CaseDefaultContext(Context, State);
		EnterRule(_localctx, 82, RULE_caseDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(NL);
			State = 620;
			Match(DEFAULT);
			State = 621;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracketedExpressionContext bracketedExpression() {
			return GetRuleContext<BracketedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException() {
			return GetRuleContext<ThrowExceptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 624;
				bracketedExpression();
				}
				break;
			case 2:
				{
				State = 625;
				methodCall();
				}
				break;
			case 3:
				{
				State = 626;
				value();
				}
				break;
			case 4:
				{
				State = 627;
				unaryOp();
				State = 628;
				expression(8);
				}
				break;
			case 5:
				{
				State = 630;
				newInstance();
				}
				break;
			case 6:
				{
				State = 631;
				ifExpression();
				}
				break;
			case 7:
				{
				State = 632;
				lambda();
				}
				break;
			case 8:
				{
				State = 633;
				throwException();
				}
				break;
			case 9:
				{
				State = 634;
				Match(NL);
				State = 635;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 655;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 653;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 638;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 639;
						Match(POWER);
						State = 640;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 641;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 642;
						binaryOp();
						State = 643;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 645;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 646;
						index();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 647;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 648;
						Match(DOT);
						State = 649;
						methodCall();
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 650;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 651;
						Match(DOT);
						State = 652;
						Match(IDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 657;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracketedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public BracketedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketedExpressionContext bracketedExpression() {
		BracketedExpressionContext _localctx = new BracketedExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_bracketedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(OPEN_BRACKET);
			State = 659;
			expression(0);
			State = 660;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ElanParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ElanParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ElanParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_ifExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 662;
				Match(NL);
				}
			}

			State = 665;
			Match(IF);
			State = 666;
			expression(0);
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 667;
				Match(NL);
				}
			}

			State = 670;
			Match(THEN);
			State = 671;
			expression(0);
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 672;
				Match(NL);
				}
			}

			State = 675;
			Match(ELSE);
			State = 676;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(ElanParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 90, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(LAMBDA);
			State = 679;
			argumentList();
			State = 680;
			Match(ARROW);
			State = 681;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(ElanParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public ThrowExceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwException; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowException(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExceptionContext throwException() {
		ThrowExceptionContext _localctx = new ThrowExceptionContext(Context, State);
		EnterRule(_localctx, 92, RULE_throwException);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			Match(THROW);
			State = 684;
			type();
			{
			State = 685;
			Match(OPEN_BRACKET);
			State = 686;
			argumentList();
			State = 687;
			Match(CLOSE_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(ElanParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(ElanParser.CLOSE_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ElanParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 94, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(OPEN_SQ_BRACKET);
			State = 696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 690;
				expression(0);
				}
				break;
			case 2:
				{
				State = 691;
				expression(0);
				State = 692;
				Match(COMMA);
				State = 693;
				expression(0);
				}
				break;
			case 3:
				{
				State = 695;
				range();
				}
				break;
			}
			State = 698;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(ElanParser.DOUBLE_DOT, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 96, RULE_range);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 700;
				expression(0);
				State = 701;
				Match(DOUBLE_DOT);
				State = 702;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 704;
				expression(0);
				State = 705;
				Match(DOUBLE_DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 707;
				Match(DOUBLE_DOT);
				State = 708;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureDefinitionContext dataStructureDefinition() {
			return GetRuleContext<DataStructureDefinitionContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 98, RULE_value);
		int _la;
		try {
			State = 719;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 711;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SELF) {
					{
					State = 712;
					Match(SELF);
					State = 713;
					Match(DOT);
					}
				}

				State = 716;
				Match(IDENTIFIER);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 717;
				dataStructureDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 718;
				Match(SELF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDataStructureContext literalDataStructure() {
			return GetRuleContext<LiteralDataStructureContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 100, RULE_literal);
		try {
			State = 723;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
			case TYPENAME:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_DECIMAL:
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 721;
				literalValue();
				}
				break;
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 722;
				literalDataStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VALUE() { return GetToken(ElanParser.BOOL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(ElanParser.LITERAL_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_DECIMAL() { return GetToken(ElanParser.LITERAL_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_CHAR() { return GetToken(ElanParser.LITERAL_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 102, RULE_literalValue);
		try {
			State = 731;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 725;
				Match(BOOL_VALUE);
				}
				break;
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 726;
				Match(LITERAL_INTEGER);
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 727;
				Match(LITERAL_FLOAT);
				}
				break;
			case LITERAL_DECIMAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 728;
				Match(LITERAL_DECIMAL);
				}
				break;
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 729;
				Match(LITERAL_CHAR);
				}
				break;
			case TYPENAME:
				EnterOuterAlt(_localctx, 6);
				{
				State = 730;
				enumValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleDefinitionContext tupleDefinition() {
			return GetRuleContext<TupleDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDefinitionContext listDefinition() {
			return GetRuleContext<ListDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryDefinitionContext dictionaryDefinition() {
			return GetRuleContext<DictionaryDefinitionContext>(0);
		}
		public DataStructureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureDefinitionContext dataStructureDefinition() {
		DataStructureDefinitionContext _localctx = new DataStructureDefinitionContext(Context, State);
		EnterRule(_localctx, 104, RULE_dataStructureDefinition);
		try {
			State = 736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 733;
				tupleDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 734;
				listDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 735;
				dictionaryDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDataStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTupleContext literalTuple() {
			return GetRuleContext<LiteralTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralListContext literalList() {
			return GetRuleContext<LiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDictionaryContext literalDictionary() {
			return GetRuleContext<LiteralDictionaryContext>(0);
		}
		public LiteralDataStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDataStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDataStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDataStructureContext literalDataStructure() {
		LiteralDataStructureContext _localctx = new LiteralDataStructureContext(Context, State);
		EnterRule(_localctx, 106, RULE_literalDataStructure);
		try {
			State = 742;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 738;
				Match(LITERAL_STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 739;
				literalTuple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 740;
				literalList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 741;
				literalDictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public TupleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDefinitionContext tupleDefinition() {
		TupleDefinitionContext _localctx = new TupleDefinitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_tupleDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			Match(OPEN_BRACKET);
			State = 745;
			expression(0);
			State = 746;
			Match(COMMA);
			State = 747;
			expression(0);
			State = 752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 748;
				Match(COMMA);
				State = 749;
				expression(0);
				}
				}
				State = 754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 755;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public LiteralTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTupleContext literalTuple() {
		LiteralTupleContext _localctx = new LiteralTupleContext(Context, State);
		EnterRule(_localctx, 110, RULE_literalTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			Match(OPEN_BRACKET);
			State = 758;
			literal();
			State = 759;
			Match(COMMA);
			State = 760;
			literal();
			State = 765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 761;
				Match(COMMA);
				State = 762;
				literal();
				}
				}
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 768;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public TupleDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDecompContext tupleDecomp() {
		TupleDecompContext _localctx = new TupleDecompContext(Context, State);
		EnterRule(_localctx, 112, RULE_tupleDecomp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			Match(OPEN_BRACKET);
			State = 771;
			Match(IDENTIFIER);
			State = 774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 772;
				Match(COMMA);
				State = 773;
				Match(IDENTIFIER);
				}
				}
				State = 776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 778;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ListDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDefinitionContext listDefinition() {
		ListDefinitionContext _localctx = new ListDefinitionContext(Context, State);
		EnterRule(_localctx, 114, RULE_listDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(OPEN_BRACE);
			{
			State = 782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 781;
				Match(NL);
				}
				break;
			}
			State = 784;
			expression(0);
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 785;
				Match(COMMA);
				State = 786;
				expression(0);
				}
				}
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 792;
				Match(NL);
				}
			}

			}
			State = 795;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralListContext literalList() {
		LiteralListContext _localctx = new LiteralListContext(Context, State);
		EnterRule(_localctx, 116, RULE_literalList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			Match(OPEN_BRACE);
			{
			State = 799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 798;
				Match(NL);
				}
			}

			State = 801;
			literal();
			State = 806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 802;
				Match(COMMA);
				State = 803;
				literal();
				}
				}
				State = 808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 809;
				Match(NL);
				}
			}

			}
			State = 812;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		public ListDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDecompContext listDecomp() {
		ListDecompContext _localctx = new ListDecompContext(Context, State);
		EnterRule(_localctx, 118, RULE_listDecomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814;
			Match(OPEN_BRACE);
			State = 815;
			Match(IDENTIFIER);
			State = 816;
			Match(COLON);
			State = 817;
			Match(IDENTIFIER);
			State = 818;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext[] kvp() {
			return GetRuleContexts<KvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext kvp(int i) {
			return GetRuleContext<KvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DictionaryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryDefinitionContext dictionaryDefinition() {
		DictionaryDefinitionContext _localctx = new DictionaryDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_dictionaryDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(OPEN_BRACE);
			{
			State = 822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 821;
				Match(NL);
				}
				break;
			}
			State = 824;
			kvp();
			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 825;
				Match(COMMA);
				State = 826;
				kvp();
				}
				}
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 832;
				Match(NL);
				}
			}

			}
			State = 835;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext[] literalKvp() {
			return GetRuleContexts<LiteralKvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext literalKvp(int i) {
			return GetRuleContext<LiteralKvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralDictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDictionaryContext literalDictionary() {
		LiteralDictionaryContext _localctx = new LiteralDictionaryContext(Context, State);
		EnterRule(_localctx, 122, RULE_literalDictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			Match(OPEN_BRACE);
			{
			State = 839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 838;
				Match(NL);
				}
			}

			State = 841;
			literalKvp();
			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 842;
				Match(COMMA);
				State = 843;
				literalKvp();
				}
				}
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 849;
				Match(NL);
				}
			}

			}
			State = 852;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public KvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpContext kvp() {
		KvpContext _localctx = new KvpContext(Context, State);
		EnterRule(_localctx, 124, RULE_kvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			expression(0);
			State = 855;
			Match(COLON);
			State = 856;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralKvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public LiteralKvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalKvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralKvpContext literalKvp() {
		LiteralKvpContext _localctx = new LiteralKvpContext(Context, State);
		EnterRule(_localctx, 126, RULE_literalKvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			literal();
			State = 859;
			Match(COLON);
			State = 860;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(ElanParser.OP_NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 128, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==OP_NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOpContext arithmeticOp() {
			return GetRuleContext<ArithmeticOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 130, RULE_binaryOp);
		try {
			State = 867;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case MULT:
			case DIVIDE:
			case POWER:
			case MOD:
			case INT_DIV:
				EnterOuterAlt(_localctx, 1);
				{
				State = 864;
				arithmeticOp();
				}
				break;
			case OP_AND:
			case OP_OR:
			case OP_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 865;
				logicalOp();
				}
				break;
			case LT:
			case GT:
			case OP_EQ:
			case OP_NE:
			case OP_LE:
			case OP_GE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 866;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(ElanParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ElanParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ElanParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DIV() { return GetToken(ElanParser.INT_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ElanParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ArithmeticOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOpContext arithmeticOp() {
		ArithmeticOpContext _localctx = new ArithmeticOpContext(Context, State);
		EnterRule(_localctx, 132, RULE_arithmeticOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (PLUS - 62)) | (1L << (MINUS - 62)) | (1L << (MULT - 62)) | (1L << (DIVIDE - 62)) | (1L << (POWER - 62)) | (1L << (MOD - 62)) | (1L << (INT_DIV - 62)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(ElanParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(ElanParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(ElanParser.OP_XOR, 0); }
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 134, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OP_AND - 72)) | (1L << (OP_OR - 72)) | (1L << (OP_XOR - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(ElanParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(ElanParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(ElanParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(ElanParser.OP_NE, 0); }
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 136, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LT - 69)) | (1L << (GT - 69)) | (1L << (OP_EQ - 69)) | (1L << (OP_NE - 69)) | (1L << (OP_LE - 69)) | (1L << (OP_GE - 69)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_TYPE() { return GetToken(ElanParser.VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureTypeContext dataStructureType() {
			return GetRuleContext<DataStructureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 138, RULE_type);
		try {
			State = 882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 875;
				Match(VALUE_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 876;
				dataStructureType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 877;
				Match(TYPENAME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 878;
				Match(TYPENAME);
				State = 879;
				genericSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 880;
				tupleType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 881;
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ElanParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(ElanParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERABLE() { return GetToken(ElanParser.ITERABLE, 0); }
		public DataStructureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureTypeContext dataStructureType() {
		DataStructureTypeContext _localctx = new DataStructureTypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_dataStructureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY) | (1L << LIST) | (1L << DICTIONARY) | (1L << ITERABLE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 885;
			genericSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public GenericSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericSpecifierContext genericSpecifier() {
		GenericSpecifierContext _localctx = new GenericSpecifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_genericSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 887;
			Match(LT);
			State = 888;
			type();
			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 889;
				Match(COMMA);
				State = 890;
				type();
				}
				}
				State = 895;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 896;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			Match(OPEN_BRACKET);
			State = 899;
			type();
			State = 902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 900;
				Match(COMMA);
				State = 901;
				type();
				}
				}
				State = 904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 906;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			Match(OPEN_BRACKET);
			State = 909;
			type();
			State = 914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 910;
				Match(COMMA);
				State = 911;
				type();
				}
				}
				State = 916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 917;
			Match(ARROW);
			State = 918;
			type();
			State = 919;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 42: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\\', '\x39C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x9D', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\xA0', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\xA3', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\xA6', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\xB6', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '\xB9', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\xCE', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\xD2', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xD6', '\n', 
		'\t', '\x3', '\n', '\x5', '\n', '\xD9', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\xDD', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xE1', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', '\xE8', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\xEB', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xF8', '\n', '\r', '\x3', '\r', 
		'\x5', '\r', '\xFB', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x102', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\x105', '\v', '\xE', '\x3', '\xF', '\x5', '\xF', '\x108', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x10F', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x120', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x124', '\n', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x127', '\n', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x12D', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x137', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x13A', '\v', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x13D', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x141', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\x146', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x149', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x14C', '\n', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x150', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x154', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x165', '\n', '\x16', '\x3', '\x16', '\a', '\x16', '\x168', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\x16B', '\v', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x17A', '\n', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x180', '\n', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', 
		'\x1A', '\x186', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x189', '\v', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x194', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\a', '\x1B', '\x199', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x19C', 
		'\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x1A7', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', 
		'\x1C', '\x1B0', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x1B3', '\v', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x1BD', 
		'\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x1C0', '\v', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1C4', '\n', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1CF', '\n', 
		'\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1D2', '\n', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x1D5', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1D8', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x1E3', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1E7', 
		'\n', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1EB', '\n', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x1F2', 
		'\n', '!', '\f', '!', '\xE', '!', '\x1F5', '\v', '!', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x200', '\n', '\"', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\a', '#', 
		'\x20E', '\n', '#', '\f', '#', '\xE', '#', '\x211', '\v', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x5', '#', '\x216', '\n', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x5', '$', '\x225', '\n', '$', '\x3', '$', '\x5', '$', '\x228', '\n', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x251', '\n', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\a', ')', '\x25B', '\n', ')', '\f', ')', 
		'\xE', ')', '\x25E', '\v', ')', '\x3', ')', '\x5', ')', '\x261', '\n', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x269', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', 
		'\x27F', '\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', ',', '\x290', 
		'\n', ',', '\f', ',', '\xE', ',', '\x293', '\v', ',', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '.', '\x5', '.', '\x29A', '\n', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x29F', '\n', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x2A4', '\n', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', 
		'\x2BB', '\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x2C8', '\n', '\x32', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x2CD', '\n', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x2D2', 
		'\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x2D6', '\n', 
		'\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x2DE', '\n', '\x35', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x2E3', '\n', '\x36', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x2E9', 
		'\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\a', '\x38', '\x2F1', '\n', '\x38', '\f', 
		'\x38', '\xE', '\x38', '\x2F4', '\v', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\a', '\x39', '\x2FE', '\n', '\x39', '\f', '\x39', '\xE', 
		'\x39', '\x301', '\v', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x6', ':', '\x309', '\n', ':', '\r', 
		':', '\xE', ':', '\x30A', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', 
		'\x5', ';', '\x311', '\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', 
		';', '\x316', '\n', ';', '\f', ';', '\xE', ';', '\x319', '\v', ';', '\x3', 
		';', '\x5', ';', '\x31C', '\n', ';', '\x3', ';', '\x3', ';', '\x3', '<', 
		'\x3', '<', '\x5', '<', '\x322', '\n', '<', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\a', '<', '\x327', '\n', '<', '\f', '<', '\xE', '<', '\x32A', '\v', 
		'<', '\x3', '<', '\x5', '<', '\x32D', '\n', '<', '\x3', '<', '\x3', '<', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '>', '\x3', '>', '\x5', '>', '\x339', '\n', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\a', '>', '\x33E', '\n', '>', '\f', '>', '\xE', '>', 
		'\x341', '\v', '>', '\x3', '>', '\x5', '>', '\x344', '\n', '>', '\x3', 
		'>', '\x3', '>', '\x3', '?', '\x3', '?', '\x5', '?', '\x34A', '\n', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\a', '?', '\x34F', '\n', '?', '\f', 
		'?', '\xE', '?', '\x352', '\v', '?', '\x3', '?', '\x5', '?', '\x355', 
		'\n', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x5', '\x43', '\x366', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 
		'G', '\x375', '\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\a', 'I', '\x37E', '\n', 'I', '\f', 
		'I', '\xE', 'I', '\x381', '\v', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x6', 'J', '\x389', '\n', 'J', '\r', 
		'J', '\xE', 'J', '\x38A', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\a', 'K', '\x393', '\n', 'K', '\f', 'K', '\xE', 
		'K', '\x396', '\v', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x2', '\x3', 'V', 'L', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x2', '\b', '\x4', '\x2', '\xE', '\xE', '\x1D', '\x1D', '\x4', '\x2', 
		'\x41', '\x41', 'K', 'K', '\x3', '\x2', '@', '\x46', '\x4', '\x2', 'J', 
		'J', 'L', 'M', '\x4', '\x2', 'G', 'H', 'N', 'Q', '\x3', '\x2', '\x30', 
		'\x33', '\x2', '\x3DB', '\x2', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x6', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\xBA', '\x3', '\x2', '\x2', '\x2', '\n', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\x10', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x14', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x107', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x110', '\x3', '\x2', '\x2', '\x2', '\"', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x142', '\x3', '\x2', '\x2', '\x2', '(', '\x157', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x15D', '\x3', '\x2', '\x2', '\x2', ',', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x179', '\x3', '\x2', '\x2', '\x2', '\x32', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x36', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1C1', '\x3', '\x2', '\x2', '\x2', '<', '\x1CA', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1EA', '\x3', '\x2', '\x2', '\x2', '@', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1FF', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x201', '\x3', '\x2', '\x2', '\x2', '\x46', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x22E', '\x3', '\x2', '\x2', '\x2', 'J', '\x238', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x240', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x247', '\x3', '\x2', '\x2', '\x2', 'P', '\x256', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x265', '\x3', '\x2', '\x2', '\x2', 'T', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x27E', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x294', '\x3', '\x2', '\x2', '\x2', 'Z', '\x299', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x2A8', '\x3', '\x2', '\x2', '\x2', '^', '\x2AD', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x2B3', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x64', '\x2D1', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x2D5', '\x3', '\x2', '\x2', '\x2', 'h', '\x2DD', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x2E2', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x2E8', '\x3', '\x2', '\x2', '\x2', 'n', '\x2EA', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x2F7', '\x3', '\x2', '\x2', '\x2', 'r', '\x304', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x30E', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x31F', '\x3', '\x2', '\x2', '\x2', 'x', '\x330', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x336', '\x3', '\x2', '\x2', '\x2', '|', '\x347', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x358', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x35C', '\x3', '\x2', '\x2', '\x2', '\x82', '\x360', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x365', '\x3', '\x2', '\x2', '\x2', '\x86', '\x367', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x369', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x374', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x376', '\x3', '\x2', '\x2', '\x2', '\x90', '\x379', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x384', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x96', '\x9D', '\x5', '\x4', 
		'\x3', '\x2', '\x97', '\x9D', '\x5', '\x16', '\f', '\x2', '\x98', '\x9D', 
		'\x5', '\x1E', '\x10', '\x2', '\x99', '\x9D', '\x5', '(', '\x15', '\x2', 
		'\x9A', '\x9D', '\x5', '*', '\x16', '\x2', '\x9B', '\x9D', '\x5', '\x30', 
		'\x19', '\x2', '\x9C', '\x96', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', 
		'\a', '\x4', '\x2', '\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA8', '\a', '\x2', '\x2', '\x3', '\xA8', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAA', '\a', '\x4', '\x2', '\x2', '\xAA', '\xAB', 
		'\a', '\x1B', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x6', '\x4', '\x2', 
		'\xAC', '\xAD', '\a', '\x4', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x11', 
		'\x2', '\x2', '\xAE', '\xAF', '\a', '\x1B', '\x2', '\x2', '\xAF', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB6', '\x5', '\f', '\a', '\x2', 
		'\xB1', '\xB6', '\x5', '\xE', '\b', '\x2', '\xB2', '\xB6', '\x5', '\x42', 
		'\"', '\x2', '\xB3', '\xB6', '\x5', '\b', '\x5', '\x2', '\xB4', '\xB6', 
		'\x5', '\n', '\x6', '\x2', '\xB5', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\a', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x4', '\x2', '\x2', 
		'\xBB', '\xBC', '\x5', 'V', ',', '\x2', '\xBC', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\a', '\x4', '\x2', '\x2', '\xBE', '\xBF', '\x5', 
		'^', '\x30', '\x2', '\xBF', '\v', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\a', '\x4', '\x2', '\x2', '\xC1', '\xC2', '\a', '+', '\x2', '\x2', 
		'\xC2', '\xC3', '\x5', '\x10', '\t', '\x2', '\xC3', '\xC4', '\a', '\x34', 
		'\x2', '\x2', '\xC4', '\xC5', '\x5', 'V', ',', '\x2', '\xC5', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', '\x4', '\x2', '\x2', '\xC7', 
		'\xC8', '\x5', '\x10', '\t', '\x2', '\xC8', '\xC9', '\a', '\x34', '\x2', 
		'\x2', '\xC9', '\xCA', '\x5', 'V', ',', '\x2', '\xCA', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCC', '\a', '#', '\x2', '\x2', '\xCC', '\xCE', 
		'\a', '=', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD1', '\a', 'S', '\x2', '\x2', '\xD0', '\xD2', '\x5', 
		'`', '\x31', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD6', '\x5', 'r', ':', '\x2', '\xD4', '\xD6', '\x5', 
		'x', '=', '\x2', '\xD5', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\x11', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD9', '\t', '\x2', 
		'\x2', '\x2', '\xD8', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDC', '\a', 'S', '\x2', '\x2', '\xDB', '\xDD', '\x5', '\x90', 
		'I', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xE0', '\a', ':', '\x2', '\x2', '\xDF', '\xE1', '\x5', '\x14', 
		'\v', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\a', ';', '\x2', '\x2', '\xE3', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE9', '\x5', 'V', ',', '\x2', '\xE5', '\xE6', 
		'\a', '>', '\x2', '\x2', '\xE6', '\xE8', '\x5', 'V', ',', '\x2', '\xE7', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\x15', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '\x4', '\x2', 
		'\x2', '\xED', '\xEE', '\a', '\x1F', '\x2', '\x2', '\xEE', '\xEF', '\x5', 
		'\x18', '\r', '\x2', '\xEF', '\xF0', '\x5', '\x6', '\x4', '\x2', '\xF0', 
		'\xF1', '\a', '\x4', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x11', '\x2', 
		'\x2', '\xF2', '\xF3', '\a', '\x1F', '\x2', '\x2', '\xF3', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', 'S', '\x2', '\x2', '\xF5', 
		'\xF7', '\a', ':', '\x2', '\x2', '\xF6', '\xF8', '\a', '\x4', '\x2', '\x2', 
		'\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFB', 
		'\x5', '\x1A', '\xE', '\x2', '\xFA', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\xFD', '\a', ';', '\x2', '\x2', '\xFD', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\x103', '\x5', '\x1C', '\xF', '\x2', 
		'\xFF', '\x100', '\a', '>', '\x2', '\x2', '\x100', '\x102', '\x5', '\x1C', 
		'\xF', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x108', '\a', '\x4', '\x2', '\x2', '\x107', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', 'S', '\x2', '\x2', 
		'\x10A', '\x10B', '\x5', '\x8C', 'G', '\x2', '\x10B', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x10C', '\x10F', '\x5', ' ', '\x11', '\x2', '\x10D', '\x10F', 
		'\x5', '\"', '\x12', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\a', '\x4', '\x2', '\x2', '\x111', 
		'\x112', '\a', '\x14', '\x2', '\x2', '\x112', '\x113', '\x5', '&', '\x14', 
		'\x2', '\x113', '\x114', '\x5', '\x6', '\x4', '\x2', '\x114', '\x115', 
		'\a', '\x4', '\x2', '\x2', '\x115', '\x116', '\a', '\"', '\x2', '\x2', 
		'\x116', '\x117', '\x5', 'V', ',', '\x2', '\x117', '\x118', '\a', '\x4', 
		'\x2', '\x2', '\x118', '\x119', '\a', '\x11', '\x2', '\x2', '\x119', '\x11A', 
		'\a', '\x14', '\x2', '\x2', '\x11A', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\a', '\x4', '\x2', '\x2', '\x11C', '\x11D', '\a', '\x14', 
		'\x2', '\x2', '\x11D', '\x11F', '\x5', '&', '\x14', '\x2', '\x11E', '\x120', 
		'\a', '\x4', '\x2', '\x2', '\x11F', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x120', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x123', '\a', '\x35', '\x2', '\x2', '\x122', 
		'\x124', '\a', '\x4', '\x2', '\x2', '\x123', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x127', '\x5', '$', '\x13', '\x2', 
		'\x126', '\x125', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x129', '\x5', 'V', ',', '\x2', '\x129', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x12C', '\a', '\x1A', '\x2', '\x2', '\x12B', '\x12D', '\a', 
		'\x4', '\x2', '\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x12F', '\x5', '\x10', '\t', '\x2', '\x12F', '\x130', 
		'\a', '\x34', '\x2', '\x2', '\x130', '\x138', '\x5', 'V', ',', '\x2', 
		'\x131', '\x132', '\a', '>', '\x2', '\x2', '\x132', '\x133', '\x5', '\x10', 
		'\t', '\x2', '\x133', '\x134', '\a', '\x34', '\x2', '\x2', '\x134', '\x135', 
		'\x5', 'V', ',', '\x2', '\x135', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x131', '\x3', '\x2', '\x2', '\x2', '\x137', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13D', 
		'\a', '\x4', '\x2', '\x2', '\x13C', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x140', '\a', '\x17', '\x2', '\x2', '\x13F', 
		'\x141', '\a', '\x4', '\x2', '\x2', '\x140', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\a', 'S', '\x2', '\x2', '\x143', 
		'\x145', '\a', ':', '\x2', '\x2', '\x144', '\x146', '\a', '\x4', '\x2', 
		'\x2', '\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x149', '\x5', '\x1A', '\xE', '\x2', '\x148', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14C', '\a', '\x4', '\x2', 
		'\x2', '\x14B', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x14F', '\a', ';', '\x2', '\x2', '\x14E', '\x150', '\a', '\x4', 
		'\x2', '\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x151', '\x153', '\a', '\a', '\x2', '\x2', '\x152', '\x154', '\a', '\x4', 
		'\x2', '\x2', '\x153', '\x152', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x156', '\x5', '\x8C', 'G', '\x2', '\x156', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x157', '\x158', '\a', '\x4', '\x2', '\x2', '\x158', '\x159', 
		'\a', '\f', '\x2', '\x2', '\x159', '\x15A', '\a', 'S', '\x2', '\x2', '\x15A', 
		'\x15B', '\a', '\x34', '\x2', '\x2', '\x15B', '\x15C', '\x5', '\x66', 
		'\x34', '\x2', '\x15C', ')', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', 
		'\a', '\x4', '\x2', '\x2', '\x15E', '\x15F', '\a', '\x12', '\x2', '\x2', 
		'\x15F', '\x160', '\x5', ',', '\x17', '\x2', '\x160', '\x161', '\a', '\x4', 
		'\x2', '\x2', '\x161', '\x169', '\a', 'S', '\x2', '\x2', '\x162', '\x164', 
		'\a', '>', '\x2', '\x2', '\x163', '\x165', '\a', '\x4', '\x2', '\x2', 
		'\x164', '\x163', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x168', '\a', 'S', '\x2', '\x2', '\x167', '\x162', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x169', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', '\x4', '\x2', '\x2', '\x16D', 
		'\x16E', '\a', '\x11', '\x2', '\x2', '\x16E', '\x16F', '\a', '\x12', '\x2', 
		'\x2', '\x16F', '+', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\a', 
		'R', '\x2', '\x2', '\x171', '-', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x173', '\x5', ',', '\x17', '\x2', '\x173', '\x174', '\a', '=', '\x2', 
		'\x2', '\x174', '\x175', '\a', 'S', '\x2', '\x2', '\x175', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x17A', '\x5', '\x36', '\x1C', '\x2', '\x177', 
		'\x17A', '\x5', '\x32', '\x1A', '\x2', '\x178', '\x17A', '\x5', '\x34', 
		'\x1B', '\x2', '\x179', '\x176', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x179', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x31', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', 
		'\a', '\x4', '\x2', '\x2', '\x17C', '\x17D', '\a', '\v', '\x2', '\x2', 
		'\x17D', '\x17F', '\a', 'R', '\x2', '\x2', '\x17E', '\x180', '\x5', '\x38', 
		'\x1D', '\x2', '\x17F', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x180', '\x3', '\x2', '\x2', '\x2', '\x180', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x186', '\x5', '<', '\x1F', '\x2', '\x182', '\x186', 
		'\x5', ':', '\x1E', '\x2', '\x183', '\x186', '\x5', '\x1E', '\x10', '\x2', 
		'\x184', '\x186', '\x5', '\x16', '\f', '\x2', '\x185', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x182', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x185', '\x184', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x189', '\x3', '\x2', '\x2', '\x2', '\x187', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x189', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x18B', '\a', '\x4', '\x2', '\x2', '\x18B', 
		'\x18C', '\a', '\x11', '\x2', '\x2', '\x18C', '\x18D', '\a', '\v', '\x2', 
		'\x2', '\x18D', '\x33', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', 
		'\a', '\x4', '\x2', '\x2', '\x18F', '\x190', '\a', '\x16', '\x2', '\x2', 
		'\x190', '\x191', '\a', '\v', '\x2', '\x2', '\x191', '\x193', '\a', 'R', 
		'\x2', '\x2', '\x192', '\x194', '\x5', '\x38', '\x1D', '\x2', '\x193', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x195', '\x199', 
		'\x5', '<', '\x1F', '\x2', '\x196', '\x199', '\x5', ':', '\x1E', '\x2', 
		'\x197', '\x199', '\x5', '\x1E', '\x10', '\x2', '\x198', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x196', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\x198', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\a', 
		'\x4', '\x2', '\x2', '\x19E', '\x19F', '\a', '\x11', '\x2', '\x2', '\x19F', 
		'\x1A0', '\a', '\v', '\x2', '\x2', '\x1A0', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x1A2', '\a', '\x4', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\a', '\b', '\x2', '\x2', '\x1A3', '\x1A4', '\a', '\v', '\x2', '\x2', 
		'\x1A4', '\x1A6', '\a', 'R', '\x2', '\x2', '\x1A5', '\x1A7', '\x5', '\x38', 
		'\x1D', '\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1B1', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1B0', '\x5', ':', '\x1E', '\x2', '\x1A9', '\x1AA', 
		'\a', '\x4', '\x2', '\x2', '\x1AA', '\x1AB', '\a', '\x14', '\x2', '\x2', 
		'\x1AB', '\x1B0', '\x5', '&', '\x14', '\x2', '\x1AC', '\x1AD', '\a', '\x4', 
		'\x2', '\x2', '\x1AD', '\x1AE', '\a', '\x1F', '\x2', '\x2', '\x1AE', '\x1B0', 
		'\x5', '\x18', '\r', '\x2', '\x1AF', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x1B2', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\a', '\x4', '\x2', '\x2', 
		'\x1B5', '\x1B6', '\a', '\x11', '\x2', '\x2', '\x1B6', '\x1B7', '\a', 
		'\v', '\x2', '\x2', '\x1B7', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1B9', '\a', '\x18', '\x2', '\x2', '\x1B9', '\x1BE', '\x5', '\x8C', 
		'G', '\x2', '\x1BA', '\x1BB', '\a', '>', '\x2', '\x2', '\x1BB', '\x1BD', 
		'\x5', '\x8C', 'G', '\x2', '\x1BC', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BC', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', 
		'\x2', '\x1C1', '\x1C3', '\a', '\x4', '\x2', '\x2', '\x1C2', '\x1C4', 
		'\a', '\x1E', '\x2', '\x2', '\x1C3', '\x1C2', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\a', ' ', '\x2', '\x2', '\x1C6', 
		'\x1C7', '\a', 'S', '\x2', '\x2', '\x1C7', '\x1C8', '\a', '\a', '\x2', 
		'\x2', '\x1C8', '\x1C9', '\x5', '\x8C', 'G', '\x2', '\x1C9', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\a', '\x4', '\x2', '\x2', '\x1CB', 
		'\x1D7', '\a', '\r', '\x2', '\x2', '\x1CC', '\x1CE', '\a', ':', '\x2', 
		'\x2', '\x1CD', '\x1CF', '\a', '\x4', '\x2', '\x2', '\x1CE', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D2', '\x5', 
		'\x1A', '\xE', '\x2', '\x1D1', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D4', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '\x1D5', '\a', '\x4', '\x2', '\x2', '\x1D4', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D8', '\a', 
		';', '\x2', '\x2', '\x1D7', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', 
		'\x2', '\x1D9', '\x1DA', '\x5', '\x6', '\x4', '\x2', '\x1DA', '\x1DB', 
		'\a', '\x4', '\x2', '\x2', '\x1DB', '\x1DC', '\a', '\x11', '\x2', '\x2', 
		'\x1DC', '\x1DD', '\a', '\r', '\x2', '\x2', '\x1DD', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE', '\x1DF', '\a', '\x1C', '\x2', '\x2', '\x1DF', '\x1E0', 
		'\x5', '\x8C', 'G', '\x2', '\x1E0', '\x1E2', '\a', ':', '\x2', '\x2', 
		'\x1E1', '\x1E3', '\x5', '\x14', '\v', '\x2', '\x1E2', '\x1E1', '\x3', 
		'\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E3', 
		'\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E6', '\a', ';', '\x2', 
		'\x2', '\x1E5', '\x1E7', '\x5', '@', '!', '\x2', '\x1E6', '\x1E5', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\a', 'S', '\x2', 
		'\x2', '\x1E9', '\x1EB', '\x5', '@', '!', '\x2', '\x1EA', '\x1DE', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '-', '\x2', '\x2', 
		'\x1ED', '\x1EE', '\a', '\x36', '\x2', '\x2', '\x1EE', '\x1F3', '\x5', 
		'\xE', '\b', '\x2', '\x1EF', '\x1F0', '\a', '>', '\x2', '\x2', '\x1F0', 
		'\x1F2', '\x5', '\xE', '\b', '\x2', '\x1F1', '\x1EF', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F3', '\x3', 
		'\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\a', '\x37', '\x2', '\x2', '\x1F7', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x200', '\x5', '\x44', '#', 
		'\x2', '\x1F9', '\x200', '\x5', '\x46', '$', '\x2', '\x1FA', '\x200', 
		'\x5', 'H', '%', '\x2', '\x1FB', '\x200', '\x5', 'J', '&', '\x2', '\x1FC', 
		'\x200', '\x5', 'L', '\'', '\x2', '\x1FD', '\x200', '\x5', 'N', '(', '\x2', 
		'\x1FE', '\x200', '\x5', 'P', ')', '\x2', '\x1FF', '\x1F8', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FA', 
		'\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x1FF', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FD', '\x3', 
		'\x2', '\x2', '\x2', '\x1FF', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\a', '\x4', '\x2', 
		'\x2', '\x202', '\x203', '\a', '\x15', '\x2', '\x2', '\x203', '\x204', 
		'\x5', 'V', ',', '\x2', '\x204', '\x205', '\a', '&', '\x2', '\x2', '\x205', 
		'\x20F', '\x5', '\x6', '\x4', '\x2', '\x206', '\x207', '\a', '\x4', '\x2', 
		'\x2', '\x207', '\x208', '\a', '\x10', '\x2', '\x2', '\x208', '\x209', 
		'\a', '\x15', '\x2', '\x2', '\x209', '\x20A', '\x5', 'V', ',', '\x2', 
		'\x20A', '\x20B', '\a', '&', '\x2', '\x2', '\x20B', '\x20C', '\x5', '\x6', 
		'\x4', '\x2', '\x20C', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '\x20E', '\x211', '\x3', '\x2', '\x2', '\x2', 
		'\x20F', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', '\x3', 
		'\x2', '\x2', '\x2', '\x210', '\x215', '\x3', '\x2', '\x2', '\x2', '\x211', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\a', '\x4', '\x2', 
		'\x2', '\x213', '\x214', '\a', '\x10', '\x2', '\x2', '\x214', '\x216', 
		'\x5', '\x6', '\x4', '\x2', '\x215', '\x212', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x216', '\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\x3', 
		'\x2', '\x2', '\x2', '\x217', '\x218', '\a', '\x4', '\x2', '\x2', '\x218', 
		'\x219', '\a', '\x11', '\x2', '\x2', '\x219', '\x21A', '\a', '\x15', '\x2', 
		'\x2', '\x21A', '\x45', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', 
		'\a', '\x4', '\x2', '\x2', '\x21C', '\x21D', '\a', '\x13', '\x2', '\x2', 
		'\x21D', '\x21E', '\a', 'S', '\x2', '\x2', '\x21E', '\x21F', '\a', '\x34', 
		'\x2', '\x2', '\x21F', '\x220', '\x5', 'V', ',', '\x2', '\x220', '\x221', 
		'\a', '(', '\x2', '\x2', '\x221', '\x227', '\x5', 'V', ',', '\x2', '\x222', 
		'\x224', '\a', '$', '\x2', '\x2', '\x223', '\x225', '\a', '\x41', '\x2', 
		'\x2', '\x224', '\x223', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'\x226', '\x228', '\a', 'T', '\x2', '\x2', '\x227', '\x222', '\x3', '\x2', 
		'\x2', '\x2', '\x227', '\x228', '\x3', '\x2', '\x2', '\x2', '\x228', '\x229', 
		'\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\x5', '\x6', '\x4', '\x2', 
		'\x22A', '\x22B', '\a', '\x4', '\x2', '\x2', '\x22B', '\x22C', '\a', '\x11', 
		'\x2', '\x2', '\x22C', '\x22D', '\a', '\x13', '\x2', '\x2', '\x22D', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\a', '\x4', '\x2', '\x2', 
		'\x22F', '\x230', '\a', '\x13', '\x2', '\x2', '\x230', '\x231', '\a', 
		'S', '\x2', '\x2', '\x231', '\x232', '\a', '\x17', '\x2', '\x2', '\x232', 
		'\x233', '\x5', 'V', ',', '\x2', '\x233', '\x234', '\x5', '\x6', '\x4', 
		'\x2', '\x234', '\x235', '\a', '\x4', '\x2', '\x2', '\x235', '\x236', 
		'\a', '\x11', '\x2', '\x2', '\x236', '\x237', '\a', '\x13', '\x2', '\x2', 
		'\x237', 'I', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\a', '\x4', 
		'\x2', '\x2', '\x239', '\x23A', '\a', ',', '\x2', '\x2', '\x23A', '\x23B', 
		'\x5', 'V', ',', '\x2', '\x23B', '\x23C', '\x5', '\x6', '\x4', '\x2', 
		'\x23C', '\x23D', '\a', '\x4', '\x2', '\x2', '\x23D', '\x23E', '\a', '\x11', 
		'\x2', '\x2', '\x23E', '\x23F', '\a', ',', '\x2', '\x2', '\x23F', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\a', '\x4', '\x2', '\x2', 
		'\x241', '\x242', '\a', '!', '\x2', '\x2', '\x242', '\x243', '\x5', '\x6', 
		'\x4', '\x2', '\x243', '\x244', '\a', '\x4', '\x2', '\x2', '\x244', '\x245', 
		'\a', '*', '\x2', '\x2', '\x245', '\x246', '\x5', 'V', ',', '\x2', '\x246', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x247', '\x248', '\a', '\x4', '\x2', 
		'\x2', '\x248', '\x249', '\a', ')', '\x2', '\x2', '\x249', '\x250', '\x5', 
		'\x6', '\x4', '\x2', '\x24A', '\x24B', '\a', '\x4', '\x2', '\x2', '\x24B', 
		'\x24C', '\a', '\n', '\x2', '\x2', '\x24C', '\x24D', '\a', 'S', '\x2', 
		'\x2', '\x24D', '\x24E', '\x5', '\x8C', 'G', '\x2', '\x24E', '\x24F', 
		'\x5', '\x6', '\x4', '\x2', '\x24F', '\x251', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x250', '\x251', '\x3', 
		'\x2', '\x2', '\x2', '\x251', '\x252', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x253', '\a', '\x4', '\x2', '\x2', '\x253', '\x254', '\a', '\x11', '\x2', 
		'\x2', '\x254', '\x255', '\a', ')', '\x2', '\x2', '\x255', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x257', '\a', '\x4', '\x2', '\x2', '\x257', 
		'\x258', '\a', '%', '\x2', '\x2', '\x258', '\x25C', '\x5', 'V', ',', '\x2', 
		'\x259', '\x25B', '\x5', 'R', '*', '\x2', '\x25A', '\x259', '\x3', '\x2', 
		'\x2', '\x2', '\x25B', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x260', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25C', '\x3', 
		'\x2', '\x2', '\x2', '\x25F', '\x261', '\x5', 'T', '+', '\x2', '\x260', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x3', '\x2', '\x2', 
		'\x2', '\x261', '\x262', '\x3', '\x2', '\x2', '\x2', '\x262', '\x263', 
		'\a', '\x11', '\x2', '\x2', '\x263', '\x264', '\a', '%', '\x2', '\x2', 
		'\x264', 'Q', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\a', '\x4', 
		'\x2', '\x2', '\x266', '\x268', '\a', '\t', '\x2', '\x2', '\x267', '\x269', 
		'\a', '\x41', '\x2', '\x2', '\x268', '\x267', '\x3', '\x2', '\x2', '\x2', 
		'\x268', '\x269', '\x3', '\x2', '\x2', '\x2', '\x269', '\x26A', '\x3', 
		'\x2', '\x2', '\x2', '\x26A', '\x26B', '\x5', 'h', '\x35', '\x2', '\x26B', 
		'\x26C', '\x5', '\x6', '\x4', '\x2', '\x26C', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x26D', '\x26E', '\a', '\x4', '\x2', '\x2', '\x26E', '\x26F', 
		'\a', '\xF', '\x2', '\x2', '\x26F', '\x270', '\x5', '\x6', '\x4', '\x2', 
		'\x270', 'U', '\x3', '\x2', '\x2', '\x2', '\x271', '\x272', '\b', ',', 
		'\x1', '\x2', '\x272', '\x27F', '\x5', 'X', '-', '\x2', '\x273', '\x27F', 
		'\x5', '\x12', '\n', '\x2', '\x274', '\x27F', '\x5', '\x64', '\x33', '\x2', 
		'\x275', '\x276', '\x5', '\x82', '\x42', '\x2', '\x276', '\x277', '\x5', 
		'V', ',', '\n', '\x277', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x278', 
		'\x27F', '\x5', '>', ' ', '\x2', '\x279', '\x27F', '\x5', 'Z', '.', '\x2', 
		'\x27A', '\x27F', '\x5', '\\', '/', '\x2', '\x27B', '\x27F', '\x5', '^', 
		'\x30', '\x2', '\x27C', '\x27D', '\a', '\x4', '\x2', '\x2', '\x27D', '\x27F', 
		'\x5', 'V', ',', '\x3', '\x27E', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'\x27E', '\x273', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x274', '\x3', 
		'\x2', '\x2', '\x2', '\x27E', '\x275', '\x3', '\x2', '\x2', '\x2', '\x27E', 
		'\x278', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x279', '\x3', '\x2', '\x2', 
		'\x2', '\x27E', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27B', 
		'\x3', '\x2', '\x2', '\x2', '\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x291', '\x3', '\x2', '\x2', '\x2', '\x280', '\x281', '\f', 
		'\t', '\x2', '\x2', '\x281', '\x282', '\a', '\x44', '\x2', '\x2', '\x282', 
		'\x290', '\x5', 'V', ',', '\n', '\x283', '\x284', '\f', '\b', '\x2', '\x2', 
		'\x284', '\x285', '\x5', '\x84', '\x43', '\x2', '\x285', '\x286', '\x5', 
		'V', ',', '\t', '\x286', '\x290', '\x3', '\x2', '\x2', '\x2', '\x287', 
		'\x288', '\f', '\r', '\x2', '\x2', '\x288', '\x290', '\x5', '`', '\x31', 
		'\x2', '\x289', '\x28A', '\f', '\f', '\x2', '\x2', '\x28A', '\x28B', '\a', 
		'=', '\x2', '\x2', '\x28B', '\x290', '\x5', '\x12', '\n', '\x2', '\x28C', 
		'\x28D', '\f', '\v', '\x2', '\x2', '\x28D', '\x28E', '\a', '=', '\x2', 
		'\x2', '\x28E', '\x290', '\a', 'S', '\x2', '\x2', '\x28F', '\x280', '\x3', 
		'\x2', '\x2', '\x2', '\x28F', '\x283', '\x3', '\x2', '\x2', '\x2', '\x28F', 
		'\x287', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x289', '\x3', '\x2', '\x2', 
		'\x2', '\x28F', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x290', '\x293', 
		'\x3', '\x2', '\x2', '\x2', '\x291', '\x28F', '\x3', '\x2', '\x2', '\x2', 
		'\x291', '\x292', '\x3', '\x2', '\x2', '\x2', '\x292', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x293', '\x291', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', 
		'\a', ':', '\x2', '\x2', '\x295', '\x296', '\x5', 'V', ',', '\x2', '\x296', 
		'\x297', '\a', ';', '\x2', '\x2', '\x297', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x298', '\x29A', '\a', '\x4', '\x2', '\x2', '\x299', '\x298', '\x3', 
		'\x2', '\x2', '\x2', '\x299', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29A', 
		'\x29B', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x29C', '\a', '\x15', '\x2', 
		'\x2', '\x29C', '\x29E', '\x5', 'V', ',', '\x2', '\x29D', '\x29F', '\a', 
		'\x4', '\x2', '\x2', '\x29E', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29E', 
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\x3', '\x2', '\x2', 
		'\x2', '\x2A0', '\x2A1', '\a', '&', '\x2', '\x2', '\x2A1', '\x2A3', '\x5', 
		'V', ',', '\x2', '\x2A2', '\x2A4', '\a', '\x4', '\x2', '\x2', '\x2A3', 
		'\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', '\x3', '\x2', '\x2', 
		'\x2', '\x2A4', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A6', 
		'\a', '\x10', '\x2', '\x2', '\x2A6', '\x2A7', '\x5', 'V', ',', '\x2', 
		'\x2A7', '[', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A9', '\a', '\x19', 
		'\x2', '\x2', '\x2A9', '\x2AA', '\x5', '\x14', '\v', '\x2', '\x2AA', '\x2AB', 
		'\a', '\x35', '\x2', '\x2', '\x2AB', '\x2AC', '\x5', 'V', ',', '\x2', 
		'\x2AC', ']', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\a', '\'', 
		'\x2', '\x2', '\x2AE', '\x2AF', '\x5', '\x8C', 'G', '\x2', '\x2AF', '\x2B0', 
		'\a', ':', '\x2', '\x2', '\x2B0', '\x2B1', '\x5', '\x14', '\v', '\x2', 
		'\x2B1', '\x2B2', '\a', ';', '\x2', '\x2', '\x2B2', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x2B3', '\x2BA', '\a', '\x38', '\x2', '\x2', '\x2B4', '\x2BB', 
		'\x5', 'V', ',', '\x2', '\x2B5', '\x2B6', '\x5', 'V', ',', '\x2', '\x2B6', 
		'\x2B7', '\a', '>', '\x2', '\x2', '\x2B7', '\x2B8', '\x5', 'V', ',', '\x2', 
		'\x2B8', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BB', '\x5', 
		'\x62', '\x32', '\x2', '\x2BA', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2BA', 
		'\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2B9', '\x3', '\x2', '\x2', 
		'\x2', '\x2BB', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', 
		'\a', '\x39', '\x2', '\x2', '\x2BD', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x2BE', '\x2BF', '\x5', 'V', ',', '\x2', '\x2BF', '\x2C0', '\a', '<', 
		'\x2', '\x2', '\x2C0', '\x2C1', '\x5', 'V', ',', '\x2', '\x2C1', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', '\x5', 'V', ',', '\x2', 
		'\x2C3', '\x2C4', '\a', '<', '\x2', '\x2', '\x2C4', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\x2C5', '\x2C6', '\a', '<', '\x2', '\x2', '\x2C6', '\x2C8', 
		'\x5', 'V', ',', '\x2', '\x2C7', '\x2BE', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C5', '\x3', 
		'\x2', '\x2', '\x2', '\x2C8', '\x63', '\x3', '\x2', '\x2', '\x2', '\x2C9', 
		'\x2D2', '\x5', '\x66', '\x34', '\x2', '\x2CA', '\x2CB', '\a', '#', '\x2', 
		'\x2', '\x2CB', '\x2CD', '\a', '=', '\x2', '\x2', '\x2CC', '\x2CA', '\x3', 
		'\x2', '\x2', '\x2', '\x2CC', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CD', 
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2D2', '\a', 'S', '\x2', 
		'\x2', '\x2CF', '\x2D2', '\x5', 'j', '\x36', '\x2', '\x2D0', '\x2D2', 
		'\a', '#', '\x2', '\x2', '\x2D1', '\x2C9', '\x3', '\x2', '\x2', '\x2', 
		'\x2D1', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2CF', '\x3', 
		'\x2', '\x2', '\x2', '\x2D1', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D2', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D6', '\x5', 'h', '\x35', 
		'\x2', '\x2D4', '\x2D6', '\x5', 'l', '\x37', '\x2', '\x2D5', '\x2D3', 
		'\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D4', '\x3', '\x2', '\x2', '\x2', 
		'\x2D6', 'g', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2DE', '\a', '.', 
		'\x2', '\x2', '\x2D8', '\x2DE', '\a', 'T', '\x2', '\x2', '\x2D9', '\x2DE', 
		'\a', 'U', '\x2', '\x2', '\x2DA', '\x2DE', '\a', 'V', '\x2', '\x2', '\x2DB', 
		'\x2DE', '\a', 'W', '\x2', '\x2', '\x2DC', '\x2DE', '\x5', '.', '\x18', 
		'\x2', '\x2DD', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2D8', 
		'\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2D9', '\x3', '\x2', '\x2', '\x2', 
		'\x2DD', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DB', '\x3', 
		'\x2', '\x2', '\x2', '\x2DD', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E3', '\x5', 'n', '\x38', 
		'\x2', '\x2E0', '\x2E3', '\x5', 't', ';', '\x2', '\x2E1', '\x2E3', '\x5', 
		'z', '>', '\x2', '\x2E2', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2E2', 
		'\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E1', '\x3', '\x2', '\x2', 
		'\x2', '\x2E3', 'k', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E9', '\a', 
		'X', '\x2', '\x2', '\x2E5', '\x2E9', '\x5', 'p', '\x39', '\x2', '\x2E6', 
		'\x2E9', '\x5', 'v', '<', '\x2', '\x2E7', '\x2E9', '\x5', '|', '?', '\x2', 
		'\x2E8', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E5', '\x3', 
		'\x2', '\x2', '\x2', '\x2E8', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E9', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\x2EB', '\a', ':', '\x2', '\x2', '\x2EB', '\x2EC', '\x5', 
		'V', ',', '\x2', '\x2EC', '\x2ED', '\a', '>', '\x2', '\x2', '\x2ED', '\x2F2', 
		'\x5', 'V', ',', '\x2', '\x2EE', '\x2EF', '\a', '>', '\x2', '\x2', '\x2EF', 
		'\x2F1', '\x5', 'V', ',', '\x2', '\x2F0', '\x2EE', '\x3', '\x2', '\x2', 
		'\x2', '\x2F1', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F0', 
		'\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F3', '\x3', '\x2', '\x2', '\x2', 
		'\x2F3', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F2', '\x3', 
		'\x2', '\x2', '\x2', '\x2F5', '\x2F6', '\a', ';', '\x2', '\x2', '\x2F6', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F8', '\a', ':', '\x2', '\x2', 
		'\x2F8', '\x2F9', '\x5', '\x66', '\x34', '\x2', '\x2F9', '\x2FA', '\a', 
		'>', '\x2', '\x2', '\x2FA', '\x2FF', '\x5', '\x66', '\x34', '\x2', '\x2FB', 
		'\x2FC', '\a', '>', '\x2', '\x2', '\x2FC', '\x2FE', '\x5', '\x66', '\x34', 
		'\x2', '\x2FD', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x301', 
		'\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FD', '\x3', '\x2', '\x2', '\x2', 
		'\x2FF', '\x300', '\x3', '\x2', '\x2', '\x2', '\x300', '\x302', '\x3', 
		'\x2', '\x2', '\x2', '\x301', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x302', 
		'\x303', '\a', ';', '\x2', '\x2', '\x303', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x304', '\x305', '\a', ':', '\x2', '\x2', '\x305', '\x308', '\a', 'S', 
		'\x2', '\x2', '\x306', '\x307', '\a', '>', '\x2', '\x2', '\x307', '\x309', 
		'\a', 'S', '\x2', '\x2', '\x308', '\x306', '\x3', '\x2', '\x2', '\x2', 
		'\x309', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x308', '\x3', 
		'\x2', '\x2', '\x2', '\x30A', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x30B', 
		'\x30C', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x30D', '\a', ';', '\x2', 
		'\x2', '\x30D', 's', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x310', '\a', 
		'\x36', '\x2', '\x2', '\x30F', '\x311', '\a', '\x4', '\x2', '\x2', '\x310', 
		'\x30F', '\x3', '\x2', '\x2', '\x2', '\x310', '\x311', '\x3', '\x2', '\x2', 
		'\x2', '\x311', '\x312', '\x3', '\x2', '\x2', '\x2', '\x312', '\x317', 
		'\x5', 'V', ',', '\x2', '\x313', '\x314', '\a', '>', '\x2', '\x2', '\x314', 
		'\x316', '\x5', 'V', ',', '\x2', '\x315', '\x313', '\x3', '\x2', '\x2', 
		'\x2', '\x316', '\x319', '\x3', '\x2', '\x2', '\x2', '\x317', '\x315', 
		'\x3', '\x2', '\x2', '\x2', '\x317', '\x318', '\x3', '\x2', '\x2', '\x2', 
		'\x318', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x319', '\x317', '\x3', 
		'\x2', '\x2', '\x2', '\x31A', '\x31C', '\a', '\x4', '\x2', '\x2', '\x31B', 
		'\x31A', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x31C', '\x3', '\x2', '\x2', 
		'\x2', '\x31C', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x31E', 
		'\a', '\x37', '\x2', '\x2', '\x31E', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x321', '\a', '\x36', '\x2', '\x2', '\x320', '\x322', '\a', 
		'\x4', '\x2', '\x2', '\x321', '\x320', '\x3', '\x2', '\x2', '\x2', '\x321', 
		'\x322', '\x3', '\x2', '\x2', '\x2', '\x322', '\x323', '\x3', '\x2', '\x2', 
		'\x2', '\x323', '\x328', '\x5', '\x66', '\x34', '\x2', '\x324', '\x325', 
		'\a', '>', '\x2', '\x2', '\x325', '\x327', '\x5', '\x66', '\x34', '\x2', 
		'\x326', '\x324', '\x3', '\x2', '\x2', '\x2', '\x327', '\x32A', '\x3', 
		'\x2', '\x2', '\x2', '\x328', '\x326', '\x3', '\x2', '\x2', '\x2', '\x328', 
		'\x329', '\x3', '\x2', '\x2', '\x2', '\x329', '\x32C', '\x3', '\x2', '\x2', 
		'\x2', '\x32A', '\x328', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32D', 
		'\a', '\x4', '\x2', '\x2', '\x32C', '\x32B', '\x3', '\x2', '\x2', '\x2', 
		'\x32C', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x32E', '\x3', 
		'\x2', '\x2', '\x2', '\x32E', '\x32F', '\a', '\x37', '\x2', '\x2', '\x32F', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x330', '\x331', '\a', '\x36', '\x2', 
		'\x2', '\x331', '\x332', '\a', 'S', '\x2', '\x2', '\x332', '\x333', '\a', 
		'?', '\x2', '\x2', '\x333', '\x334', '\a', 'S', '\x2', '\x2', '\x334', 
		'\x335', '\a', '\x37', '\x2', '\x2', '\x335', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x336', '\x338', '\a', '\x36', '\x2', '\x2', '\x337', '\x339', 
		'\a', '\x4', '\x2', '\x2', '\x338', '\x337', '\x3', '\x2', '\x2', '\x2', 
		'\x338', '\x339', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33A', '\x3', 
		'\x2', '\x2', '\x2', '\x33A', '\x33F', '\x5', '~', '@', '\x2', '\x33B', 
		'\x33C', '\a', '>', '\x2', '\x2', '\x33C', '\x33E', '\x5', '~', '@', '\x2', 
		'\x33D', '\x33B', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x341', '\x3', 
		'\x2', '\x2', '\x2', '\x33F', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x33F', 
		'\x340', '\x3', '\x2', '\x2', '\x2', '\x340', '\x343', '\x3', '\x2', '\x2', 
		'\x2', '\x341', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x342', '\x344', 
		'\a', '\x4', '\x2', '\x2', '\x343', '\x342', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x344', '\x3', '\x2', '\x2', '\x2', '\x344', '\x345', '\x3', 
		'\x2', '\x2', '\x2', '\x345', '\x346', '\a', '\x37', '\x2', '\x2', '\x346', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x347', '\x349', '\a', '\x36', '\x2', 
		'\x2', '\x348', '\x34A', '\a', '\x4', '\x2', '\x2', '\x349', '\x348', 
		'\x3', '\x2', '\x2', '\x2', '\x349', '\x34A', '\x3', '\x2', '\x2', '\x2', 
		'\x34A', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x350', '\x5', 
		'\x80', '\x41', '\x2', '\x34C', '\x34D', '\a', '>', '\x2', '\x2', '\x34D', 
		'\x34F', '\x5', '\x80', '\x41', '\x2', '\x34E', '\x34C', '\x3', '\x2', 
		'\x2', '\x2', '\x34F', '\x352', '\x3', '\x2', '\x2', '\x2', '\x350', '\x34E', 
		'\x3', '\x2', '\x2', '\x2', '\x350', '\x351', '\x3', '\x2', '\x2', '\x2', 
		'\x351', '\x354', '\x3', '\x2', '\x2', '\x2', '\x352', '\x350', '\x3', 
		'\x2', '\x2', '\x2', '\x353', '\x355', '\a', '\x4', '\x2', '\x2', '\x354', 
		'\x353', '\x3', '\x2', '\x2', '\x2', '\x354', '\x355', '\x3', '\x2', '\x2', 
		'\x2', '\x355', '\x356', '\x3', '\x2', '\x2', '\x2', '\x356', '\x357', 
		'\a', '\x37', '\x2', '\x2', '\x357', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x358', '\x359', '\x5', 'V', ',', '\x2', '\x359', '\x35A', '\a', '?', 
		'\x2', '\x2', '\x35A', '\x35B', '\x5', 'V', ',', '\x2', '\x35B', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x35C', '\x35D', '\x5', '\x66', '\x34', '\x2', 
		'\x35D', '\x35E', '\a', '?', '\x2', '\x2', '\x35E', '\x35F', '\x5', '\x66', 
		'\x34', '\x2', '\x35F', '\x81', '\x3', '\x2', '\x2', '\x2', '\x360', '\x361', 
		'\t', '\x3', '\x2', '\x2', '\x361', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x362', '\x366', '\x5', '\x86', '\x44', '\x2', '\x363', '\x366', '\x5', 
		'\x88', '\x45', '\x2', '\x364', '\x366', '\x5', '\x8A', '\x46', '\x2', 
		'\x365', '\x362', '\x3', '\x2', '\x2', '\x2', '\x365', '\x363', '\x3', 
		'\x2', '\x2', '\x2', '\x365', '\x364', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x367', '\x368', '\t', '\x4', '\x2', 
		'\x2', '\x368', '\x87', '\x3', '\x2', '\x2', '\x2', '\x369', '\x36A', 
		'\t', '\x5', '\x2', '\x2', '\x36A', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x36B', '\x36C', '\t', '\x6', '\x2', '\x2', '\x36C', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x36D', '\x375', '\a', '/', '\x2', '\x2', '\x36E', '\x375', 
		'\x5', '\x8E', 'H', '\x2', '\x36F', '\x375', '\a', 'R', '\x2', '\x2', 
		'\x370', '\x371', '\a', 'R', '\x2', '\x2', '\x371', '\x375', '\x5', '\x90', 
		'I', '\x2', '\x372', '\x375', '\x5', '\x92', 'J', '\x2', '\x373', '\x375', 
		'\x5', '\x94', 'K', '\x2', '\x374', '\x36D', '\x3', '\x2', '\x2', '\x2', 
		'\x374', '\x36E', '\x3', '\x2', '\x2', '\x2', '\x374', '\x36F', '\x3', 
		'\x2', '\x2', '\x2', '\x374', '\x370', '\x3', '\x2', '\x2', '\x2', '\x374', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x374', '\x373', '\x3', '\x2', '\x2', 
		'\x2', '\x375', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x376', '\x377', 
		'\t', '\a', '\x2', '\x2', '\x377', '\x378', '\x5', '\x90', 'I', '\x2', 
		'\x378', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x379', '\x37A', '\a', 'G', 
		'\x2', '\x2', '\x37A', '\x37F', '\x5', '\x8C', 'G', '\x2', '\x37B', '\x37C', 
		'\a', '>', '\x2', '\x2', '\x37C', '\x37E', '\x5', '\x8C', 'G', '\x2', 
		'\x37D', '\x37B', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x381', '\x3', 
		'\x2', '\x2', '\x2', '\x37F', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x37F', 
		'\x380', '\x3', '\x2', '\x2', '\x2', '\x380', '\x382', '\x3', '\x2', '\x2', 
		'\x2', '\x381', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x382', '\x383', 
		'\a', 'H', '\x2', '\x2', '\x383', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x384', '\x385', '\a', ':', '\x2', '\x2', '\x385', '\x388', '\x5', '\x8C', 
		'G', '\x2', '\x386', '\x387', '\a', '>', '\x2', '\x2', '\x387', '\x389', 
		'\x5', '\x8C', 'G', '\x2', '\x388', '\x386', '\x3', '\x2', '\x2', '\x2', 
		'\x389', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x388', '\x3', 
		'\x2', '\x2', '\x2', '\x38A', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x38C', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x38D', '\a', ';', '\x2', 
		'\x2', '\x38D', '\x93', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x38F', 
		'\a', ':', '\x2', '\x2', '\x38F', '\x394', '\x5', '\x8C', 'G', '\x2', 
		'\x390', '\x391', '\a', '>', '\x2', '\x2', '\x391', '\x393', '\x5', '\x8C', 
		'G', '\x2', '\x392', '\x390', '\x3', '\x2', '\x2', '\x2', '\x393', '\x396', 
		'\x3', '\x2', '\x2', '\x2', '\x394', '\x392', '\x3', '\x2', '\x2', '\x2', 
		'\x394', '\x395', '\x3', '\x2', '\x2', '\x2', '\x395', '\x397', '\x3', 
		'\x2', '\x2', '\x2', '\x396', '\x394', '\x3', '\x2', '\x2', '\x2', '\x397', 
		'\x398', '\a', '\x35', '\x2', '\x2', '\x398', '\x399', '\x5', '\x8C', 
		'G', '\x2', '\x399', '\x39A', '\a', ';', '\x2', '\x2', '\x39A', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x9C', '\x9E', '\xA4', '\xB5', '\xB7', 
		'\xCD', '\xD1', '\xD5', '\xD8', '\xDC', '\xE0', '\xE9', '\xF7', '\xFA', 
		'\x103', '\x107', '\x10E', '\x11F', '\x123', '\x126', '\x12C', '\x138', 
		'\x13C', '\x140', '\x145', '\x148', '\x14B', '\x14F', '\x153', '\x164', 
		'\x169', '\x179', '\x17F', '\x185', '\x187', '\x193', '\x198', '\x19A', 
		'\x1A6', '\x1AF', '\x1B1', '\x1BE', '\x1C3', '\x1CE', '\x1D1', '\x1D4', 
		'\x1D7', '\x1E2', '\x1E6', '\x1EA', '\x1F3', '\x1FF', '\x20F', '\x215', 
		'\x224', '\x227', '\x250', '\x25C', '\x260', '\x268', '\x27E', '\x28F', 
		'\x291', '\x299', '\x29E', '\x2A3', '\x2BA', '\x2C7', '\x2CC', '\x2D1', 
		'\x2D5', '\x2DD', '\x2E2', '\x2E8', '\x2F2', '\x2FF', '\x30A', '\x310', 
		'\x317', '\x31B', '\x321', '\x328', '\x32C', '\x338', '\x33F', '\x343', 
		'\x349', '\x350', '\x354', '\x365', '\x374', '\x37F', '\x38A', '\x394',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
