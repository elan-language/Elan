//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/GitHub/Elan/Parser/Elan.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ElanParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NL=1, SINGLE_LINE_COMMENT=2, COMMENT_MARKER=3, ABSTRACT=4, AND=5, AS=6, 
		ASSERT=7, CALL=8, CASE=9, CATCH=10, CLASS=11, CONSTANT=12, CONSTRUCTOR=13, 
		CURRY=14, DEFAULT=15, DIV=16, ELSE=17, END=18, ENUM=19, FOR=20, FOREACH=21, 
		FROM=22, FUNCTION=23, GLOBAL=24, IF=25, IMMUTABLE=26, IN=27, INHERITS=28, 
		INPUT=29, LAMBDA=30, LET=31, MAIN=32, MOD=33, NEW=34, NOT=35, OF=36, IS=37, 
		OR=38, OUT=39, PARTIAL=40, PRINT=41, PRIVATE=42, PROCEDURE=43, PROPERTY=44, 
		REPEAT=45, RETURN=46, SELF=47, SET=48, STEP=49, SWITCH=50, SYSTEM=51, 
		TEST=52, THEN=53, THROW=54, TO=55, TRY=56, UNTIL=57, VAR=58, WHILE=59, 
		WITH=60, XOR=61, BOOL_VALUE=62, VALUE_TYPE=63, ARRAY=64, LIST=65, DICTIONARY=66, 
		ITERABLE=67, EQUALS=68, ARROW=69, OPEN_BRACE=70, CLOSE_BRACE=71, OPEN_SQ_BRACKET=72, 
		CLOSE_SQ_BRACKET=73, OPEN_BRACKET=74, CLOSE_BRACKET=75, DOUBLE_DOT=76, 
		DOT=77, COMMA=78, COLON=79, PLUS=80, MINUS=81, MULT=82, DIVIDE=83, POWER=84, 
		LT=85, GT=86, LE=87, GE=88, IS_NOT=89, TYPENAME=90, IDENTIFIER=91, LITERAL_INTEGER=92, 
		LITERAL_FLOAT=93, LITERAL_CHAR=94, LITERAL_STRING=95, WHITESPACES=96, 
		NEWLINE=97, WS=98;
	public const int
		RULE_file = 0, RULE_main = 1, RULE_test = 2, RULE_statementBlock = 3, 
		RULE_testStatement = 4, RULE_assert = 5, RULE_callStatement = 6, RULE_throwException = 7, 
		RULE_printStatement = 8, RULE_input = 9, RULE_varDef = 10, RULE_assignment = 11, 
		RULE_inlineAsignment = 12, RULE_assignableValue = 13, RULE_procedureCall = 14, 
		RULE_functionCall = 15, RULE_systemCall = 16, RULE_argument = 17, RULE_argumentList = 18, 
		RULE_procedureDef = 19, RULE_procedureSignature = 20, RULE_procedureParameterList = 21, 
		RULE_parameterList = 22, RULE_parameter = 23, RULE_procedureParameter = 24, 
		RULE_functionDef = 25, RULE_functionWithBody = 26, RULE_expressionFunction = 27, 
		RULE_functionSignature = 28, RULE_constantDef = 29, RULE_enumDef = 30, 
		RULE_enumType = 31, RULE_enumValue = 32, RULE_classDef = 33, RULE_mutableClass = 34, 
		RULE_abstractClass = 35, RULE_immutableClass = 36, RULE_abstractImmutableClass = 37, 
		RULE_inherits = 38, RULE_property = 39, RULE_constructor = 40, RULE_newInstance = 41, 
		RULE_withClause = 42, RULE_proceduralControlFlow = 43, RULE_if = 44, RULE_for = 45, 
		RULE_foreach = 46, RULE_while = 47, RULE_repeat = 48, RULE_try = 49, RULE_switch = 50, 
		RULE_case = 51, RULE_caseDefault = 52, RULE_expression = 53, RULE_bracketedExpression = 54, 
		RULE_ifExpression = 55, RULE_lambda = 56, RULE_index = 57, RULE_range = 58, 
		RULE_value = 59, RULE_scopeQualifier = 60, RULE_literal = 61, RULE_literalValue = 62, 
		RULE_dataStructureDefinition = 63, RULE_literalDataStructure = 64, RULE_tupleDefinition = 65, 
		RULE_literalTuple = 66, RULE_deconstructedTuple = 67, RULE_listDefinition = 68, 
		RULE_literalList = 69, RULE_listDecomp = 70, RULE_arrayDefinition = 71, 
		RULE_dictionaryDefinition = 72, RULE_literalDictionary = 73, RULE_kvp = 74, 
		RULE_literalKvp = 75, RULE_unaryOp = 76, RULE_binaryOp = 77, RULE_arithmeticOp = 78, 
		RULE_logicalOp = 79, RULE_conditionalOp = 80, RULE_type = 81, RULE_dataStructureType = 82, 
		RULE_genericSpecifier = 83, RULE_tupleType = 84, RULE_typeList = 85, RULE_funcType = 86;
	public static readonly string[] ruleNames = {
		"file", "main", "test", "statementBlock", "testStatement", "assert", "callStatement", 
		"throwException", "printStatement", "input", "varDef", "assignment", "inlineAsignment", 
		"assignableValue", "procedureCall", "functionCall", "systemCall", "argument", 
		"argumentList", "procedureDef", "procedureSignature", "procedureParameterList", 
		"parameterList", "parameter", "procedureParameter", "functionDef", "functionWithBody", 
		"expressionFunction", "functionSignature", "constantDef", "enumDef", "enumType", 
		"enumValue", "classDef", "mutableClass", "abstractClass", "immutableClass", 
		"abstractImmutableClass", "inherits", "property", "constructor", "newInstance", 
		"withClause", "proceduralControlFlow", "if", "for", "foreach", "while", 
		"repeat", "try", "switch", "case", "caseDefault", "expression", "bracketedExpression", 
		"ifExpression", "lambda", "index", "range", "value", "scopeQualifier", 
		"literal", "literalValue", "dataStructureDefinition", "literalDataStructure", 
		"tupleDefinition", "literalTuple", "deconstructedTuple", "listDefinition", 
		"literalList", "listDecomp", "arrayDefinition", "dictionaryDefinition", 
		"literalDictionary", "kvp", "literalKvp", "unaryOp", "binaryOp", "arithmeticOp", 
		"logicalOp", "conditionalOp", "type", "dataStructureType", "genericSpecifier", 
		"tupleType", "typeList", "funcType"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#'", "'abstract'", "'and'", "'as'", "'assert'", "'call'", 
		"'case'", "'catch'", "'class'", "'constant'", "'constructor'", "'curry'", 
		"'default'", "'div'", "'else'", "'end'", "'enum'", "'for'", "'foreach'", 
		"'from'", "'function'", "'global'", "'if'", "'immutable'", "'in'", "'inherits'", 
		"'input'", "'lambda'", "'let'", "'main'", "'mod'", "'new'", "'not'", "'of'", 
		"'is'", "'or'", "'out'", "'partial'", "'print'", "'private'", "'procedure'", 
		"'property'", "'repeat'", "'return'", "'self'", "'set'", "'step'", "'switch'", 
		"'system'", "'test'", "'then'", "'throw'", "'to'", "'try'", "'until'", 
		"'var'", "'while'", "'with'", "'xor'", null, null, "'Array'", "'List'", 
		"'Dictionary'", "'Iter'", "'='", "'->'", "'{'", "'}'", "'['", "']'", "'('", 
		"')'", "'..'", "'.'", "','", "':'", "'+'", "'-'", "'*'", "'/'", "'^'", 
		"'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NL", "SINGLE_LINE_COMMENT", "COMMENT_MARKER", "ABSTRACT", "AND", 
		"AS", "ASSERT", "CALL", "CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", 
		"CURRY", "DEFAULT", "DIV", "ELSE", "END", "ENUM", "FOR", "FOREACH", "FROM", 
		"FUNCTION", "GLOBAL", "IF", "IMMUTABLE", "IN", "INHERITS", "INPUT", "LAMBDA", 
		"LET", "MAIN", "MOD", "NEW", "NOT", "OF", "IS", "OR", "OUT", "PARTIAL", 
		"PRINT", "PRIVATE", "PROCEDURE", "PROPERTY", "REPEAT", "RETURN", "SELF", 
		"SET", "STEP", "SWITCH", "SYSTEM", "TEST", "THEN", "THROW", "TO", "TRY", 
		"UNTIL", "VAR", "WHILE", "WITH", "XOR", "BOOL_VALUE", "VALUE_TYPE", "ARRAY", 
		"LIST", "DICTIONARY", "ITERABLE", "EQUALS", "ARROW", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"DOUBLE_DOT", "DOT", "COMMA", "COLON", "PLUS", "MINUS", "MULT", "DIVIDE", 
		"POWER", "LT", "GT", "LE", "GE", "IS_NOT", "TYPENAME", "IDENTIFIER", "LITERAL_INTEGER", 
		"LITERAL_FLOAT", "LITERAL_CHAR", "LITERAL_STRING", "WHITESPACES", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Elan.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ElanParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElanParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElanParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ElanParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext[] enumDef() {
			return GetRuleContexts<EnumDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef(int i) {
			return GetRuleContext<EnumDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 181;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 174;
						main();
						}
						break;
					case 2:
						{
						State = 175;
						procedureDef();
						}
						break;
					case 3:
						{
						State = 176;
						functionDef();
						}
						break;
					case 4:
						{
						State = 177;
						constantDef();
						}
						break;
					case 5:
						{
						State = 178;
						enumDef();
						}
						break;
					case 6:
						{
						State = 179;
						classDef();
						}
						break;
					case 7:
						{
						State = 180;
						test();
						}
						break;
					}
					} 
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 186;
				Match(NL);
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 192;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(ElanParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(ElanParser.MAIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(NL);
			State = 195;
			Match(MAIN);
			State = 196;
			statementBlock();
			State = 197;
			Match(NL);
			State = 198;
			Match(END);
			State = 199;
			Match(MAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEST() { return GetTokens(ElanParser.TEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEST(int i) {
			return GetToken(ElanParser.TEST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestStatementContext[] testStatement() {
			return GetRuleContexts<TestStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestStatementContext testStatement(int i) {
			return GetRuleContext<TestStatementContext>(i);
		}
		public TestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestContext test() {
		TestContext _localctx = new TestContext(Context, State);
		EnterRule(_localctx, 4, RULE_test);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(NL);
			State = 202;
			Match(TEST);
			State = 203;
			Match(IDENTIFIER);
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 204;
					testStatement();
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 210;
			Match(NL);
			State = 211;
			Match(END);
			State = 212;
			Match(TEST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext[] proceduralControlFlow() {
			return GetRuleContexts<ProceduralControlFlowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext proceduralControlFlow(int i) {
			return GetRuleContext<ProceduralControlFlowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext[] throwException() {
			return GetRuleContexts<ThrowExceptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException(int i) {
			return GetRuleContext<ThrowExceptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext[] printStatement() {
			return GetRuleContexts<PrintStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement(int i) {
			return GetRuleContext<PrintStatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 220;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 214;
						varDef();
						}
						break;
					case 2:
						{
						State = 215;
						assignment();
						}
						break;
					case 3:
						{
						State = 216;
						proceduralControlFlow();
						}
						break;
					case 4:
						{
						State = 217;
						callStatement();
						}
						break;
					case 5:
						{
						State = 218;
						throwException();
						}
						break;
					case 6:
						{
						State = 219;
						printStatement();
						}
						break;
					}
					} 
				}
				State = 224;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssertContext assert() {
			return GetRuleContext<AssertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef() {
			return GetRuleContext<VarDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public TestStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestStatementContext testStatement() {
		TestStatementContext _localctx = new TestStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_testStatement);
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				assert();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226;
				varDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227;
				callStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(ElanParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(ElanParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AssertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertContext assert() {
		AssertContext _localctx = new AssertContext(Context, State);
		EnterRule(_localctx, 10, RULE_assert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(ASSERT);
			State = 231;
			expression(0);
			State = 232;
			Match(IS);
			State = 233;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(ElanParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(NL);
			State = 236;
			Match(CALL);
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 237;
				procedureCall();
				}
				break;
			case 2:
				{
				{
				State = 238;
				assignableValue();
				State = 239;
				Match(DOT);
				State = 240;
				procedureCall();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(ElanParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public ThrowExceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwException; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowException(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExceptionContext throwException() {
		ThrowExceptionContext _localctx = new ThrowExceptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_throwException);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(NL);
			State = 245;
			Match(THROW);
			State = 246;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==LITERAL_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ElanParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(NL);
			State = 249;
			Match(PRINT);
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 250;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(ElanParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 18, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(INPUT);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LITERAL_STRING) {
				{
				State = 254;
				Match(LITERAL_STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ElanParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ElanParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemCallContext systemCall() {
			return GetRuleContext<SystemCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(NL);
			State = 258;
			Match(VAR);
			State = 259;
			assignableValue();
			State = 260;
			Match(SET);
			State = 261;
			Match(TO);
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case DEFAULT:
			case GLOBAL:
			case IF:
			case NEW:
			case NOT:
			case SELF:
			case BOOL_VALUE:
			case ARRAY:
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case MINUS:
			case TYPENAME:
			case IDENTIFIER:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
			case LITERAL_STRING:
				{
				State = 262;
				expression(0);
				}
				break;
			case SYSTEM:
				{
				State = 263;
				systemCall();
				}
				break;
			case INPUT:
				{
				State = 264;
				input();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ElanParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemCallContext systemCall() {
			return GetRuleContext<SystemCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(NL);
			State = 268;
			Match(SET);
			State = 269;
			assignableValue();
			State = 270;
			Match(TO);
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case DEFAULT:
			case GLOBAL:
			case IF:
			case NEW:
			case NOT:
			case SELF:
			case BOOL_VALUE:
			case ARRAY:
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case MINUS:
			case TYPENAME:
			case IDENTIFIER:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
			case LITERAL_STRING:
				{
				State = 271;
				expression(0);
				}
				break;
			case SYSTEM:
				{
				State = 272;
				systemCall();
				}
				break;
			case INPUT:
				{
				State = 273;
				input();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAsignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ElanParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InlineAsignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAsignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineAsignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineAsignmentContext inlineAsignment() {
		InlineAsignmentContext _localctx = new InlineAsignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_inlineAsignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			assignableValue();
			State = 277;
			Match(SET);
			State = 278;
			Match(TO);
			State = 279;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeconstructedTupleContext deconstructedTuple() {
			return GetRuleContext<DeconstructedTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDecompContext listDecomp() {
			return GetRuleContext<ListDecompContext>(0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableValueContext assignableValue() {
		AssignableValueContext _localctx = new AssignableValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignableValue);
		int _la;
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL:
			case SELF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SELF) {
					{
					State = 281;
					scopeQualifier();
					}
				}

				State = 284;
				Match(IDENTIFIER);
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_SQ_BRACKET) {
					{
					State = 285;
					index();
					}
				}

				}
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 288;
				deconstructedTuple();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 289;
				listDecomp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureCallContext procedureCall() {
		ProcedureCallContext _localctx = new ProcedureCallContext(Context, State);
		EnterRule(_localctx, 28, RULE_procedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SELF) {
				{
				State = 292;
				scopeQualifier();
				}
			}

			State = 295;
			Match(IDENTIFIER);
			State = 296;
			Match(OPEN_BRACKET);
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611826808579457026L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4227990593L) != 0)) {
				{
				State = 297;
				argumentList();
				}
			}

			State = 300;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SELF) {
				{
				State = 302;
				scopeQualifier();
				}
			}

			State = 305;
			Match(IDENTIFIER);
			State = 306;
			Match(OPEN_BRACKET);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611826808579457026L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4227990593L) != 0)) {
				{
				State = 307;
				argumentList();
				}
			}

			State = 310;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(ElanParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public SystemCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystemCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SystemCallContext systemCall() {
		SystemCallContext _localctx = new SystemCallContext(Context, State);
		EnterRule(_localctx, 32, RULE_systemCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(SYSTEM);
			State = 313;
			Match(DOT);
			State = 314;
			Match(IDENTIFIER);
			State = 315;
			Match(OPEN_BRACKET);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611826808579457026L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4227990593L) != 0)) {
				{
				State = 316;
				argumentList();
				}
			}

			State = 319;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 34, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case DEFAULT:
			case GLOBAL:
			case IF:
			case NEW:
			case NOT:
			case SELF:
			case BOOL_VALUE:
			case ARRAY:
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case MINUS:
			case TYPENAME:
			case IDENTIFIER:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
			case LITERAL_STRING:
				{
				State = 321;
				expression(0);
				}
				break;
			case LAMBDA:
				{
				State = 322;
				lambda();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 36, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			argument();
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 326;
				Match(COMMA);
				State = 327;
				argument();
				}
				}
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ProcedureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefContext procedureDef() {
		ProcedureDefContext _localctx = new ProcedureDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_procedureDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(NL);
			State = 334;
			Match(PROCEDURE);
			State = 335;
			procedureSignature();
			State = 336;
			statementBlock();
			State = 337;
			Match(NL);
			State = 338;
			Match(END);
			State = 339;
			Match(PROCEDURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterListContext procedureParameterList() {
			return GetRuleContext<ProcedureParameterListContext>(0);
		}
		public ProcedureSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSignatureContext procedureSignature() {
		ProcedureSignatureContext _localctx = new ProcedureSignatureContext(Context, State);
		EnterRule(_localctx, 40, RULE_procedureSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(IDENTIFIER);
			State = 342;
			Match(OPEN_BRACKET);
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT || _la==IDENTIFIER) {
				{
				State = 343;
				procedureParameterList();
				}
			}

			State = 346;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ProcedureParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterListContext procedureParameterList() {
		ProcedureParameterListContext _localctx = new ProcedureParameterListContext(Context, State);
		EnterRule(_localctx, 42, RULE_procedureParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			procedureParameter();
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 349;
				Match(COMMA);
				State = 350;
				procedureParameter();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			parameter();
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 357;
				Match(COMMA);
				State = 358;
				parameter();
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 46, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(IDENTIFIER);
			State = 365;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(ElanParser.OUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 48, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 367;
				Match(OUT);
				}
			}

			State = 370;
			Match(IDENTIFIER);
			State = 371;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionWithBodyContext functionWithBody() {
			return GetRuleContext<FunctionWithBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionFunctionContext expressionFunction() {
			return GetRuleContext<ExpressionFunctionContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionDef);
		try {
			State = 375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				functionWithBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374;
				expressionFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionWithBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElanParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public FunctionWithBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionWithBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionWithBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionWithBodyContext functionWithBody() {
		FunctionWithBodyContext _localctx = new FunctionWithBodyContext(Context, State);
		EnterRule(_localctx, 52, RULE_functionWithBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(NL);
			State = 378;
			Match(FUNCTION);
			State = 379;
			functionSignature();
			State = 380;
			statementBlock();
			State = 381;
			Match(NL);
			State = 382;
			Match(RETURN);
			State = 383;
			expression(0);
			State = 384;
			Match(NL);
			State = 385;
			Match(END);
			State = 386;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ElanParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionFunctionContext expressionFunction() {
		ExpressionFunctionContext _localctx = new ExpressionFunctionContext(Context, State);
		EnterRule(_localctx, 54, RULE_expressionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			Match(NL);
			State = 389;
			Match(FUNCTION);
			State = 390;
			functionSignature();
			State = 391;
			Match(ARROW);
			State = 392;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ElanParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(IDENTIFIER);
			State = 395;
			Match(OPEN_BRACKET);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 396;
				parameterList();
				}
			}

			State = 399;
			Match(CLOSE_BRACKET);
			State = 400;
			Match(AS);
			State = 401;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ElanParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ElanParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		public ConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefContext constantDef() {
		ConstantDefContext _localctx = new ConstantDefContext(Context, State);
		EnterRule(_localctx, 58, RULE_constantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(NL);
			State = 404;
			Match(CONSTANT);
			State = 405;
			Match(IDENTIFIER);
			State = 406;
			Match(SET);
			State = 407;
			Match(TO);
			State = 410;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case TYPENAME:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
			case LITERAL_STRING:
				{
				State = 408;
				literal();
				}
				break;
			case NEW:
			case IDENTIFIER:
				{
				State = 409;
				newInstance();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENUM() { return GetTokens(ElanParser.ENUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM(int i) {
			return GetToken(ElanParser.ENUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 60, RULE_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(NL);
			State = 413;
			Match(ENUM);
			State = 414;
			enumType();
			State = 415;
			Match(NL);
			State = 416;
			Match(IDENTIFIER);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 417;
				Match(COMMA);
				State = 418;
				Match(IDENTIFIER);
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 424;
			Match(NL);
			State = 425;
			Match(END);
			State = 426;
			Match(ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_enumType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			Match(TYPENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 64, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			enumType();
			State = 431;
			Match(DOT);
			State = 432;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MutableClassContext mutableClass() {
			return GetRuleContext<MutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractClassContext abstractClass() {
			return GetRuleContext<AbstractClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmutableClassContext immutableClass() {
			return GetRuleContext<ImmutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractImmutableClassContext abstractImmutableClass() {
			return GetRuleContext<AbstractImmutableClassContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 66, RULE_classDef);
		try {
			State = 438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				mutableClass();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				abstractClass();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436;
				immutableClass();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 437;
				abstractImmutableClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		public MutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MutableClassContext mutableClass() {
		MutableClassContext _localctx = new MutableClassContext(Context, State);
		EnterRule(_localctx, 68, RULE_mutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(NL);
			State = 441;
			Match(CLASS);
			State = 442;
			Match(TYPENAME);
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 443;
				inherits();
				}
			}

			State = 446;
			constructor();
			State = 452;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 450;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						State = 447;
						property();
						}
						break;
					case 2:
						{
						State = 448;
						functionDef();
						}
						break;
					case 3:
						{
						State = 449;
						procedureDef();
						}
						break;
					}
					} 
				}
				State = 454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 455;
			Match(NL);
			State = 456;
			Match(END);
			State = 457;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext[] procedureSignature() {
			return GetRuleContexts<ProcedureSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature(int i) {
			return GetRuleContext<ProcedureSignatureContext>(i);
		}
		public AbstractClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractClassContext abstractClass() {
		AbstractClassContext _localctx = new AbstractClassContext(Context, State);
		EnterRule(_localctx, 70, RULE_abstractClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(NL);
			State = 460;
			Match(ABSTRACT);
			State = 461;
			Match(CLASS);
			State = 462;
			Match(TYPENAME);
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 463;
				inherits();
				}
			}

			State = 475;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 473;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						State = 466;
						property();
						}
						break;
					case 2:
						{
						State = 467;
						Match(NL);
						State = 468;
						Match(FUNCTION);
						State = 469;
						functionSignature();
						}
						break;
					case 3:
						{
						State = 470;
						Match(NL);
						State = 471;
						Match(PROCEDURE);
						State = 472;
						procedureSignature();
						}
						break;
					}
					} 
				}
				State = 477;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 478;
			Match(NL);
			State = 479;
			Match(END);
			State = 480;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmutableClassContext immutableClass() {
		ImmutableClassContext _localctx = new ImmutableClassContext(Context, State);
		EnterRule(_localctx, 72, RULE_immutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(NL);
			State = 483;
			Match(IMMUTABLE);
			State = 484;
			Match(CLASS);
			State = 485;
			Match(TYPENAME);
			State = 487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 486;
				inherits();
				}
			}

			State = 489;
			constructor();
			State = 494;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 492;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						State = 490;
						property();
						}
						break;
					case 2:
						{
						State = 491;
						functionDef();
						}
						break;
					}
					} 
				}
				State = 496;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			State = 497;
			Match(NL);
			State = 498;
			Match(END);
			State = 499;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		public AbstractImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractImmutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractImmutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractImmutableClassContext abstractImmutableClass() {
		AbstractImmutableClassContext _localctx = new AbstractImmutableClassContext(Context, State);
		EnterRule(_localctx, 74, RULE_abstractImmutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			Match(NL);
			State = 502;
			Match(ABSTRACT);
			State = 503;
			Match(IMMUTABLE);
			State = 504;
			Match(CLASS);
			State = 505;
			Match(TYPENAME);
			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 506;
				inherits();
				}
			}

			State = 515;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 513;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
					case 1:
						{
						State = 509;
						property();
						}
						break;
					case 2:
						{
						State = 510;
						Match(NL);
						State = 511;
						Match(FUNCTION);
						State = 512;
						functionSignature();
						}
						break;
					}
					} 
				}
				State = 517;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 518;
			Match(NL);
			State = 519;
			Match(END);
			State = 520;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(ElanParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public InheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritsContext inherits() {
		InheritsContext _localctx = new InheritsContext(Context, State);
		EnterRule(_localctx, 76, RULE_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(INHERITS);
			State = 523;
			type();
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 524;
				Match(COMMA);
				State = 525;
				type();
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(ElanParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ElanParser.PRIVATE, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 78, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(NL);
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 532;
				Match(PRIVATE);
				}
			}

			State = 535;
			Match(PROPERTY);
			State = 536;
			Match(IDENTIFIER);
			State = 537;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRUCTOR() { return GetTokens(ElanParser.CONSTRUCTOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(ElanParser.CONSTRUCTOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 80, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(NL);
			State = 540;
			Match(CONSTRUCTOR);
			State = 541;
			Match(OPEN_BRACKET);
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 542;
				parameterList();
				}
			}

			State = 545;
			Match(CLOSE_BRACKET);
			State = 546;
			statementBlock();
			State = 547;
			Match(NL);
			State = 548;
			Match(END);
			State = 549;
			Match(CONSTRUCTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ElanParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(Context, State);
		EnterRule(_localctx, 82, RULE_newInstance);
		int _la;
		try {
			State = 563;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551;
				Match(NEW);
				State = 552;
				type();
				State = 553;
				Match(OPEN_BRACKET);
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611826808579457026L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4227990593L) != 0)) {
					{
					State = 554;
					argumentList();
					}
				}

				State = 557;
				Match(CLOSE_BRACKET);
				State = 559;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 558;
					withClause();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 561;
				Match(IDENTIFIER);
				State = 562;
				withClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(ElanParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InlineAsignmentContext[] inlineAsignment() {
			return GetRuleContexts<InlineAsignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineAsignmentContext inlineAsignment(int i) {
			return GetRuleContext<InlineAsignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(WITH);
			State = 566;
			Match(OPEN_BRACE);
			State = 567;
			inlineAsignment();
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 568;
				Match(COMMA);
				State = 569;
				inlineAsignment();
				}
				}
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 575;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduralControlFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachContext @foreach() {
			return GetRuleContext<ForeachContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryContext @try() {
			return GetRuleContext<TryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ProceduralControlFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proceduralControlFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProceduralControlFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProceduralControlFlowContext proceduralControlFlow() {
		ProceduralControlFlowContext _localctx = new ProceduralControlFlowContext(Context, State);
		EnterRule(_localctx, 86, RULE_proceduralControlFlow);
		try {
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 577;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 578;
				@for();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 579;
				@foreach();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 580;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 581;
				repeat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 582;
				@try();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 583;
				@switch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(ElanParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(ElanParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(ElanParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(ElanParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(ElanParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(ElanParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 88, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(NL);
			State = 587;
			Match(IF);
			State = 588;
			expression(0);
			State = 589;
			Match(THEN);
			State = 590;
			statementBlock();
			State = 600;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 591;
					Match(NL);
					State = 592;
					Match(ELSE);
					State = 593;
					Match(IF);
					State = 594;
					expression(0);
					State = 595;
					Match(THEN);
					State = 596;
					statementBlock();
					}
					} 
				}
				State = 602;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			State = 606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 603;
				Match(NL);
				State = 604;
				Match(ELSE);
				State = 605;
				statementBlock();
				}
				break;
			}
			State = 608;
			Match(NL);
			State = 609;
			Match(END);
			State = 610;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(ElanParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(ElanParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(ElanParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(ElanParser.STEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 90, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(NL);
			State = 613;
			Match(FOR);
			State = 614;
			Match(IDENTIFIER);
			State = 615;
			Match(FROM);
			State = 616;
			expression(0);
			State = 617;
			Match(TO);
			State = 618;
			expression(0);
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 619;
				Match(STEP);
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 620;
					Match(MINUS);
					}
				}

				State = 623;
				Match(LITERAL_INTEGER);
				}
			}

			State = 626;
			statementBlock();
			State = 627;
			Match(NL);
			State = 628;
			Match(END);
			State = 629;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOREACH() { return GetTokens(ElanParser.FOREACH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH(int i) {
			return GetToken(ElanParser.FOREACH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ForeachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachContext @foreach() {
		ForeachContext _localctx = new ForeachContext(Context, State);
		EnterRule(_localctx, 92, RULE_foreach);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(NL);
			State = 632;
			Match(FOREACH);
			State = 633;
			Match(IDENTIFIER);
			State = 634;
			Match(IN);
			State = 635;
			expression(0);
			State = 636;
			statementBlock();
			State = 637;
			Match(NL);
			State = 638;
			Match(END);
			State = 639;
			Match(FOREACH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(ElanParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(ElanParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 94, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			Match(NL);
			State = 642;
			Match(WHILE);
			State = 643;
			expression(0);
			State = 644;
			statementBlock();
			State = 645;
			Match(NL);
			State = 646;
			Match(END);
			State = 647;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(ElanParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(ElanParser.REPEAT, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 96, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(NL);
			{
			State = 650;
			Match(REPEAT);
			}
			State = 651;
			statementBlock();
			State = 652;
			Match(NL);
			State = 653;
			Match(UNTIL);
			State = 654;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(ElanParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(ElanParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ElanParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public TryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryContext @try() {
		TryContext _localctx = new TryContext(Context, State);
		EnterRule(_localctx, 98, RULE_try);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(NL);
			State = 657;
			Match(TRY);
			State = 658;
			statementBlock();
			State = 659;
			Match(NL);
			State = 660;
			Match(CATCH);
			State = 661;
			Match(IDENTIFIER);
			State = 662;
			statementBlock();
			State = 663;
			Match(NL);
			State = 664;
			Match(END);
			State = 665;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(ElanParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(ElanParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseDefaultContext caseDefault() {
			return GetRuleContext<CaseDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 100, RULE_switch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			Match(NL);
			State = 668;
			Match(SWITCH);
			State = 669;
			expression(0);
			State = 671;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 670;
					@case();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 673;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 675;
			caseDefault();
			State = 676;
			Match(NL);
			State = 677;
			Match(END);
			State = 678;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(ElanParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 102, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			Match(NL);
			State = 681;
			Match(CASE);
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 682;
				Match(MINUS);
				}
			}

			State = 685;
			literalValue();
			State = 686;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseDefaultContext caseDefault() {
		CaseDefaultContext _localctx = new CaseDefaultContext(Context, State);
		EnterRule(_localctx, 104, RULE_caseDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(NL);
			State = 689;
			Match(DEFAULT);
			State = 690;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracketedExpressionContext bracketedExpression() {
			return GetRuleContext<BracketedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 106;
		EnterRecursionRule(_localctx, 106, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 693;
				bracketedExpression();
				}
				break;
			case 2:
				{
				State = 694;
				functionCall();
				}
				break;
			case 3:
				{
				State = 695;
				value();
				}
				break;
			case 4:
				{
				State = 696;
				unaryOp();
				State = 697;
				expression(7);
				}
				break;
			case 5:
				{
				State = 699;
				newInstance();
				}
				break;
			case 6:
				{
				State = 700;
				ifExpression();
				}
				break;
			case 7:
				{
				State = 701;
				Match(NL);
				State = 702;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 724;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 722;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 705;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 706;
						Match(POWER);
						State = 707;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 708;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 709;
						binaryOp();
						State = 710;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 712;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 713;
						index();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 714;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 715;
						Match(DOT);
						State = 716;
						functionCall();
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 717;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 718;
						Match(DOT);
						State = 719;
						Match(IDENTIFIER);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 720;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 721;
						withClause();
						}
						break;
					}
					} 
				}
				State = 726;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracketedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public BracketedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketedExpressionContext bracketedExpression() {
		BracketedExpressionContext _localctx = new BracketedExpressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_bracketedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			Match(OPEN_BRACKET);
			State = 728;
			expression(0);
			State = 729;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ElanParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ElanParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ElanParser.ELSE, 0); }
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_ifExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			Match(IF);
			State = 732;
			expression(0);
			State = 733;
			Match(NL);
			State = 734;
			Match(THEN);
			State = 735;
			expression(0);
			State = 736;
			Match(NL);
			State = 737;
			Match(ELSE);
			State = 738;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(ElanParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 112, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			Match(LAMBDA);
			State = 741;
			argumentList();
			State = 742;
			Match(ARROW);
			State = 743;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(ElanParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(ElanParser.CLOSE_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ElanParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 114, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(OPEN_SQ_BRACKET);
			State = 752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 746;
				expression(0);
				}
				break;
			case 2:
				{
				State = 747;
				expression(0);
				State = 748;
				Match(COMMA);
				State = 749;
				expression(0);
				}
				break;
			case 3:
				{
				State = 751;
				range();
				}
				break;
			}
			State = 754;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(ElanParser.DOUBLE_DOT, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 116, RULE_range);
		try {
			State = 765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 756;
				expression(0);
				State = 757;
				Match(DOUBLE_DOT);
				State = 758;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 760;
				expression(0);
				State = 761;
				Match(DOUBLE_DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 763;
				Match(DOUBLE_DOT);
				State = 764;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureDefinitionContext dataStructureDefinition() {
			return GetRuleContext<DataStructureDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 118, RULE_value);
		int _la;
		try {
			State = 776;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 767;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SELF) {
					{
					State = 768;
					scopeQualifier();
					}
				}

				State = 771;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 772;
				dataStructureDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 773;
				Match(SELF);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 774;
				Match(DEFAULT);
				State = 775;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(ElanParser.GLOBAL, 0); }
		public ScopeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeQualifierContext scopeQualifier() {
		ScopeQualifierContext _localctx = new ScopeQualifierContext(Context, State);
		EnterRule(_localctx, 120, RULE_scopeQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL || _la==SELF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 779;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDataStructureContext literalDataStructure() {
			return GetRuleContext<LiteralDataStructureContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 122, RULE_literal);
		try {
			State = 783;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
			case TYPENAME:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 781;
				literalValue();
				}
				break;
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 782;
				literalDataStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VALUE() { return GetToken(ElanParser.BOOL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(ElanParser.LITERAL_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_CHAR() { return GetToken(ElanParser.LITERAL_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 124, RULE_literalValue);
		try {
			State = 790;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785;
				Match(BOOL_VALUE);
				}
				break;
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786;
				Match(LITERAL_INTEGER);
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 787;
				Match(LITERAL_FLOAT);
				}
				break;
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 788;
				Match(LITERAL_CHAR);
				}
				break;
			case TYPENAME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 789;
				enumValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListDefinitionContext listDefinition() {
			return GetRuleContext<ListDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDefinitionContext arrayDefinition() {
			return GetRuleContext<ArrayDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleDefinitionContext tupleDefinition() {
			return GetRuleContext<TupleDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryDefinitionContext dictionaryDefinition() {
			return GetRuleContext<DictionaryDefinitionContext>(0);
		}
		public DataStructureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureDefinitionContext dataStructureDefinition() {
		DataStructureDefinitionContext _localctx = new DataStructureDefinitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_dataStructureDefinition);
		try {
			State = 796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792;
				listDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 793;
				arrayDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 794;
				tupleDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 795;
				dictionaryDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDataStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTupleContext literalTuple() {
			return GetRuleContext<LiteralTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralListContext literalList() {
			return GetRuleContext<LiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDictionaryContext literalDictionary() {
			return GetRuleContext<LiteralDictionaryContext>(0);
		}
		public LiteralDataStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDataStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDataStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDataStructureContext literalDataStructure() {
		LiteralDataStructureContext _localctx = new LiteralDataStructureContext(Context, State);
		EnterRule(_localctx, 128, RULE_literalDataStructure);
		try {
			State = 802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 798;
				Match(LITERAL_STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 799;
				literalTuple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 800;
				literalList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 801;
				literalDictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public TupleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDefinitionContext tupleDefinition() {
		TupleDefinitionContext _localctx = new TupleDefinitionContext(Context, State);
		EnterRule(_localctx, 130, RULE_tupleDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			Match(OPEN_BRACKET);
			State = 805;
			expression(0);
			State = 806;
			Match(COMMA);
			State = 807;
			expression(0);
			State = 812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 808;
				Match(COMMA);
				State = 809;
				expression(0);
				}
				}
				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 815;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public LiteralTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTupleContext literalTuple() {
		LiteralTupleContext _localctx = new LiteralTupleContext(Context, State);
		EnterRule(_localctx, 132, RULE_literalTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(OPEN_BRACKET);
			State = 818;
			literal();
			State = 819;
			Match(COMMA);
			State = 820;
			literal();
			State = 825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 821;
				Match(COMMA);
				State = 822;
				literal();
				}
				}
				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 828;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeconstructedTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DeconstructedTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deconstructedTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeconstructedTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeconstructedTupleContext deconstructedTuple() {
		DeconstructedTupleContext _localctx = new DeconstructedTupleContext(Context, State);
		EnterRule(_localctx, 134, RULE_deconstructedTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830;
			Match(OPEN_BRACKET);
			State = 831;
			Match(IDENTIFIER);
			State = 834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 832;
				Match(COMMA);
				State = 833;
				Match(IDENTIFIER);
				}
				}
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 838;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ListDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDefinitionContext listDefinition() {
		ListDefinitionContext _localctx = new ListDefinitionContext(Context, State);
		EnterRule(_localctx, 136, RULE_listDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			Match(OPEN_BRACE);
			{
			State = 841;
			expression(0);
			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 842;
				Match(COMMA);
				State = 843;
				expression(0);
				}
				}
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 849;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralListContext literalList() {
		LiteralListContext _localctx = new LiteralListContext(Context, State);
		EnterRule(_localctx, 138, RULE_literalList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			Match(OPEN_BRACE);
			{
			State = 852;
			literal();
			State = 857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 853;
				Match(COMMA);
				State = 854;
				literal();
				}
				}
				State = 859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 860;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		public ListDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDecompContext listDecomp() {
		ListDecompContext _localctx = new ListDecompContext(Context, State);
		EnterRule(_localctx, 140, RULE_listDecomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(OPEN_BRACE);
			State = 863;
			Match(IDENTIFIER);
			State = 864;
			Match(COLON);
			State = 865;
			Match(IDENTIFIER);
			State = 866;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		public ArrayDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDefinitionContext arrayDefinition() {
		ArrayDefinitionContext _localctx = new ArrayDefinitionContext(Context, State);
		EnterRule(_localctx, 142, RULE_arrayDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868;
			Match(ARRAY);
			State = 869;
			genericSpecifier();
			State = 870;
			Match(OPEN_BRACKET);
			State = 872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LITERAL_INTEGER) {
				{
				State = 871;
				Match(LITERAL_INTEGER);
				}
			}

			State = 874;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext[] kvp() {
			return GetRuleContexts<KvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext kvp(int i) {
			return GetRuleContext<KvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DictionaryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryDefinitionContext dictionaryDefinition() {
		DictionaryDefinitionContext _localctx = new DictionaryDefinitionContext(Context, State);
		EnterRule(_localctx, 144, RULE_dictionaryDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			Match(OPEN_BRACE);
			{
			State = 877;
			kvp();
			State = 882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 878;
				Match(COMMA);
				State = 879;
				kvp();
				}
				}
				State = 884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 885;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext[] literalKvp() {
			return GetRuleContexts<LiteralKvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext literalKvp(int i) {
			return GetRuleContext<LiteralKvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralDictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDictionaryContext literalDictionary() {
		LiteralDictionaryContext _localctx = new LiteralDictionaryContext(Context, State);
		EnterRule(_localctx, 146, RULE_literalDictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 887;
			Match(OPEN_BRACE);
			{
			State = 888;
			literalKvp();
			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 889;
				Match(COMMA);
				State = 890;
				literalKvp();
				}
				}
				State = 895;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 896;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public KvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpContext kvp() {
		KvpContext _localctx = new KvpContext(Context, State);
		EnterRule(_localctx, 148, RULE_kvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			expression(0);
			State = 899;
			Match(COLON);
			State = 900;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralKvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public LiteralKvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalKvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralKvpContext literalKvp() {
		LiteralKvpContext _localctx = new LiteralKvpContext(Context, State);
		EnterRule(_localctx, 150, RULE_literalKvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902;
			literal();
			State = 903;
			Match(COLON);
			State = 904;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ElanParser.NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 152, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOpContext arithmeticOp() {
			return GetRuleContext<ArithmeticOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 154, RULE_binaryOp);
		try {
			State = 911;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIV:
			case MOD:
			case PLUS:
			case MINUS:
			case MULT:
			case DIVIDE:
			case POWER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908;
				arithmeticOp();
				}
				break;
			case AND:
			case OR:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 909;
				logicalOp();
				}
				break;
			case IS:
			case LT:
			case GT:
			case LE:
			case GE:
			case IS_NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 910;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(ElanParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ElanParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ElanParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ElanParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ElanParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ArithmeticOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOpContext arithmeticOp() {
		ArithmeticOpContext _localctx = new ArithmeticOpContext(Context, State);
		EnterRule(_localctx, 156, RULE_arithmeticOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			_la = TokenStream.LA(1);
			if ( !(_la==DIV || _la==MOD || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ElanParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ElanParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(ElanParser.XOR, 0); }
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 158, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843284091600928L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(ElanParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(ElanParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(ElanParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_NOT() { return GetToken(ElanParser.IS_NOT, 0); }
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 160, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & 8725724278030337L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_TYPE() { return GetToken(ElanParser.VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureTypeContext dataStructureType() {
			return GetRuleContext<DataStructureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_type);
		try {
			State = 926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 919;
				Match(VALUE_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 920;
				dataStructureType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 921;
				Match(TYPENAME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 922;
				Match(TYPENAME);
				State = 923;
				genericSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 924;
				tupleType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 925;
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ElanParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(ElanParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERABLE() { return GetToken(ElanParser.ITERABLE, 0); }
		public DataStructureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureTypeContext dataStructureType() {
		DataStructureTypeContext _localctx = new DataStructureTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_dataStructureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 929;
			genericSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ElanParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public GenericSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericSpecifierContext genericSpecifier() {
		GenericSpecifierContext _localctx = new GenericSpecifierContext(Context, State);
		EnterRule(_localctx, 166, RULE_genericSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931;
			Match(LT);
			State = 932;
			Match(OF);
			State = 933;
			type();
			State = 938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 934;
				Match(COMMA);
				State = 935;
				type();
				}
				}
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 941;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 168, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 943;
			Match(OPEN_BRACKET);
			State = 944;
			type();
			State = 947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 945;
				Match(COMMA);
				State = 946;
				type();
				}
				}
				State = 949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 951;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 170, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			type();
			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 954;
				Match(COMMA);
				State = 955;
				type();
				}
				}
				State = 960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 172, RULE_funcType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			Match(OPEN_BRACKET);
			State = 962;
			typeList();
			State = 963;
			Match(ARROW);
			State = 964;
			type();
			State = 965;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 53: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,98,968,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,182,8,0,10,0,12,0,
		185,9,0,1,0,5,0,188,8,0,10,0,12,0,191,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,2,1,2,1,2,1,2,5,2,206,8,2,10,2,12,2,209,9,2,1,2,1,2,1,2,1,2,
		1,3,1,3,1,3,1,3,1,3,1,3,5,3,221,8,3,10,3,12,3,224,9,3,1,4,1,4,1,4,3,4,
		229,8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,243,8,6,1,
		7,1,7,1,7,1,7,1,8,1,8,1,8,3,8,252,8,8,1,9,1,9,3,9,256,8,9,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,3,10,266,8,10,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,3,11,275,8,11,1,12,1,12,1,12,1,12,1,12,1,13,3,13,283,8,13,1,13,1,
		13,3,13,287,8,13,1,13,1,13,3,13,291,8,13,1,14,3,14,294,8,14,1,14,1,14,
		1,14,3,14,299,8,14,1,14,1,14,1,15,3,15,304,8,15,1,15,1,15,1,15,3,15,309,
		8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,3,16,318,8,16,1,16,1,16,1,17,1,
		17,3,17,324,8,17,1,18,1,18,1,18,5,18,329,8,18,10,18,12,18,332,9,18,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,3,20,345,8,20,1,20,1,
		20,1,21,1,21,1,21,5,21,352,8,21,10,21,12,21,355,9,21,1,22,1,22,1,22,5,
		22,360,8,22,10,22,12,22,363,9,22,1,23,1,23,1,23,1,24,3,24,369,8,24,1,24,
		1,24,1,24,1,25,1,25,3,25,376,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,3,28,398,
		8,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,411,8,
		29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,420,8,30,10,30,12,30,423,9,
		30,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
		33,3,33,439,8,33,1,34,1,34,1,34,1,34,3,34,445,8,34,1,34,1,34,1,34,1,34,
		5,34,451,8,34,10,34,12,34,454,9,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
		1,35,1,35,3,35,465,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,474,8,
		35,10,35,12,35,477,9,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,3,
		36,488,8,36,1,36,1,36,1,36,5,36,493,8,36,10,36,12,36,496,9,36,1,36,1,36,
		1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,508,8,37,1,37,1,37,1,37,1,
		37,5,37,514,8,37,10,37,12,37,517,9,37,1,37,1,37,1,37,1,37,1,38,1,38,1,
		38,1,38,5,38,527,8,38,10,38,12,38,530,9,38,1,39,1,39,3,39,534,8,39,1,39,
		1,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,544,8,40,1,40,1,40,1,40,1,40,1,
		40,1,40,1,41,1,41,1,41,1,41,3,41,556,8,41,1,41,1,41,3,41,560,8,41,1,41,
		1,41,3,41,564,8,41,1,42,1,42,1,42,1,42,1,42,5,42,571,8,42,10,42,12,42,
		574,9,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,585,8,43,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,599,8,44,
		10,44,12,44,602,9,44,1,44,1,44,1,44,3,44,607,8,44,1,44,1,44,1,44,1,44,
		1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,622,8,45,1,45,3,45,625,
		8,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
		1,50,1,50,1,50,1,50,4,50,672,8,50,11,50,12,50,673,1,50,1,50,1,50,1,50,
		1,50,1,51,1,51,1,51,3,51,684,8,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,
		53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,704,8,53,1,53,
		1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
		1,53,1,53,5,53,723,8,53,10,53,12,53,726,9,53,1,54,1,54,1,54,1,54,1,55,
		1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,
		1,57,1,57,1,57,1,57,1,57,1,57,3,57,753,8,57,1,57,1,57,1,58,1,58,1,58,1,
		58,1,58,1,58,1,58,1,58,1,58,3,58,766,8,58,1,59,1,59,3,59,770,8,59,1,59,
		1,59,1,59,1,59,1,59,3,59,777,8,59,1,60,1,60,1,60,1,61,1,61,3,61,784,8,
		61,1,62,1,62,1,62,1,62,1,62,3,62,791,8,62,1,63,1,63,1,63,1,63,3,63,797,
		8,63,1,64,1,64,1,64,1,64,3,64,803,8,64,1,65,1,65,1,65,1,65,1,65,1,65,5,
		65,811,8,65,10,65,12,65,814,9,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,
		66,5,66,824,8,66,10,66,12,66,827,9,66,1,66,1,66,1,67,1,67,1,67,1,67,4,
		67,835,8,67,11,67,12,67,836,1,67,1,67,1,68,1,68,1,68,1,68,5,68,845,8,68,
		10,68,12,68,848,9,68,1,68,1,68,1,69,1,69,1,69,1,69,5,69,856,8,69,10,69,
		12,69,859,9,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,
		1,71,3,71,873,8,71,1,71,1,71,1,72,1,72,1,72,1,72,5,72,881,8,72,10,72,12,
		72,884,9,72,1,72,1,72,1,73,1,73,1,73,1,73,5,73,892,8,73,10,73,12,73,895,
		9,73,1,73,1,73,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,77,
		1,77,1,77,3,77,912,8,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,
		81,1,81,1,81,1,81,3,81,927,8,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,
		5,83,937,8,83,10,83,12,83,940,9,83,1,83,1,83,1,84,1,84,1,84,1,84,4,84,
		948,8,84,11,84,12,84,949,1,84,1,84,1,85,1,85,1,85,5,85,957,8,85,10,85,
		12,85,960,9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,0,1,106,87,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
		140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,0,
		7,2,0,91,91,95,95,2,0,24,24,47,47,2,0,35,35,81,81,3,0,16,16,33,33,80,84,
		3,0,5,5,38,38,61,61,2,0,37,37,85,89,1,0,64,67,1009,0,183,1,0,0,0,2,194,
		1,0,0,0,4,201,1,0,0,0,6,222,1,0,0,0,8,228,1,0,0,0,10,230,1,0,0,0,12,235,
		1,0,0,0,14,244,1,0,0,0,16,248,1,0,0,0,18,253,1,0,0,0,20,257,1,0,0,0,22,
		267,1,0,0,0,24,276,1,0,0,0,26,290,1,0,0,0,28,293,1,0,0,0,30,303,1,0,0,
		0,32,312,1,0,0,0,34,323,1,0,0,0,36,325,1,0,0,0,38,333,1,0,0,0,40,341,1,
		0,0,0,42,348,1,0,0,0,44,356,1,0,0,0,46,364,1,0,0,0,48,368,1,0,0,0,50,375,
		1,0,0,0,52,377,1,0,0,0,54,388,1,0,0,0,56,394,1,0,0,0,58,403,1,0,0,0,60,
		412,1,0,0,0,62,428,1,0,0,0,64,430,1,0,0,0,66,438,1,0,0,0,68,440,1,0,0,
		0,70,459,1,0,0,0,72,482,1,0,0,0,74,501,1,0,0,0,76,522,1,0,0,0,78,531,1,
		0,0,0,80,539,1,0,0,0,82,563,1,0,0,0,84,565,1,0,0,0,86,584,1,0,0,0,88,586,
		1,0,0,0,90,612,1,0,0,0,92,631,1,0,0,0,94,641,1,0,0,0,96,649,1,0,0,0,98,
		656,1,0,0,0,100,667,1,0,0,0,102,680,1,0,0,0,104,688,1,0,0,0,106,703,1,
		0,0,0,108,727,1,0,0,0,110,731,1,0,0,0,112,740,1,0,0,0,114,745,1,0,0,0,
		116,765,1,0,0,0,118,776,1,0,0,0,120,778,1,0,0,0,122,783,1,0,0,0,124,790,
		1,0,0,0,126,796,1,0,0,0,128,802,1,0,0,0,130,804,1,0,0,0,132,817,1,0,0,
		0,134,830,1,0,0,0,136,840,1,0,0,0,138,851,1,0,0,0,140,862,1,0,0,0,142,
		868,1,0,0,0,144,876,1,0,0,0,146,887,1,0,0,0,148,898,1,0,0,0,150,902,1,
		0,0,0,152,906,1,0,0,0,154,911,1,0,0,0,156,913,1,0,0,0,158,915,1,0,0,0,
		160,917,1,0,0,0,162,926,1,0,0,0,164,928,1,0,0,0,166,931,1,0,0,0,168,943,
		1,0,0,0,170,953,1,0,0,0,172,961,1,0,0,0,174,182,3,2,1,0,175,182,3,38,19,
		0,176,182,3,50,25,0,177,182,3,58,29,0,178,182,3,60,30,0,179,182,3,66,33,
		0,180,182,3,4,2,0,181,174,1,0,0,0,181,175,1,0,0,0,181,176,1,0,0,0,181,
		177,1,0,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,180,1,0,0,0,182,185,1,
		0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,189,1,0,0,0,185,183,1,0,0,0,
		186,188,5,1,0,0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,
		1,0,0,0,190,192,1,0,0,0,191,189,1,0,0,0,192,193,5,0,0,1,193,1,1,0,0,0,
		194,195,5,1,0,0,195,196,5,32,0,0,196,197,3,6,3,0,197,198,5,1,0,0,198,199,
		5,18,0,0,199,200,5,32,0,0,200,3,1,0,0,0,201,202,5,1,0,0,202,203,5,52,0,
		0,203,207,5,91,0,0,204,206,3,8,4,0,205,204,1,0,0,0,206,209,1,0,0,0,207,
		205,1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,211,5,
		1,0,0,211,212,5,18,0,0,212,213,5,52,0,0,213,5,1,0,0,0,214,221,3,20,10,
		0,215,221,3,22,11,0,216,221,3,86,43,0,217,221,3,12,6,0,218,221,3,14,7,
		0,219,221,3,16,8,0,220,214,1,0,0,0,220,215,1,0,0,0,220,216,1,0,0,0,220,
		217,1,0,0,0,220,218,1,0,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,
		0,0,0,222,223,1,0,0,0,223,7,1,0,0,0,224,222,1,0,0,0,225,229,3,10,5,0,226,
		229,3,20,10,0,227,229,3,12,6,0,228,225,1,0,0,0,228,226,1,0,0,0,228,227,
		1,0,0,0,229,9,1,0,0,0,230,231,5,7,0,0,231,232,3,106,53,0,232,233,5,37,
		0,0,233,234,3,118,59,0,234,11,1,0,0,0,235,236,5,1,0,0,236,242,5,8,0,0,
		237,243,3,28,14,0,238,239,3,26,13,0,239,240,5,77,0,0,240,241,3,28,14,0,
		241,243,1,0,0,0,242,237,1,0,0,0,242,238,1,0,0,0,243,13,1,0,0,0,244,245,
		5,1,0,0,245,246,5,54,0,0,246,247,7,0,0,0,247,15,1,0,0,0,248,249,5,1,0,
		0,249,251,5,41,0,0,250,252,3,106,53,0,251,250,1,0,0,0,251,252,1,0,0,0,
		252,17,1,0,0,0,253,255,5,29,0,0,254,256,5,95,0,0,255,254,1,0,0,0,255,256,
		1,0,0,0,256,19,1,0,0,0,257,258,5,1,0,0,258,259,5,58,0,0,259,260,3,26,13,
		0,260,261,5,48,0,0,261,265,5,55,0,0,262,266,3,106,53,0,263,266,3,32,16,
		0,264,266,3,18,9,0,265,262,1,0,0,0,265,263,1,0,0,0,265,264,1,0,0,0,266,
		21,1,0,0,0,267,268,5,1,0,0,268,269,5,48,0,0,269,270,3,26,13,0,270,274,
		5,55,0,0,271,275,3,106,53,0,272,275,3,32,16,0,273,275,3,18,9,0,274,271,
		1,0,0,0,274,272,1,0,0,0,274,273,1,0,0,0,275,23,1,0,0,0,276,277,3,26,13,
		0,277,278,5,48,0,0,278,279,5,55,0,0,279,280,3,106,53,0,280,25,1,0,0,0,
		281,283,3,120,60,0,282,281,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,
		286,5,91,0,0,285,287,3,114,57,0,286,285,1,0,0,0,286,287,1,0,0,0,287,291,
		1,0,0,0,288,291,3,134,67,0,289,291,3,140,70,0,290,282,1,0,0,0,290,288,
		1,0,0,0,290,289,1,0,0,0,291,27,1,0,0,0,292,294,3,120,60,0,293,292,1,0,
		0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,5,91,0,0,296,298,5,74,0,0,
		297,299,3,36,18,0,298,297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,
		301,5,75,0,0,301,29,1,0,0,0,302,304,3,120,60,0,303,302,1,0,0,0,303,304,
		1,0,0,0,304,305,1,0,0,0,305,306,5,91,0,0,306,308,5,74,0,0,307,309,3,36,
		18,0,308,307,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,5,75,0,0,
		311,31,1,0,0,0,312,313,5,51,0,0,313,314,5,77,0,0,314,315,5,91,0,0,315,
		317,5,74,0,0,316,318,3,36,18,0,317,316,1,0,0,0,317,318,1,0,0,0,318,319,
		1,0,0,0,319,320,5,75,0,0,320,33,1,0,0,0,321,324,3,106,53,0,322,324,3,112,
		56,0,323,321,1,0,0,0,323,322,1,0,0,0,324,35,1,0,0,0,325,330,3,34,17,0,
		326,327,5,78,0,0,327,329,3,34,17,0,328,326,1,0,0,0,329,332,1,0,0,0,330,
		328,1,0,0,0,330,331,1,0,0,0,331,37,1,0,0,0,332,330,1,0,0,0,333,334,5,1,
		0,0,334,335,5,43,0,0,335,336,3,40,20,0,336,337,3,6,3,0,337,338,5,1,0,0,
		338,339,5,18,0,0,339,340,5,43,0,0,340,39,1,0,0,0,341,342,5,91,0,0,342,
		344,5,74,0,0,343,345,3,42,21,0,344,343,1,0,0,0,344,345,1,0,0,0,345,346,
		1,0,0,0,346,347,5,75,0,0,347,41,1,0,0,0,348,353,3,48,24,0,349,350,5,78,
		0,0,350,352,3,48,24,0,351,349,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,
		353,354,1,0,0,0,354,43,1,0,0,0,355,353,1,0,0,0,356,361,3,46,23,0,357,358,
		5,78,0,0,358,360,3,46,23,0,359,357,1,0,0,0,360,363,1,0,0,0,361,359,1,0,
		0,0,361,362,1,0,0,0,362,45,1,0,0,0,363,361,1,0,0,0,364,365,5,91,0,0,365,
		366,3,162,81,0,366,47,1,0,0,0,367,369,5,39,0,0,368,367,1,0,0,0,368,369,
		1,0,0,0,369,370,1,0,0,0,370,371,5,91,0,0,371,372,3,162,81,0,372,49,1,0,
		0,0,373,376,3,52,26,0,374,376,3,54,27,0,375,373,1,0,0,0,375,374,1,0,0,
		0,376,51,1,0,0,0,377,378,5,1,0,0,378,379,5,23,0,0,379,380,3,56,28,0,380,
		381,3,6,3,0,381,382,5,1,0,0,382,383,5,46,0,0,383,384,3,106,53,0,384,385,
		5,1,0,0,385,386,5,18,0,0,386,387,5,23,0,0,387,53,1,0,0,0,388,389,5,1,0,
		0,389,390,5,23,0,0,390,391,3,56,28,0,391,392,5,69,0,0,392,393,3,106,53,
		0,393,55,1,0,0,0,394,395,5,91,0,0,395,397,5,74,0,0,396,398,3,44,22,0,397,
		396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,75,0,0,400,401,5,
		6,0,0,401,402,3,162,81,0,402,57,1,0,0,0,403,404,5,1,0,0,404,405,5,12,0,
		0,405,406,5,91,0,0,406,407,5,48,0,0,407,410,5,55,0,0,408,411,3,122,61,
		0,409,411,3,82,41,0,410,408,1,0,0,0,410,409,1,0,0,0,411,59,1,0,0,0,412,
		413,5,1,0,0,413,414,5,19,0,0,414,415,3,62,31,0,415,416,5,1,0,0,416,421,
		5,91,0,0,417,418,5,78,0,0,418,420,5,91,0,0,419,417,1,0,0,0,420,423,1,0,
		0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,421,1,0,0,0,424,
		425,5,1,0,0,425,426,5,18,0,0,426,427,5,19,0,0,427,61,1,0,0,0,428,429,5,
		90,0,0,429,63,1,0,0,0,430,431,3,62,31,0,431,432,5,77,0,0,432,433,5,91,
		0,0,433,65,1,0,0,0,434,439,3,68,34,0,435,439,3,70,35,0,436,439,3,72,36,
		0,437,439,3,74,37,0,438,434,1,0,0,0,438,435,1,0,0,0,438,436,1,0,0,0,438,
		437,1,0,0,0,439,67,1,0,0,0,440,441,5,1,0,0,441,442,5,11,0,0,442,444,5,
		90,0,0,443,445,3,76,38,0,444,443,1,0,0,0,444,445,1,0,0,0,445,446,1,0,0,
		0,446,452,3,80,40,0,447,451,3,78,39,0,448,451,3,50,25,0,449,451,3,38,19,
		0,450,447,1,0,0,0,450,448,1,0,0,0,450,449,1,0,0,0,451,454,1,0,0,0,452,
		450,1,0,0,0,452,453,1,0,0,0,453,455,1,0,0,0,454,452,1,0,0,0,455,456,5,
		1,0,0,456,457,5,18,0,0,457,458,5,11,0,0,458,69,1,0,0,0,459,460,5,1,0,0,
		460,461,5,4,0,0,461,462,5,11,0,0,462,464,5,90,0,0,463,465,3,76,38,0,464,
		463,1,0,0,0,464,465,1,0,0,0,465,475,1,0,0,0,466,474,3,78,39,0,467,468,
		5,1,0,0,468,469,5,23,0,0,469,474,3,56,28,0,470,471,5,1,0,0,471,472,5,43,
		0,0,472,474,3,40,20,0,473,466,1,0,0,0,473,467,1,0,0,0,473,470,1,0,0,0,
		474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,475,
		1,0,0,0,478,479,5,1,0,0,479,480,5,18,0,0,480,481,5,11,0,0,481,71,1,0,0,
		0,482,483,5,1,0,0,483,484,5,26,0,0,484,485,5,11,0,0,485,487,5,90,0,0,486,
		488,3,76,38,0,487,486,1,0,0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,494,
		3,80,40,0,490,493,3,78,39,0,491,493,3,50,25,0,492,490,1,0,0,0,492,491,
		1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,497,1,0,0,
		0,496,494,1,0,0,0,497,498,5,1,0,0,498,499,5,18,0,0,499,500,5,11,0,0,500,
		73,1,0,0,0,501,502,5,1,0,0,502,503,5,4,0,0,503,504,5,26,0,0,504,505,5,
		11,0,0,505,507,5,90,0,0,506,508,3,76,38,0,507,506,1,0,0,0,507,508,1,0,
		0,0,508,515,1,0,0,0,509,514,3,78,39,0,510,511,5,1,0,0,511,512,5,23,0,0,
		512,514,3,56,28,0,513,509,1,0,0,0,513,510,1,0,0,0,514,517,1,0,0,0,515,
		513,1,0,0,0,515,516,1,0,0,0,516,518,1,0,0,0,517,515,1,0,0,0,518,519,5,
		1,0,0,519,520,5,18,0,0,520,521,5,11,0,0,521,75,1,0,0,0,522,523,5,28,0,
		0,523,528,3,162,81,0,524,525,5,78,0,0,525,527,3,162,81,0,526,524,1,0,0,
		0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,77,1,0,0,0,530,528,
		1,0,0,0,531,533,5,1,0,0,532,534,5,42,0,0,533,532,1,0,0,0,533,534,1,0,0,
		0,534,535,1,0,0,0,535,536,5,44,0,0,536,537,5,91,0,0,537,538,3,162,81,0,
		538,79,1,0,0,0,539,540,5,1,0,0,540,541,5,13,0,0,541,543,5,74,0,0,542,544,
		3,44,22,0,543,542,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,5,75,
		0,0,546,547,3,6,3,0,547,548,5,1,0,0,548,549,5,18,0,0,549,550,5,13,0,0,
		550,81,1,0,0,0,551,552,5,34,0,0,552,553,3,162,81,0,553,555,5,74,0,0,554,
		556,3,36,18,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,559,
		5,75,0,0,558,560,3,84,42,0,559,558,1,0,0,0,559,560,1,0,0,0,560,564,1,0,
		0,0,561,562,5,91,0,0,562,564,3,84,42,0,563,551,1,0,0,0,563,561,1,0,0,0,
		564,83,1,0,0,0,565,566,5,60,0,0,566,567,5,70,0,0,567,572,3,24,12,0,568,
		569,5,78,0,0,569,571,3,24,12,0,570,568,1,0,0,0,571,574,1,0,0,0,572,570,
		1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,572,1,0,0,0,575,576,5,71,0,
		0,576,85,1,0,0,0,577,585,3,88,44,0,578,585,3,90,45,0,579,585,3,92,46,0,
		580,585,3,94,47,0,581,585,3,96,48,0,582,585,3,98,49,0,583,585,3,100,50,
		0,584,577,1,0,0,0,584,578,1,0,0,0,584,579,1,0,0,0,584,580,1,0,0,0,584,
		581,1,0,0,0,584,582,1,0,0,0,584,583,1,0,0,0,585,87,1,0,0,0,586,587,5,1,
		0,0,587,588,5,25,0,0,588,589,3,106,53,0,589,590,5,53,0,0,590,600,3,6,3,
		0,591,592,5,1,0,0,592,593,5,17,0,0,593,594,5,25,0,0,594,595,3,106,53,0,
		595,596,5,53,0,0,596,597,3,6,3,0,597,599,1,0,0,0,598,591,1,0,0,0,599,602,
		1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,606,1,0,0,0,602,600,1,0,0,
		0,603,604,5,1,0,0,604,605,5,17,0,0,605,607,3,6,3,0,606,603,1,0,0,0,606,
		607,1,0,0,0,607,608,1,0,0,0,608,609,5,1,0,0,609,610,5,18,0,0,610,611,5,
		25,0,0,611,89,1,0,0,0,612,613,5,1,0,0,613,614,5,20,0,0,614,615,5,91,0,
		0,615,616,5,22,0,0,616,617,3,106,53,0,617,618,5,55,0,0,618,624,3,106,53,
		0,619,621,5,49,0,0,620,622,5,81,0,0,621,620,1,0,0,0,621,622,1,0,0,0,622,
		623,1,0,0,0,623,625,5,92,0,0,624,619,1,0,0,0,624,625,1,0,0,0,625,626,1,
		0,0,0,626,627,3,6,3,0,627,628,5,1,0,0,628,629,5,18,0,0,629,630,5,20,0,
		0,630,91,1,0,0,0,631,632,5,1,0,0,632,633,5,21,0,0,633,634,5,91,0,0,634,
		635,5,27,0,0,635,636,3,106,53,0,636,637,3,6,3,0,637,638,5,1,0,0,638,639,
		5,18,0,0,639,640,5,21,0,0,640,93,1,0,0,0,641,642,5,1,0,0,642,643,5,59,
		0,0,643,644,3,106,53,0,644,645,3,6,3,0,645,646,5,1,0,0,646,647,5,18,0,
		0,647,648,5,59,0,0,648,95,1,0,0,0,649,650,5,1,0,0,650,651,5,45,0,0,651,
		652,3,6,3,0,652,653,5,1,0,0,653,654,5,57,0,0,654,655,3,106,53,0,655,97,
		1,0,0,0,656,657,5,1,0,0,657,658,5,56,0,0,658,659,3,6,3,0,659,660,5,1,0,
		0,660,661,5,10,0,0,661,662,5,91,0,0,662,663,3,6,3,0,663,664,5,1,0,0,664,
		665,5,18,0,0,665,666,5,56,0,0,666,99,1,0,0,0,667,668,5,1,0,0,668,669,5,
		50,0,0,669,671,3,106,53,0,670,672,3,102,51,0,671,670,1,0,0,0,672,673,1,
		0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,676,3,104,52,
		0,676,677,5,1,0,0,677,678,5,18,0,0,678,679,5,50,0,0,679,101,1,0,0,0,680,
		681,5,1,0,0,681,683,5,9,0,0,682,684,5,81,0,0,683,682,1,0,0,0,683,684,1,
		0,0,0,684,685,1,0,0,0,685,686,3,124,62,0,686,687,3,6,3,0,687,103,1,0,0,
		0,688,689,5,1,0,0,689,690,5,15,0,0,690,691,3,6,3,0,691,105,1,0,0,0,692,
		693,6,53,-1,0,693,704,3,108,54,0,694,704,3,30,15,0,695,704,3,118,59,0,
		696,697,3,152,76,0,697,698,3,106,53,7,698,704,1,0,0,0,699,704,3,82,41,
		0,700,704,3,110,55,0,701,702,5,1,0,0,702,704,3,106,53,1,703,692,1,0,0,
		0,703,694,1,0,0,0,703,695,1,0,0,0,703,696,1,0,0,0,703,699,1,0,0,0,703,
		700,1,0,0,0,703,701,1,0,0,0,704,724,1,0,0,0,705,706,10,6,0,0,706,707,5,
		84,0,0,707,723,3,106,53,7,708,709,10,5,0,0,709,710,3,154,77,0,710,711,
		3,106,53,6,711,723,1,0,0,0,712,713,10,10,0,0,713,723,3,114,57,0,714,715,
		10,9,0,0,715,716,5,77,0,0,716,723,3,30,15,0,717,718,10,8,0,0,718,719,5,
		77,0,0,719,723,5,91,0,0,720,721,10,2,0,0,721,723,3,84,42,0,722,705,1,0,
		0,0,722,708,1,0,0,0,722,712,1,0,0,0,722,714,1,0,0,0,722,717,1,0,0,0,722,
		720,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,107,1,
		0,0,0,726,724,1,0,0,0,727,728,5,74,0,0,728,729,3,106,53,0,729,730,5,75,
		0,0,730,109,1,0,0,0,731,732,5,25,0,0,732,733,3,106,53,0,733,734,5,1,0,
		0,734,735,5,53,0,0,735,736,3,106,53,0,736,737,5,1,0,0,737,738,5,17,0,0,
		738,739,3,106,53,0,739,111,1,0,0,0,740,741,5,30,0,0,741,742,3,36,18,0,
		742,743,5,69,0,0,743,744,3,106,53,0,744,113,1,0,0,0,745,752,5,72,0,0,746,
		753,3,106,53,0,747,748,3,106,53,0,748,749,5,78,0,0,749,750,3,106,53,0,
		750,753,1,0,0,0,751,753,3,116,58,0,752,746,1,0,0,0,752,747,1,0,0,0,752,
		751,1,0,0,0,753,754,1,0,0,0,754,755,5,73,0,0,755,115,1,0,0,0,756,757,3,
		106,53,0,757,758,5,76,0,0,758,759,3,106,53,0,759,766,1,0,0,0,760,761,3,
		106,53,0,761,762,5,76,0,0,762,766,1,0,0,0,763,764,5,76,0,0,764,766,3,106,
		53,0,765,756,1,0,0,0,765,760,1,0,0,0,765,763,1,0,0,0,766,117,1,0,0,0,767,
		777,3,122,61,0,768,770,3,120,60,0,769,768,1,0,0,0,769,770,1,0,0,0,770,
		771,1,0,0,0,771,777,5,91,0,0,772,777,3,126,63,0,773,777,5,47,0,0,774,775,
		5,15,0,0,775,777,3,162,81,0,776,767,1,0,0,0,776,769,1,0,0,0,776,772,1,
		0,0,0,776,773,1,0,0,0,776,774,1,0,0,0,777,119,1,0,0,0,778,779,7,1,0,0,
		779,780,5,77,0,0,780,121,1,0,0,0,781,784,3,124,62,0,782,784,3,128,64,0,
		783,781,1,0,0,0,783,782,1,0,0,0,784,123,1,0,0,0,785,791,5,62,0,0,786,791,
		5,92,0,0,787,791,5,93,0,0,788,791,5,94,0,0,789,791,3,64,32,0,790,785,1,
		0,0,0,790,786,1,0,0,0,790,787,1,0,0,0,790,788,1,0,0,0,790,789,1,0,0,0,
		791,125,1,0,0,0,792,797,3,136,68,0,793,797,3,142,71,0,794,797,3,130,65,
		0,795,797,3,144,72,0,796,792,1,0,0,0,796,793,1,0,0,0,796,794,1,0,0,0,796,
		795,1,0,0,0,797,127,1,0,0,0,798,803,5,95,0,0,799,803,3,132,66,0,800,803,
		3,138,69,0,801,803,3,146,73,0,802,798,1,0,0,0,802,799,1,0,0,0,802,800,
		1,0,0,0,802,801,1,0,0,0,803,129,1,0,0,0,804,805,5,74,0,0,805,806,3,106,
		53,0,806,807,5,78,0,0,807,812,3,106,53,0,808,809,5,78,0,0,809,811,3,106,
		53,0,810,808,1,0,0,0,811,814,1,0,0,0,812,810,1,0,0,0,812,813,1,0,0,0,813,
		815,1,0,0,0,814,812,1,0,0,0,815,816,5,75,0,0,816,131,1,0,0,0,817,818,5,
		74,0,0,818,819,3,122,61,0,819,820,5,78,0,0,820,825,3,122,61,0,821,822,
		5,78,0,0,822,824,3,122,61,0,823,821,1,0,0,0,824,827,1,0,0,0,825,823,1,
		0,0,0,825,826,1,0,0,0,826,828,1,0,0,0,827,825,1,0,0,0,828,829,5,75,0,0,
		829,133,1,0,0,0,830,831,5,74,0,0,831,834,5,91,0,0,832,833,5,78,0,0,833,
		835,5,91,0,0,834,832,1,0,0,0,835,836,1,0,0,0,836,834,1,0,0,0,836,837,1,
		0,0,0,837,838,1,0,0,0,838,839,5,75,0,0,839,135,1,0,0,0,840,841,5,70,0,
		0,841,846,3,106,53,0,842,843,5,78,0,0,843,845,3,106,53,0,844,842,1,0,0,
		0,845,848,1,0,0,0,846,844,1,0,0,0,846,847,1,0,0,0,847,849,1,0,0,0,848,
		846,1,0,0,0,849,850,5,71,0,0,850,137,1,0,0,0,851,852,5,70,0,0,852,857,
		3,122,61,0,853,854,5,78,0,0,854,856,3,122,61,0,855,853,1,0,0,0,856,859,
		1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,860,1,0,0,0,859,857,1,0,0,
		0,860,861,5,71,0,0,861,139,1,0,0,0,862,863,5,70,0,0,863,864,5,91,0,0,864,
		865,5,79,0,0,865,866,5,91,0,0,866,867,5,71,0,0,867,141,1,0,0,0,868,869,
		5,64,0,0,869,870,3,166,83,0,870,872,5,74,0,0,871,873,5,92,0,0,872,871,
		1,0,0,0,872,873,1,0,0,0,873,874,1,0,0,0,874,875,5,75,0,0,875,143,1,0,0,
		0,876,877,5,70,0,0,877,882,3,148,74,0,878,879,5,78,0,0,879,881,3,148,74,
		0,880,878,1,0,0,0,881,884,1,0,0,0,882,880,1,0,0,0,882,883,1,0,0,0,883,
		885,1,0,0,0,884,882,1,0,0,0,885,886,5,71,0,0,886,145,1,0,0,0,887,888,5,
		70,0,0,888,893,3,150,75,0,889,890,5,78,0,0,890,892,3,150,75,0,891,889,
		1,0,0,0,892,895,1,0,0,0,893,891,1,0,0,0,893,894,1,0,0,0,894,896,1,0,0,
		0,895,893,1,0,0,0,896,897,5,71,0,0,897,147,1,0,0,0,898,899,3,106,53,0,
		899,900,5,79,0,0,900,901,3,106,53,0,901,149,1,0,0,0,902,903,3,122,61,0,
		903,904,5,79,0,0,904,905,3,122,61,0,905,151,1,0,0,0,906,907,7,2,0,0,907,
		153,1,0,0,0,908,912,3,156,78,0,909,912,3,158,79,0,910,912,3,160,80,0,911,
		908,1,0,0,0,911,909,1,0,0,0,911,910,1,0,0,0,912,155,1,0,0,0,913,914,7,
		3,0,0,914,157,1,0,0,0,915,916,7,4,0,0,916,159,1,0,0,0,917,918,7,5,0,0,
		918,161,1,0,0,0,919,927,5,63,0,0,920,927,3,164,82,0,921,927,5,90,0,0,922,
		923,5,90,0,0,923,927,3,166,83,0,924,927,3,168,84,0,925,927,3,172,86,0,
		926,919,1,0,0,0,926,920,1,0,0,0,926,921,1,0,0,0,926,922,1,0,0,0,926,924,
		1,0,0,0,926,925,1,0,0,0,927,163,1,0,0,0,928,929,7,6,0,0,929,930,3,166,
		83,0,930,165,1,0,0,0,931,932,5,85,0,0,932,933,5,36,0,0,933,938,3,162,81,
		0,934,935,5,78,0,0,935,937,3,162,81,0,936,934,1,0,0,0,937,940,1,0,0,0,
		938,936,1,0,0,0,938,939,1,0,0,0,939,941,1,0,0,0,940,938,1,0,0,0,941,942,
		5,86,0,0,942,167,1,0,0,0,943,944,5,74,0,0,944,947,3,162,81,0,945,946,5,
		78,0,0,946,948,3,162,81,0,947,945,1,0,0,0,948,949,1,0,0,0,949,947,1,0,
		0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,952,5,75,0,0,952,169,1,0,0,0,953,
		958,3,162,81,0,954,955,5,78,0,0,955,957,3,162,81,0,956,954,1,0,0,0,957,
		960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,171,1,0,0,0,960,958,1,
		0,0,0,961,962,5,74,0,0,962,963,3,170,85,0,963,964,5,69,0,0,964,965,3,162,
		81,0,965,966,5,75,0,0,966,173,1,0,0,0,81,181,183,189,207,220,222,228,242,
		251,255,265,274,282,286,290,293,298,303,308,317,323,330,344,353,361,368,
		375,397,410,421,438,444,450,452,464,473,475,487,492,494,507,513,515,528,
		533,543,555,559,563,572,584,600,606,621,624,673,683,703,722,724,752,765,
		769,776,783,790,796,802,812,825,836,846,857,872,882,893,911,926,938,949,
		958
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
