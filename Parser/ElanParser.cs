//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Elan//Repository//Parser//Elan.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ElanParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NL=1, SINGLE_LINE_COMMENT=2, COMMENT_MARKER=3, ABSTRACT=4, CALL=5, CASE=6, 
		CATCH=7, CLASS=8, CONSTANT=9, CONSTRUCTOR=10, CURRY=11, DEFAULT=12, ELSE=13, 
		END=14, ENUM=15, FOR=16, FOREACH=17, FUNCTION=18, GLOBAL=19, IF=20, IMMUTABLE=21, 
		IN=22, INHERITS=23, LAMBDA=24, LET=25, MAIN=26, PARTIAL=27, PRIVATE=28, 
		PROCEDURE=29, PROPERTY=30, REPEAT=31, RETURN=32, SELF=33, SET=34, STEP=35, 
		SWITCH=36, TEST=37, THEN=38, TO=39, TRY=40, UNTIL=41, VAR=42, WHILE=43, 
		WITH=44, BOOL_VALUE=45, VALUE_TYPE=46, ARRAY=47, LIST=48, DICTIONARY=49, 
		ITERABLE=50, ASSIGN=51, ARROW=52, OPEN_BRACE=53, CLOSE_BRACE=54, OPEN_SQ_BRACKET=55, 
		CLOSE_SQ_BRACKET=56, OPEN_BRACKET=57, CLOSE_BRACKET=58, DOUBLE_DOT=59, 
		DOT=60, COMMA=61, COLON=62, PLUS=63, MINUS=64, MULT=65, DIVIDE=66, POWER=67, 
		MOD=68, INT_DIV=69, LT=70, GT=71, OP_AND=72, OP_NOT=73, OP_OR=74, OP_XOR=75, 
		OP_EQ=76, OP_NE=77, OP_LE=78, OP_GE=79, TYPENAME=80, IDENTIFIER=81, LITERAL_INTEGER=82, 
		LITERAL_FLOAT=83, LITERAL_CHAR=84, LITERAL_STRING=85, WHITESPACES=86, 
		NEWLINE=87, WS=88;
	public const int
		RULE_file = 0, RULE_main = 1, RULE_test = 2, RULE_statementBlock = 3, 
		RULE_callStatement = 4, RULE_varDef = 5, RULE_assignment = 6, RULE_inlineAsignment = 7, 
		RULE_assignableValue = 8, RULE_methodCall = 9, RULE_argumentList = 10, 
		RULE_procedureDef = 11, RULE_procedureSignature = 12, RULE_parameterList = 13, 
		RULE_parameter = 14, RULE_functionDef = 15, RULE_functionWithBody = 16, 
		RULE_expressionFunction = 17, RULE_letIn = 18, RULE_functionSignature = 19, 
		RULE_constantDef = 20, RULE_enumDef = 21, RULE_enumType = 22, RULE_enumValue = 23, 
		RULE_classDef = 24, RULE_mutableClass = 25, RULE_abstractClass = 26, RULE_immutableClass = 27, 
		RULE_abstractImmutableClass = 28, RULE_inherits = 29, RULE_property = 30, 
		RULE_constructor = 31, RULE_newInstance = 32, RULE_withClause = 33, RULE_proceduralControlFlow = 34, 
		RULE_if = 35, RULE_for = 36, RULE_foreach = 37, RULE_while = 38, RULE_repeat = 39, 
		RULE_try = 40, RULE_switch = 41, RULE_case = 42, RULE_caseDefault = 43, 
		RULE_expression = 44, RULE_bracketedExpression = 45, RULE_ifExpression = 46, 
		RULE_lambda = 47, RULE_index = 48, RULE_range = 49, RULE_value = 50, RULE_nameQualifier = 51, 
		RULE_literal = 52, RULE_literalValue = 53, RULE_dataStructureDefinition = 54, 
		RULE_literalDataStructure = 55, RULE_tupleDefinition = 56, RULE_literalTuple = 57, 
		RULE_deconstructedTuple = 58, RULE_listDefinition = 59, RULE_literalList = 60, 
		RULE_listDecomp = 61, RULE_arrayDefinition = 62, RULE_dictionaryDefinition = 63, 
		RULE_literalDictionary = 64, RULE_kvp = 65, RULE_literalKvp = 66, RULE_unaryOp = 67, 
		RULE_binaryOp = 68, RULE_arithmeticOp = 69, RULE_logicalOp = 70, RULE_conditionalOp = 71, 
		RULE_type = 72, RULE_dataStructureType = 73, RULE_genericSpecifier = 74, 
		RULE_tupleType = 75, RULE_funcType = 76;
	public static readonly string[] ruleNames = {
		"file", "main", "test", "statementBlock", "callStatement", "varDef", "assignment", 
		"inlineAsignment", "assignableValue", "methodCall", "argumentList", "procedureDef", 
		"procedureSignature", "parameterList", "parameter", "functionDef", "functionWithBody", 
		"expressionFunction", "letIn", "functionSignature", "constantDef", "enumDef", 
		"enumType", "enumValue", "classDef", "mutableClass", "abstractClass", 
		"immutableClass", "abstractImmutableClass", "inherits", "property", "constructor", 
		"newInstance", "withClause", "proceduralControlFlow", "if", "for", "foreach", 
		"while", "repeat", "try", "switch", "case", "caseDefault", "expression", 
		"bracketedExpression", "ifExpression", "lambda", "index", "range", "value", 
		"nameQualifier", "literal", "literalValue", "dataStructureDefinition", 
		"literalDataStructure", "tupleDefinition", "literalTuple", "deconstructedTuple", 
		"listDefinition", "literalList", "listDecomp", "arrayDefinition", "dictionaryDefinition", 
		"literalDictionary", "kvp", "literalKvp", "unaryOp", "binaryOp", "arithmeticOp", 
		"logicalOp", "conditionalOp", "type", "dataStructureType", "genericSpecifier", 
		"tupleType", "funcType"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#'", "'abstract'", "'call'", "'case'", "'catch'", 
		"'class'", "'constant'", "'constructor'", "'curry'", "'default'", "'else'", 
		"'end'", "'enum'", "'for'", "'foreach'", "'function'", "'global'", "'if'", 
		"'immutable'", "'in'", "'inherits'", "'lambda'", "'let'", "'main'", "'partial'", 
		"'private'", "'procedure'", "'property'", "'repeat'", "'return'", "'self'", 
		"'set'", "'step'", "'switch'", "'test'", "'then'", "'to'", "'try'", "'until'", 
		"'var'", "'while'", "'with'", null, null, "'Array'", "'List'", "'Dictionary'", 
		"'Iter'", "'='", "'->'", "'{'", "'}'", "'['", "']'", "'('", "')'", "'..'", 
		"'.'", "','", "':'", "'+'", "'-'", "'*'", "'/'", "'^'", "'mod'", "'div'", 
		"'<'", "'>'", "'and'", "'not'", "'or'", "'xor'", "'is'", null, "'<='", 
		"'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NL", "SINGLE_LINE_COMMENT", "COMMENT_MARKER", "ABSTRACT", "CALL", 
		"CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", "CURRY", "DEFAULT", 
		"ELSE", "END", "ENUM", "FOR", "FOREACH", "FUNCTION", "GLOBAL", "IF", "IMMUTABLE", 
		"IN", "INHERITS", "LAMBDA", "LET", "MAIN", "PARTIAL", "PRIVATE", "PROCEDURE", 
		"PROPERTY", "REPEAT", "RETURN", "SELF", "SET", "STEP", "SWITCH", "TEST", 
		"THEN", "TO", "TRY", "UNTIL", "VAR", "WHILE", "WITH", "BOOL_VALUE", "VALUE_TYPE", 
		"ARRAY", "LIST", "DICTIONARY", "ITERABLE", "ASSIGN", "ARROW", "OPEN_BRACE", 
		"CLOSE_BRACE", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "DOUBLE_DOT", "DOT", "COMMA", "COLON", "PLUS", "MINUS", 
		"MULT", "DIVIDE", "POWER", "MOD", "INT_DIV", "LT", "GT", "OP_AND", "OP_NOT", 
		"OP_OR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "TYPENAME", "IDENTIFIER", 
		"LITERAL_INTEGER", "LITERAL_FLOAT", "LITERAL_CHAR", "LITERAL_STRING", 
		"WHITESPACES", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Elan.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ElanParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElanParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElanParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ElanParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext[] enumDef() {
			return GetRuleContexts<EnumDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef(int i) {
			return GetRuleContext<EnumDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 161;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 154;
						main();
						}
						break;
					case 2:
						{
						State = 155;
						procedureDef();
						}
						break;
					case 3:
						{
						State = 156;
						functionDef();
						}
						break;
					case 4:
						{
						State = 157;
						constantDef();
						}
						break;
					case 5:
						{
						State = 158;
						enumDef();
						}
						break;
					case 6:
						{
						State = 159;
						classDef();
						}
						break;
					case 7:
						{
						State = 160;
						test();
						}
						break;
					}
					} 
				}
				State = 165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 166;
				Match(NL);
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(ElanParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(ElanParser.MAIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(NL);
			State = 175;
			Match(MAIN);
			State = 176;
			statementBlock();
			State = 177;
			Match(NL);
			State = 178;
			Match(END);
			State = 179;
			Match(MAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEST() { return GetTokens(ElanParser.TEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEST(int i) {
			return GetToken(ElanParser.TEST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public TestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTest(this);
		}
	}

	[RuleVersion(0)]
	public TestContext test() {
		TestContext _localctx = new TestContext(Context, State);
		EnterRule(_localctx, 4, RULE_test);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(NL);
			State = 182;
			Match(TEST);
			State = 183;
			Match(IDENTIFIER);
			State = 184;
			statementBlock();
			State = 185;
			Match(NL);
			State = 186;
			Match(END);
			State = 187;
			Match(TEST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext[] proceduralControlFlow() {
			return GetRuleContexts<ProceduralControlFlowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext proceduralControlFlow(int i) {
			return GetRuleContext<ProceduralControlFlowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 193;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 189;
						varDef();
						}
						break;
					case 2:
						{
						State = 190;
						assignment();
						}
						break;
					case 3:
						{
						State = 191;
						proceduralControlFlow();
						}
						break;
					case 4:
						{
						State = 192;
						callStatement();
						}
						break;
					}
					} 
				}
				State = 197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(ElanParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(NL);
			State = 199;
			Match(CALL);
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 200;
				methodCall();
				}
				break;
			case 2:
				{
				{
				State = 201;
				assignableValue();
				State = 202;
				Match(DOT);
				State = 203;
				methodCall();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ElanParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterVarDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitVarDef(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(NL);
			State = 208;
			Match(VAR);
			State = 209;
			assignableValue();
			State = 210;
			Match(ASSIGN);
			State = 211;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ElanParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(NL);
			State = 214;
			Match(SET);
			State = 215;
			assignableValue();
			State = 216;
			Match(TO);
			State = 217;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAsignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InlineAsignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAsignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterInlineAsignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitInlineAsignment(this);
		}
	}

	[RuleVersion(0)]
	public InlineAsignmentContext inlineAsignment() {
		InlineAsignmentContext _localctx = new InlineAsignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_inlineAsignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			assignableValue();
			State = 220;
			Match(ASSIGN);
			State = 221;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifierContext nameQualifier() {
			return GetRuleContext<NameQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeconstructedTupleContext deconstructedTuple() {
			return GetRuleContext<DeconstructedTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDecompContext listDecomp() {
			return GetRuleContext<ListDecompContext>(0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAssignableValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAssignableValue(this);
		}
	}

	[RuleVersion(0)]
	public AssignableValueContext assignableValue() {
		AssignableValueContext _localctx = new AssignableValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignableValue);
		int _la;
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL:
			case SELF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SELF) {
					{
					State = 223;
					nameQualifier();
					}
				}

				State = 226;
				Match(IDENTIFIER);
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_SQ_BRACKET) {
					{
					State = 227;
					index();
					}
				}

				}
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				deconstructedTuple();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				listDecomp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifierContext nameQualifier() {
			return GetRuleContext<NameQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRY() { return GetToken(ElanParser.CURRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(ElanParser.PARTIAL, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SELF) {
				{
				State = 234;
				nameQualifier();
				}
			}

			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRY || _la==PARTIAL) {
				{
				State = 237;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRY || _la==PARTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 240;
			Match(IDENTIFIER);
			State = 241;
			Match(OPEN_BRACKET);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 155339011548256258L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4129281L) != 0)) {
				{
				State = 242;
				argumentList();
				}
			}

			State = 245;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 20, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			expression(0);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 248;
				Match(COMMA);
				State = 249;
				expression(0);
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ProcedureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProcedureDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProcedureDef(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefContext procedureDef() {
		ProcedureDefContext _localctx = new ProcedureDefContext(Context, State);
		EnterRule(_localctx, 22, RULE_procedureDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(NL);
			State = 256;
			Match(PROCEDURE);
			State = 257;
			procedureSignature();
			State = 258;
			statementBlock();
			State = 259;
			Match(NL);
			State = 260;
			Match(END);
			State = 261;
			Match(PROCEDURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ProcedureSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProcedureSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProcedureSignature(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSignatureContext procedureSignature() {
		ProcedureSignatureContext _localctx = new ProcedureSignatureContext(Context, State);
		EnterRule(_localctx, 24, RULE_procedureSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(IDENTIFIER);
			State = 264;
			Match(OPEN_BRACKET);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 265;
				parameterList();
				}
			}

			State = 268;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			parameter();
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 271;
				Match(COMMA);
				State = 272;
				parameter();
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(IDENTIFIER);
			State = 279;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionWithBodyContext functionWithBody() {
			return GetRuleContext<FunctionWithBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionFunctionContext expressionFunction() {
			return GetRuleContext<ExpressionFunctionContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionDef);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				functionWithBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				expressionFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionWithBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElanParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public FunctionWithBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionWithBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFunctionWithBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFunctionWithBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionWithBodyContext functionWithBody() {
		FunctionWithBodyContext _localctx = new FunctionWithBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionWithBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(NL);
			State = 286;
			Match(FUNCTION);
			State = 287;
			functionSignature();
			State = 288;
			statementBlock();
			State = 289;
			Match(NL);
			State = 290;
			Match(RETURN);
			State = 291;
			expression(0);
			State = 292;
			Match(NL);
			State = 293;
			Match(END);
			State = 294;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ElanParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterExpressionFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitExpressionFunction(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionFunctionContext expressionFunction() {
		ExpressionFunctionContext _localctx = new ExpressionFunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_expressionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(NL);
			State = 297;
			Match(FUNCTION);
			State = 298;
			functionSignature();
			State = 299;
			Match(ASSIGN);
			State = 300;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ElanParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext[] assignableValue() {
			return GetRuleContexts<AssignableValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue(int i) {
			return GetRuleContext<AssignableValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(ElanParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(ElanParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LetInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLetIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLetIn(this);
		}
	}

	[RuleVersion(0)]
	public LetInContext letIn() {
		LetInContext _localctx = new LetInContext(Context, State);
		EnterRule(_localctx, 36, RULE_letIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(LET);
			State = 303;
			assignableValue();
			State = 304;
			Match(ASSIGN);
			State = 305;
			expression(0);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 306;
				Match(COMMA);
				State = 307;
				assignableValue();
				State = 308;
				Match(ASSIGN);
				State = 309;
				expression(0);
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 316;
			Match(NL);
			State = 317;
			Match(IN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(IDENTIFIER);
			State = 320;
			Match(OPEN_BRACKET);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 321;
				parameterList();
				}
			}

			State = 324;
			Match(CLOSE_BRACKET);
			State = 325;
			Match(ARROW);
			State = 326;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ElanParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		public ConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterConstantDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitConstantDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefContext constantDef() {
		ConstantDefContext _localctx = new ConstantDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_constantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(NL);
			State = 329;
			Match(CONSTANT);
			State = 330;
			Match(IDENTIFIER);
			State = 331;
			Match(ASSIGN);
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 332;
				literal();
				}
				break;
			case 2:
				{
				State = 333;
				newInstance();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENUM() { return GetTokens(ElanParser.ENUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM(int i) {
			return GetToken(ElanParser.ENUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterEnumDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitEnumDef(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			Match(NL);
			State = 337;
			Match(ENUM);
			State = 338;
			enumType();
			State = 339;
			Match(NL);
			State = 340;
			Match(IDENTIFIER);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 341;
				Match(COMMA);
				State = 342;
				Match(IDENTIFIER);
				}
				}
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 348;
			Match(NL);
			State = 349;
			Match(END);
			State = 350;
			Match(ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterEnumType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitEnumType(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_enumType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(TYPENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			enumType();
			State = 355;
			Match(DOT);
			State = 356;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MutableClassContext mutableClass() {
			return GetRuleContext<MutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractClassContext abstractClass() {
			return GetRuleContext<AbstractClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmutableClassContext immutableClass() {
			return GetRuleContext<ImmutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractImmutableClassContext abstractImmutableClass() {
			return GetRuleContext<AbstractImmutableClassContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 48, RULE_classDef);
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358;
				mutableClass();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359;
				abstractClass();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 360;
				immutableClass();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 361;
				abstractImmutableClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		public MutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterMutableClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitMutableClass(this);
		}
	}

	[RuleVersion(0)]
	public MutableClassContext mutableClass() {
		MutableClassContext _localctx = new MutableClassContext(Context, State);
		EnterRule(_localctx, 50, RULE_mutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(NL);
			State = 365;
			Match(CLASS);
			State = 366;
			Match(TYPENAME);
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 367;
				inherits();
				}
			}

			State = 370;
			constructor();
			State = 376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 374;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						State = 371;
						property();
						}
						break;
					case 2:
						{
						State = 372;
						functionDef();
						}
						break;
					case 3:
						{
						State = 373;
						procedureDef();
						}
						break;
					}
					} 
				}
				State = 378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 379;
			Match(NL);
			State = 380;
			Match(END);
			State = 381;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext[] procedureSignature() {
			return GetRuleContexts<ProcedureSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature(int i) {
			return GetRuleContext<ProcedureSignatureContext>(i);
		}
		public AbstractClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAbstractClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAbstractClass(this);
		}
	}

	[RuleVersion(0)]
	public AbstractClassContext abstractClass() {
		AbstractClassContext _localctx = new AbstractClassContext(Context, State);
		EnterRule(_localctx, 52, RULE_abstractClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(NL);
			State = 384;
			Match(ABSTRACT);
			State = 385;
			Match(CLASS);
			State = 386;
			Match(TYPENAME);
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 387;
				inherits();
				}
			}

			State = 399;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 397;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 390;
						property();
						}
						break;
					case 2:
						{
						State = 391;
						Match(NL);
						State = 392;
						Match(FUNCTION);
						State = 393;
						functionSignature();
						}
						break;
					case 3:
						{
						State = 394;
						Match(NL);
						State = 395;
						Match(PROCEDURE);
						State = 396;
						procedureSignature();
						}
						break;
					}
					} 
				}
				State = 401;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 402;
			Match(NL);
			State = 403;
			Match(END);
			State = 404;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterImmutableClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitImmutableClass(this);
		}
	}

	[RuleVersion(0)]
	public ImmutableClassContext immutableClass() {
		ImmutableClassContext _localctx = new ImmutableClassContext(Context, State);
		EnterRule(_localctx, 54, RULE_immutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(NL);
			State = 407;
			Match(IMMUTABLE);
			State = 408;
			Match(CLASS);
			State = 409;
			Match(TYPENAME);
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 410;
				inherits();
				}
			}

			State = 413;
			constructor();
			State = 418;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 416;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						State = 414;
						property();
						}
						break;
					case 2:
						{
						State = 415;
						functionDef();
						}
						break;
					}
					} 
				}
				State = 420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			State = 421;
			Match(NL);
			State = 422;
			Match(END);
			State = 423;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		public AbstractImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractImmutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterAbstractImmutableClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitAbstractImmutableClass(this);
		}
	}

	[RuleVersion(0)]
	public AbstractImmutableClassContext abstractImmutableClass() {
		AbstractImmutableClassContext _localctx = new AbstractImmutableClassContext(Context, State);
		EnterRule(_localctx, 56, RULE_abstractImmutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(NL);
			State = 426;
			Match(ABSTRACT);
			State = 427;
			Match(IMMUTABLE);
			State = 428;
			Match(CLASS);
			State = 429;
			Match(TYPENAME);
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 430;
				inherits();
				}
			}

			State = 439;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 437;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						State = 433;
						property();
						}
						break;
					case 2:
						{
						State = 434;
						Match(NL);
						State = 435;
						Match(FUNCTION);
						State = 436;
						functionSignature();
						}
						break;
					}
					} 
				}
				State = 441;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			State = 442;
			Match(NL);
			State = 443;
			Match(END);
			State = 444;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(ElanParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public InheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterInherits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitInherits(this);
		}
	}

	[RuleVersion(0)]
	public InheritsContext inherits() {
		InheritsContext _localctx = new InheritsContext(Context, State);
		EnterRule(_localctx, 58, RULE_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(INHERITS);
			State = 447;
			type();
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 448;
				Match(COMMA);
				State = 449;
				type();
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(ElanParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ElanParser.PRIVATE, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 60, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			Match(NL);
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 456;
				Match(PRIVATE);
				}
			}

			State = 459;
			Match(PROPERTY);
			State = 460;
			Match(IDENTIFIER);
			State = 461;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRUCTOR() { return GetTokens(ElanParser.CONSTRUCTOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(ElanParser.CONSTRUCTOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 62, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(NL);
			State = 464;
			Match(CONSTRUCTOR);
			State = 465;
			Match(OPEN_BRACKET);
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 466;
				parameterList();
				}
			}

			State = 469;
			Match(CLOSE_BRACKET);
			State = 470;
			statementBlock();
			State = 471;
			Match(NL);
			State = 472;
			Match(END);
			State = 473;
			Match(CONSTRUCTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterNewInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitNewInstance(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(Context, State);
		EnterRule(_localctx, 64, RULE_newInstance);
		int _la;
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUE_TYPE:
			case ARRAY:
			case LIST:
			case DICTIONARY:
			case ITERABLE:
			case OPEN_BRACKET:
			case TYPENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				type();
				State = 476;
				Match(OPEN_BRACKET);
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 155339011548256258L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4129281L) != 0)) {
					{
					State = 477;
					argumentList();
					}
				}

				State = 480;
				Match(CLOSE_BRACKET);
				State = 482;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 481;
					withClause();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484;
				Match(IDENTIFIER);
				State = 485;
				withClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(ElanParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InlineAsignmentContext[] inlineAsignment() {
			return GetRuleContexts<InlineAsignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineAsignmentContext inlineAsignment(int i) {
			return GetRuleContext<InlineAsignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 66, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(WITH);
			State = 489;
			Match(OPEN_BRACE);
			State = 490;
			inlineAsignment();
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 491;
				Match(COMMA);
				State = 492;
				inlineAsignment();
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 498;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduralControlFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachContext @foreach() {
			return GetRuleContext<ForeachContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryContext @try() {
			return GetRuleContext<TryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ProceduralControlFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proceduralControlFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterProceduralControlFlow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitProceduralControlFlow(this);
		}
	}

	[RuleVersion(0)]
	public ProceduralControlFlowContext proceduralControlFlow() {
		ProceduralControlFlowContext _localctx = new ProceduralControlFlowContext(Context, State);
		EnterRule(_localctx, 68, RULE_proceduralControlFlow);
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 500;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 501;
				@for();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 502;
				@foreach();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 503;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 504;
				repeat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 505;
				@try();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 506;
				@switch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(ElanParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(ElanParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(ElanParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(ElanParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(ElanParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(ElanParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 70, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(NL);
			State = 510;
			Match(IF);
			State = 511;
			expression(0);
			State = 512;
			Match(THEN);
			State = 513;
			statementBlock();
			State = 523;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 514;
					Match(NL);
					State = 515;
					Match(ELSE);
					State = 516;
					Match(IF);
					State = 517;
					expression(0);
					State = 518;
					Match(THEN);
					State = 519;
					statementBlock();
					}
					} 
				}
				State = 525;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 526;
				Match(NL);
				State = 527;
				Match(ELSE);
				State = 528;
				statementBlock();
				}
				break;
			}
			State = 531;
			Match(NL);
			State = 532;
			Match(END);
			State = 533;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(ElanParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(ElanParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(ElanParser.STEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 72, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(NL);
			State = 536;
			Match(FOR);
			State = 537;
			Match(IDENTIFIER);
			State = 538;
			Match(ASSIGN);
			State = 539;
			expression(0);
			State = 540;
			Match(TO);
			State = 541;
			expression(0);
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 542;
				Match(STEP);
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 543;
					Match(MINUS);
					}
				}

				State = 546;
				Match(LITERAL_INTEGER);
				}
			}

			State = 549;
			statementBlock();
			State = 550;
			Match(NL);
			State = 551;
			Match(END);
			State = 552;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOREACH() { return GetTokens(ElanParser.FOREACH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH(int i) {
			return GetToken(ElanParser.FOREACH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ForeachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterForeach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitForeach(this);
		}
	}

	[RuleVersion(0)]
	public ForeachContext @foreach() {
		ForeachContext _localctx = new ForeachContext(Context, State);
		EnterRule(_localctx, 74, RULE_foreach);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(NL);
			State = 555;
			Match(FOREACH);
			State = 556;
			Match(IDENTIFIER);
			State = 557;
			Match(IN);
			State = 558;
			expression(0);
			State = 559;
			statementBlock();
			State = 560;
			Match(NL);
			State = 561;
			Match(END);
			State = 562;
			Match(FOREACH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(ElanParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(ElanParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 76, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			Match(NL);
			State = 565;
			Match(WHILE);
			State = 566;
			expression(0);
			State = 567;
			statementBlock();
			State = 568;
			Match(NL);
			State = 569;
			Match(END);
			State = 570;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(ElanParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(ElanParser.REPEAT, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 78, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			Match(NL);
			{
			State = 573;
			Match(REPEAT);
			}
			State = 574;
			statementBlock();
			State = 575;
			Match(NL);
			State = 576;
			Match(UNTIL);
			State = 577;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(ElanParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(ElanParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ElanParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public TryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTry(this);
		}
	}

	[RuleVersion(0)]
	public TryContext @try() {
		TryContext _localctx = new TryContext(Context, State);
		EnterRule(_localctx, 80, RULE_try);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(NL);
			State = 580;
			Match(TRY);
			State = 581;
			statementBlock();
			State = 582;
			Match(NL);
			State = 583;
			Match(CATCH);
			State = 584;
			Match(IDENTIFIER);
			State = 585;
			statementBlock();
			State = 586;
			Match(NL);
			State = 587;
			Match(END);
			State = 588;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(ElanParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(ElanParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseDefaultContext caseDefault() {
			return GetRuleContext<CaseDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterSwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitSwitch(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 82, RULE_switch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			Match(NL);
			State = 591;
			Match(SWITCH);
			State = 592;
			expression(0);
			State = 594;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 593;
					@case();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 596;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 598;
			caseDefault();
			State = 599;
			Match(NL);
			State = 600;
			Match(END);
			State = 601;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(ElanParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 84, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(NL);
			State = 604;
			Match(CASE);
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 605;
				Match(MINUS);
				}
			}

			State = 608;
			literalValue();
			State = 609;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterCaseDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitCaseDefault(this);
		}
	}

	[RuleVersion(0)]
	public CaseDefaultContext caseDefault() {
		CaseDefaultContext _localctx = new CaseDefaultContext(Context, State);
		EnterRule(_localctx, 86, RULE_caseDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(NL);
			State = 612;
			Match(DEFAULT);
			State = 613;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracketedExpressionContext bracketedExpression() {
			return GetRuleContext<BracketedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetInContext letIn() {
			return GetRuleContext<LetInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 616;
				bracketedExpression();
				}
				break;
			case 2:
				{
				State = 617;
				methodCall();
				}
				break;
			case 3:
				{
				State = 618;
				value();
				}
				break;
			case 4:
				{
				State = 619;
				unaryOp();
				State = 620;
				expression(9);
				}
				break;
			case 5:
				{
				State = 622;
				newInstance();
				}
				break;
			case 6:
				{
				State = 623;
				ifExpression();
				}
				break;
			case 7:
				{
				State = 624;
				lambda();
				}
				break;
			case 8:
				{
				State = 625;
				letIn();
				State = 626;
				expression(3);
				}
				break;
			case 9:
				{
				State = 628;
				Match(NL);
				State = 629;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 651;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 649;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 632;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 633;
						Match(POWER);
						State = 634;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 635;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 636;
						binaryOp();
						State = 637;
						expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 639;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 640;
						index();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 641;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 642;
						Match(DOT);
						State = 643;
						methodCall();
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 644;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 645;
						Match(DOT);
						State = 646;
						Match(IDENTIFIER);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 647;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 648;
						withClause();
						}
						break;
					}
					} 
				}
				State = 653;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracketedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public BracketedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterBracketedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitBracketedExpression(this);
		}
	}

	[RuleVersion(0)]
	public BracketedExpressionContext bracketedExpression() {
		BracketedExpressionContext _localctx = new BracketedExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_bracketedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			Match(OPEN_BRACKET);
			State = 655;
			expression(0);
			State = 656;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ElanParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ElanParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ElanParser.ELSE, 0); }
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_ifExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(IF);
			State = 659;
			expression(0);
			State = 660;
			Match(NL);
			State = 661;
			Match(THEN);
			State = 662;
			expression(0);
			State = 663;
			Match(NL);
			State = 664;
			Match(ELSE);
			State = 665;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(ElanParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 94, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			Match(LAMBDA);
			State = 668;
			argumentList();
			State = 669;
			Match(ARROW);
			State = 670;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(ElanParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(ElanParser.CLOSE_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ElanParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 96, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			Match(OPEN_SQ_BRACKET);
			State = 679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 673;
				expression(0);
				}
				break;
			case 2:
				{
				State = 674;
				expression(0);
				State = 675;
				Match(COMMA);
				State = 676;
				expression(0);
				}
				break;
			case 3:
				{
				State = 678;
				range();
				}
				break;
			}
			State = 681;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(ElanParser.DOUBLE_DOT, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 98, RULE_range);
		try {
			State = 692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 683;
				expression(0);
				State = 684;
				Match(DOUBLE_DOT);
				State = 685;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 687;
				expression(0);
				State = 688;
				Match(DOUBLE_DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 690;
				Match(DOUBLE_DOT);
				State = 691;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifierContext nameQualifier() {
			return GetRuleContext<NameQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureDefinitionContext dataStructureDefinition() {
			return GetRuleContext<DataStructureDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 100, RULE_value);
		int _la;
		try {
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SELF) {
					{
					State = 695;
					nameQualifier();
					}
				}

				State = 698;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 699;
				dataStructureDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 700;
				Match(SELF);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 701;
				Match(DEFAULT);
				State = 702;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(ElanParser.GLOBAL, 0); }
		public NameQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterNameQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitNameQualifier(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifierContext nameQualifier() {
		NameQualifierContext _localctx = new NameQualifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_nameQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL || _la==SELF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 706;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDataStructureContext literalDataStructure() {
			return GetRuleContext<LiteralDataStructureContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 104, RULE_literal);
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
			case TYPENAME:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 708;
				literalValue();
				}
				break;
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 709;
				literalDataStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VALUE() { return GetToken(ElanParser.BOOL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(ElanParser.LITERAL_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_CHAR() { return GetToken(ElanParser.LITERAL_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 106, RULE_literalValue);
		try {
			State = 717;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712;
				Match(BOOL_VALUE);
				}
				break;
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 713;
				Match(LITERAL_INTEGER);
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 714;
				Match(LITERAL_FLOAT);
				}
				break;
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 715;
				Match(LITERAL_CHAR);
				}
				break;
			case TYPENAME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 716;
				enumValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListDefinitionContext listDefinition() {
			return GetRuleContext<ListDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDefinitionContext arrayDefinition() {
			return GetRuleContext<ArrayDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleDefinitionContext tupleDefinition() {
			return GetRuleContext<TupleDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryDefinitionContext dictionaryDefinition() {
			return GetRuleContext<DictionaryDefinitionContext>(0);
		}
		public DataStructureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDataStructureDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDataStructureDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureDefinitionContext dataStructureDefinition() {
		DataStructureDefinitionContext _localctx = new DataStructureDefinitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_dataStructureDefinition);
		try {
			State = 723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 719;
				listDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 720;
				arrayDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 721;
				tupleDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 722;
				dictionaryDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDataStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTupleContext literalTuple() {
			return GetRuleContext<LiteralTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralListContext literalList() {
			return GetRuleContext<LiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDictionaryContext literalDictionary() {
			return GetRuleContext<LiteralDictionaryContext>(0);
		}
		public LiteralDataStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDataStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralDataStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralDataStructure(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDataStructureContext literalDataStructure() {
		LiteralDataStructureContext _localctx = new LiteralDataStructureContext(Context, State);
		EnterRule(_localctx, 110, RULE_literalDataStructure);
		try {
			State = 729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 725;
				Match(LITERAL_STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 726;
				literalTuple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 727;
				literalList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 728;
				literalDictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public TupleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTupleDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTupleDefinition(this);
		}
	}

	[RuleVersion(0)]
	public TupleDefinitionContext tupleDefinition() {
		TupleDefinitionContext _localctx = new TupleDefinitionContext(Context, State);
		EnterRule(_localctx, 112, RULE_tupleDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			Match(OPEN_BRACKET);
			State = 732;
			expression(0);
			State = 733;
			Match(COMMA);
			State = 734;
			expression(0);
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 735;
				Match(COMMA);
				State = 736;
				expression(0);
				}
				}
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 742;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public LiteralTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralTuple(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTupleContext literalTuple() {
		LiteralTupleContext _localctx = new LiteralTupleContext(Context, State);
		EnterRule(_localctx, 114, RULE_literalTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			Match(OPEN_BRACKET);
			State = 745;
			literal();
			State = 746;
			Match(COMMA);
			State = 747;
			literal();
			State = 752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 748;
				Match(COMMA);
				State = 749;
				literal();
				}
				}
				State = 754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 755;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeconstructedTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(ElanParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(ElanParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DeconstructedTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deconstructedTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDeconstructedTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDeconstructedTuple(this);
		}
	}

	[RuleVersion(0)]
	public DeconstructedTupleContext deconstructedTuple() {
		DeconstructedTupleContext _localctx = new DeconstructedTupleContext(Context, State);
		EnterRule(_localctx, 116, RULE_deconstructedTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			Match(OPEN_BRACKET);
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR) {
				{
				State = 758;
				Match(VAR);
				}
			}

			State = 761;
			Match(IDENTIFIER);
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 762;
				Match(COMMA);
				State = 764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VAR) {
					{
					State = 763;
					Match(VAR);
					}
				}

				State = 766;
				Match(IDENTIFIER);
				}
				}
				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 771;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ListDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterListDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitListDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ListDefinitionContext listDefinition() {
		ListDefinitionContext _localctx = new ListDefinitionContext(Context, State);
		EnterRule(_localctx, 118, RULE_listDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(OPEN_BRACE);
			{
			State = 774;
			expression(0);
			State = 779;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 775;
				Match(COMMA);
				State = 776;
				expression(0);
				}
				}
				State = 781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 782;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralList(this);
		}
	}

	[RuleVersion(0)]
	public LiteralListContext literalList() {
		LiteralListContext _localctx = new LiteralListContext(Context, State);
		EnterRule(_localctx, 120, RULE_literalList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			Match(OPEN_BRACE);
			{
			State = 785;
			literal();
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 786;
				Match(COMMA);
				State = 787;
				literal();
				}
				}
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 793;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		public ListDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterListDecomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitListDecomp(this);
		}
	}

	[RuleVersion(0)]
	public ListDecompContext listDecomp() {
		ListDecompContext _localctx = new ListDecompContext(Context, State);
		EnterRule(_localctx, 122, RULE_listDecomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			Match(OPEN_BRACE);
			State = 796;
			Match(IDENTIFIER);
			State = 797;
			Match(COLON);
			State = 798;
			Match(IDENTIFIER);
			State = 799;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		public ArrayDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterArrayDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitArrayDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDefinitionContext arrayDefinition() {
		ArrayDefinitionContext _localctx = new ArrayDefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_arrayDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			Match(ARRAY);
			State = 802;
			genericSpecifier();
			State = 803;
			Match(OPEN_BRACKET);
			State = 805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LITERAL_INTEGER) {
				{
				State = 804;
				Match(LITERAL_INTEGER);
				}
			}

			State = 807;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext[] kvp() {
			return GetRuleContexts<KvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext kvp(int i) {
			return GetRuleContext<KvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DictionaryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDictionaryDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDictionaryDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryDefinitionContext dictionaryDefinition() {
		DictionaryDefinitionContext _localctx = new DictionaryDefinitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_dictionaryDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			Match(OPEN_BRACE);
			{
			State = 810;
			kvp();
			State = 815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 811;
				Match(COMMA);
				State = 812;
				kvp();
				}
				}
				State = 817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 818;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext[] literalKvp() {
			return GetRuleContexts<LiteralKvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext literalKvp(int i) {
			return GetRuleContext<LiteralKvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralDictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralDictionary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralDictionary(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDictionaryContext literalDictionary() {
		LiteralDictionaryContext _localctx = new LiteralDictionaryContext(Context, State);
		EnterRule(_localctx, 128, RULE_literalDictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(OPEN_BRACE);
			{
			State = 821;
			literalKvp();
			State = 826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 822;
				Match(COMMA);
				State = 823;
				literalKvp();
				}
				}
				State = 828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 829;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public KvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterKvp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitKvp(this);
		}
	}

	[RuleVersion(0)]
	public KvpContext kvp() {
		KvpContext _localctx = new KvpContext(Context, State);
		EnterRule(_localctx, 130, RULE_kvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			expression(0);
			State = 832;
			Match(COLON);
			State = 833;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralKvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public LiteralKvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalKvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLiteralKvp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLiteralKvp(this);
		}
	}

	[RuleVersion(0)]
	public LiteralKvpContext literalKvp() {
		LiteralKvpContext _localctx = new LiteralKvpContext(Context, State);
		EnterRule(_localctx, 132, RULE_literalKvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835;
			literal();
			State = 836;
			Match(COLON);
			State = 837;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(ElanParser.OP_NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 134, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==OP_NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOpContext arithmeticOp() {
			return GetRuleContext<ArithmeticOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 136, RULE_binaryOp);
		try {
			State = 844;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case MULT:
			case DIVIDE:
			case POWER:
			case MOD:
			case INT_DIV:
				EnterOuterAlt(_localctx, 1);
				{
				State = 841;
				arithmeticOp();
				}
				break;
			case OP_AND:
			case OP_OR:
			case OP_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 842;
				logicalOp();
				}
				break;
			case LT:
			case GT:
			case OP_EQ:
			case OP_NE:
			case OP_LE:
			case OP_GE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 843;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(ElanParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ElanParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ElanParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DIV() { return GetToken(ElanParser.INT_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ElanParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ArithmeticOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterArithmeticOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitArithmeticOp(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOpContext arithmeticOp() {
		ArithmeticOpContext _localctx = new ArithmeticOpContext(Context, State);
		EnterRule(_localctx, 138, RULE_arithmeticOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(ElanParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(ElanParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(ElanParser.OP_XOR, 0); }
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterLogicalOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitLogicalOp(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 140, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(ElanParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(ElanParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(ElanParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(ElanParser.OP_NE, 0); }
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterConditionalOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitConditionalOp(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 142, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 963L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_TYPE() { return GetToken(ElanParser.VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureTypeContext dataStructureType() {
			return GetRuleContext<DataStructureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_type);
		try {
			State = 859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 852;
				Match(VALUE_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 853;
				dataStructureType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 854;
				Match(TYPENAME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 855;
				Match(TYPENAME);
				State = 856;
				genericSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 857;
				tupleType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 858;
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ElanParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(ElanParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERABLE() { return GetToken(ElanParser.ITERABLE, 0); }
		public DataStructureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterDataStructureType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitDataStructureType(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureTypeContext dataStructureType() {
		DataStructureTypeContext _localctx = new DataStructureTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_dataStructureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 862;
			genericSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public GenericSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterGenericSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitGenericSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public GenericSpecifierContext genericSpecifier() {
		GenericSpecifierContext _localctx = new GenericSpecifierContext(Context, State);
		EnterRule(_localctx, 148, RULE_genericSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			Match(LT);
			State = 865;
			type();
			State = 870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 866;
				Match(COMMA);
				State = 867;
				type();
				}
				}
				State = 872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 873;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			Match(OPEN_BRACKET);
			State = 876;
			type();
			State = 879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 877;
				Match(COMMA);
				State = 878;
				type();
				}
				}
				State = 881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 883;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.EnterFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElanListener typedListener = listener as IElanListener;
			if (typedListener != null) typedListener.ExitFuncType(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			Match(OPEN_BRACKET);
			State = 886;
			type();
			State = 891;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 887;
				Match(COMMA);
				State = 888;
				type();
				}
				}
				State = 893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 894;
			Match(ARROW);
			State = 895;
			type();
			State = 896;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 44: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,88,899,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,5,0,162,8,0,10,0,12,0,165,9,0,1,0,5,0,168,8,0,10,0,12,
		0,171,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,3,1,3,1,3,1,3,5,3,194,8,3,10,3,12,3,197,9,3,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,3,4,206,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
		6,1,7,1,7,1,7,1,7,1,8,3,8,225,8,8,1,8,1,8,3,8,229,8,8,1,8,1,8,3,8,233,
		8,8,1,9,3,9,236,8,9,1,9,3,9,239,8,9,1,9,1,9,1,9,3,9,244,8,9,1,9,1,9,1,
		10,1,10,1,10,5,10,251,8,10,10,10,12,10,254,9,10,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,12,1,12,1,12,3,12,267,8,12,1,12,1,12,1,13,1,13,1,13,
		5,13,274,8,13,10,13,12,13,277,9,13,1,14,1,14,1,14,1,15,1,15,3,15,284,8,
		15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
		17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,312,
		8,18,10,18,12,18,315,9,18,1,18,1,18,1,18,1,19,1,19,1,19,3,19,323,8,19,
		1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,335,8,20,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,5,21,344,8,21,10,21,12,21,347,9,21,1,21,1,
		21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,3,24,363,
		8,24,1,25,1,25,1,25,1,25,3,25,369,8,25,1,25,1,25,1,25,1,25,5,25,375,8,
		25,10,25,12,25,378,9,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,3,
		26,389,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,398,8,26,10,26,12,
		26,401,9,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,27,412,8,27,
		1,27,1,27,1,27,5,27,417,8,27,10,27,12,27,420,9,27,1,27,1,27,1,27,1,27,
		1,28,1,28,1,28,1,28,1,28,1,28,3,28,432,8,28,1,28,1,28,1,28,1,28,5,28,438,
		8,28,10,28,12,28,441,9,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,5,29,
		451,8,29,10,29,12,29,454,9,29,1,30,1,30,3,30,458,8,30,1,30,1,30,1,30,1,
		30,1,31,1,31,1,31,1,31,3,31,468,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,
		1,32,1,32,3,32,479,8,32,1,32,1,32,3,32,483,8,32,1,32,1,32,3,32,487,8,32,
		1,33,1,33,1,33,1,33,1,33,5,33,494,8,33,10,33,12,33,497,9,33,1,33,1,33,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,508,8,34,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,522,8,35,10,35,12,35,525,9,
		35,1,35,1,35,1,35,3,35,530,8,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,1,36,1,36,3,36,545,8,36,1,36,3,36,548,8,36,1,36,1,36,1,
		36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,
		41,4,41,595,8,41,11,41,12,41,596,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,
		42,3,42,607,8,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,631,8,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
		44,1,44,1,44,5,44,650,8,44,10,44,12,44,653,9,44,1,45,1,45,1,45,1,45,1,
		46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,
		48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,680,8,48,1,48,1,48,1,49,1,49,1,49,
		1,49,1,49,1,49,1,49,1,49,1,49,3,49,693,8,49,1,50,1,50,3,50,697,8,50,1,
		50,1,50,1,50,1,50,1,50,3,50,704,8,50,1,51,1,51,1,51,1,52,1,52,3,52,711,
		8,52,1,53,1,53,1,53,1,53,1,53,3,53,718,8,53,1,54,1,54,1,54,1,54,3,54,724,
		8,54,1,55,1,55,1,55,1,55,3,55,730,8,55,1,56,1,56,1,56,1,56,1,56,1,56,5,
		56,738,8,56,10,56,12,56,741,9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,
		57,5,57,751,8,57,10,57,12,57,754,9,57,1,57,1,57,1,58,1,58,3,58,760,8,58,
		1,58,1,58,1,58,3,58,765,8,58,1,58,4,58,768,8,58,11,58,12,58,769,1,58,1,
		58,1,59,1,59,1,59,1,59,5,59,778,8,59,10,59,12,59,781,9,59,1,59,1,59,1,
		60,1,60,1,60,1,60,5,60,789,8,60,10,60,12,60,792,9,60,1,60,1,60,1,61,1,
		61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,3,62,806,8,62,1,62,1,62,1,63,
		1,63,1,63,1,63,5,63,814,8,63,10,63,12,63,817,9,63,1,63,1,63,1,64,1,64,
		1,64,1,64,5,64,825,8,64,10,64,12,64,828,9,64,1,64,1,64,1,65,1,65,1,65,
		1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,68,1,68,1,68,3,68,845,8,68,1,69,1,
		69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,860,8,72,
		1,73,1,73,1,73,1,74,1,74,1,74,1,74,5,74,869,8,74,10,74,12,74,872,9,74,
		1,74,1,74,1,75,1,75,1,75,1,75,4,75,880,8,75,11,75,12,75,881,1,75,1,75,
		1,76,1,76,1,76,1,76,5,76,890,8,76,10,76,12,76,893,9,76,1,76,1,76,1,76,
		1,76,1,76,0,1,88,77,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,138,140,142,144,146,148,150,152,0,7,2,0,11,11,
		27,27,2,0,19,19,33,33,2,0,64,64,73,73,1,0,63,69,2,0,72,72,74,75,2,0,70,
		71,76,79,1,0,47,50,939,0,163,1,0,0,0,2,174,1,0,0,0,4,181,1,0,0,0,6,195,
		1,0,0,0,8,198,1,0,0,0,10,207,1,0,0,0,12,213,1,0,0,0,14,219,1,0,0,0,16,
		232,1,0,0,0,18,235,1,0,0,0,20,247,1,0,0,0,22,255,1,0,0,0,24,263,1,0,0,
		0,26,270,1,0,0,0,28,278,1,0,0,0,30,283,1,0,0,0,32,285,1,0,0,0,34,296,1,
		0,0,0,36,302,1,0,0,0,38,319,1,0,0,0,40,328,1,0,0,0,42,336,1,0,0,0,44,352,
		1,0,0,0,46,354,1,0,0,0,48,362,1,0,0,0,50,364,1,0,0,0,52,383,1,0,0,0,54,
		406,1,0,0,0,56,425,1,0,0,0,58,446,1,0,0,0,60,455,1,0,0,0,62,463,1,0,0,
		0,64,486,1,0,0,0,66,488,1,0,0,0,68,507,1,0,0,0,70,509,1,0,0,0,72,535,1,
		0,0,0,74,554,1,0,0,0,76,564,1,0,0,0,78,572,1,0,0,0,80,579,1,0,0,0,82,590,
		1,0,0,0,84,603,1,0,0,0,86,611,1,0,0,0,88,630,1,0,0,0,90,654,1,0,0,0,92,
		658,1,0,0,0,94,667,1,0,0,0,96,672,1,0,0,0,98,692,1,0,0,0,100,703,1,0,0,
		0,102,705,1,0,0,0,104,710,1,0,0,0,106,717,1,0,0,0,108,723,1,0,0,0,110,
		729,1,0,0,0,112,731,1,0,0,0,114,744,1,0,0,0,116,757,1,0,0,0,118,773,1,
		0,0,0,120,784,1,0,0,0,122,795,1,0,0,0,124,801,1,0,0,0,126,809,1,0,0,0,
		128,820,1,0,0,0,130,831,1,0,0,0,132,835,1,0,0,0,134,839,1,0,0,0,136,844,
		1,0,0,0,138,846,1,0,0,0,140,848,1,0,0,0,142,850,1,0,0,0,144,859,1,0,0,
		0,146,861,1,0,0,0,148,864,1,0,0,0,150,875,1,0,0,0,152,885,1,0,0,0,154,
		162,3,2,1,0,155,162,3,22,11,0,156,162,3,30,15,0,157,162,3,40,20,0,158,
		162,3,42,21,0,159,162,3,48,24,0,160,162,3,4,2,0,161,154,1,0,0,0,161,155,
		1,0,0,0,161,156,1,0,0,0,161,157,1,0,0,0,161,158,1,0,0,0,161,159,1,0,0,
		0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,
		169,1,0,0,0,165,163,1,0,0,0,166,168,5,1,0,0,167,166,1,0,0,0,168,171,1,
		0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,
		172,173,5,0,0,1,173,1,1,0,0,0,174,175,5,1,0,0,175,176,5,26,0,0,176,177,
		3,6,3,0,177,178,5,1,0,0,178,179,5,14,0,0,179,180,5,26,0,0,180,3,1,0,0,
		0,181,182,5,1,0,0,182,183,5,37,0,0,183,184,5,81,0,0,184,185,3,6,3,0,185,
		186,5,1,0,0,186,187,5,14,0,0,187,188,5,37,0,0,188,5,1,0,0,0,189,194,3,
		10,5,0,190,194,3,12,6,0,191,194,3,68,34,0,192,194,3,8,4,0,193,189,1,0,
		0,0,193,190,1,0,0,0,193,191,1,0,0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,
		193,1,0,0,0,195,196,1,0,0,0,196,7,1,0,0,0,197,195,1,0,0,0,198,199,5,1,
		0,0,199,205,5,5,0,0,200,206,3,18,9,0,201,202,3,16,8,0,202,203,5,60,0,0,
		203,204,3,18,9,0,204,206,1,0,0,0,205,200,1,0,0,0,205,201,1,0,0,0,206,9,
		1,0,0,0,207,208,5,1,0,0,208,209,5,42,0,0,209,210,3,16,8,0,210,211,5,51,
		0,0,211,212,3,88,44,0,212,11,1,0,0,0,213,214,5,1,0,0,214,215,5,34,0,0,
		215,216,3,16,8,0,216,217,5,39,0,0,217,218,3,88,44,0,218,13,1,0,0,0,219,
		220,3,16,8,0,220,221,5,51,0,0,221,222,3,88,44,0,222,15,1,0,0,0,223,225,
		3,102,51,0,224,223,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,228,5,81,
		0,0,227,229,3,96,48,0,228,227,1,0,0,0,228,229,1,0,0,0,229,233,1,0,0,0,
		230,233,3,116,58,0,231,233,3,122,61,0,232,224,1,0,0,0,232,230,1,0,0,0,
		232,231,1,0,0,0,233,17,1,0,0,0,234,236,3,102,51,0,235,234,1,0,0,0,235,
		236,1,0,0,0,236,238,1,0,0,0,237,239,7,0,0,0,238,237,1,0,0,0,238,239,1,
		0,0,0,239,240,1,0,0,0,240,241,5,81,0,0,241,243,5,57,0,0,242,244,3,20,10,
		0,243,242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,5,58,0,0,246,
		19,1,0,0,0,247,252,3,88,44,0,248,249,5,61,0,0,249,251,3,88,44,0,250,248,
		1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,21,1,0,0,0,
		254,252,1,0,0,0,255,256,5,1,0,0,256,257,5,29,0,0,257,258,3,24,12,0,258,
		259,3,6,3,0,259,260,5,1,0,0,260,261,5,14,0,0,261,262,5,29,0,0,262,23,1,
		0,0,0,263,264,5,81,0,0,264,266,5,57,0,0,265,267,3,26,13,0,266,265,1,0,
		0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,5,58,0,0,269,25,1,0,0,0,270,
		275,3,28,14,0,271,272,5,61,0,0,272,274,3,28,14,0,273,271,1,0,0,0,274,277,
		1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,27,1,0,0,0,277,275,1,0,0,0,
		278,279,5,81,0,0,279,280,3,144,72,0,280,29,1,0,0,0,281,284,3,32,16,0,282,
		284,3,34,17,0,283,281,1,0,0,0,283,282,1,0,0,0,284,31,1,0,0,0,285,286,5,
		1,0,0,286,287,5,18,0,0,287,288,3,38,19,0,288,289,3,6,3,0,289,290,5,1,0,
		0,290,291,5,32,0,0,291,292,3,88,44,0,292,293,5,1,0,0,293,294,5,14,0,0,
		294,295,5,18,0,0,295,33,1,0,0,0,296,297,5,1,0,0,297,298,5,18,0,0,298,299,
		3,38,19,0,299,300,5,51,0,0,300,301,3,88,44,0,301,35,1,0,0,0,302,303,5,
		25,0,0,303,304,3,16,8,0,304,305,5,51,0,0,305,313,3,88,44,0,306,307,5,61,
		0,0,307,308,3,16,8,0,308,309,5,51,0,0,309,310,3,88,44,0,310,312,1,0,0,
		0,311,306,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,
		316,1,0,0,0,315,313,1,0,0,0,316,317,5,1,0,0,317,318,5,22,0,0,318,37,1,
		0,0,0,319,320,5,81,0,0,320,322,5,57,0,0,321,323,3,26,13,0,322,321,1,0,
		0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,325,5,58,0,0,325,326,5,52,0,0,
		326,327,3,144,72,0,327,39,1,0,0,0,328,329,5,1,0,0,329,330,5,9,0,0,330,
		331,5,81,0,0,331,334,5,51,0,0,332,335,3,104,52,0,333,335,3,64,32,0,334,
		332,1,0,0,0,334,333,1,0,0,0,335,41,1,0,0,0,336,337,5,1,0,0,337,338,5,15,
		0,0,338,339,3,44,22,0,339,340,5,1,0,0,340,345,5,81,0,0,341,342,5,61,0,
		0,342,344,5,81,0,0,343,341,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,
		346,1,0,0,0,346,348,1,0,0,0,347,345,1,0,0,0,348,349,5,1,0,0,349,350,5,
		14,0,0,350,351,5,15,0,0,351,43,1,0,0,0,352,353,5,80,0,0,353,45,1,0,0,0,
		354,355,3,44,22,0,355,356,5,60,0,0,356,357,5,81,0,0,357,47,1,0,0,0,358,
		363,3,50,25,0,359,363,3,52,26,0,360,363,3,54,27,0,361,363,3,56,28,0,362,
		358,1,0,0,0,362,359,1,0,0,0,362,360,1,0,0,0,362,361,1,0,0,0,363,49,1,0,
		0,0,364,365,5,1,0,0,365,366,5,8,0,0,366,368,5,80,0,0,367,369,3,58,29,0,
		368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,376,3,62,31,0,371,
		375,3,60,30,0,372,375,3,30,15,0,373,375,3,22,11,0,374,371,1,0,0,0,374,
		372,1,0,0,0,374,373,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,
		0,0,0,377,379,1,0,0,0,378,376,1,0,0,0,379,380,5,1,0,0,380,381,5,14,0,0,
		381,382,5,8,0,0,382,51,1,0,0,0,383,384,5,1,0,0,384,385,5,4,0,0,385,386,
		5,8,0,0,386,388,5,80,0,0,387,389,3,58,29,0,388,387,1,0,0,0,388,389,1,0,
		0,0,389,399,1,0,0,0,390,398,3,60,30,0,391,392,5,1,0,0,392,393,5,18,0,0,
		393,398,3,38,19,0,394,395,5,1,0,0,395,396,5,29,0,0,396,398,3,24,12,0,397,
		390,1,0,0,0,397,391,1,0,0,0,397,394,1,0,0,0,398,401,1,0,0,0,399,397,1,
		0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,403,5,1,0,0,
		403,404,5,14,0,0,404,405,5,8,0,0,405,53,1,0,0,0,406,407,5,1,0,0,407,408,
		5,21,0,0,408,409,5,8,0,0,409,411,5,80,0,0,410,412,3,58,29,0,411,410,1,
		0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,418,3,62,31,0,414,417,3,60,30,
		0,415,417,3,30,15,0,416,414,1,0,0,0,416,415,1,0,0,0,417,420,1,0,0,0,418,
		416,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,418,1,0,0,0,421,422,5,
		1,0,0,422,423,5,14,0,0,423,424,5,8,0,0,424,55,1,0,0,0,425,426,5,1,0,0,
		426,427,5,4,0,0,427,428,5,21,0,0,428,429,5,8,0,0,429,431,5,80,0,0,430,
		432,3,58,29,0,431,430,1,0,0,0,431,432,1,0,0,0,432,439,1,0,0,0,433,438,
		3,60,30,0,434,435,5,1,0,0,435,436,5,18,0,0,436,438,3,38,19,0,437,433,1,
		0,0,0,437,434,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,
		440,442,1,0,0,0,441,439,1,0,0,0,442,443,5,1,0,0,443,444,5,14,0,0,444,445,
		5,8,0,0,445,57,1,0,0,0,446,447,5,23,0,0,447,452,3,144,72,0,448,449,5,61,
		0,0,449,451,3,144,72,0,450,448,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,
		452,453,1,0,0,0,453,59,1,0,0,0,454,452,1,0,0,0,455,457,5,1,0,0,456,458,
		5,28,0,0,457,456,1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,460,5,30,
		0,0,460,461,5,81,0,0,461,462,3,144,72,0,462,61,1,0,0,0,463,464,5,1,0,0,
		464,465,5,10,0,0,465,467,5,57,0,0,466,468,3,26,13,0,467,466,1,0,0,0,467,
		468,1,0,0,0,468,469,1,0,0,0,469,470,5,58,0,0,470,471,3,6,3,0,471,472,5,
		1,0,0,472,473,5,14,0,0,473,474,5,10,0,0,474,63,1,0,0,0,475,476,3,144,72,
		0,476,478,5,57,0,0,477,479,3,20,10,0,478,477,1,0,0,0,478,479,1,0,0,0,479,
		480,1,0,0,0,480,482,5,58,0,0,481,483,3,66,33,0,482,481,1,0,0,0,482,483,
		1,0,0,0,483,487,1,0,0,0,484,485,5,81,0,0,485,487,3,66,33,0,486,475,1,0,
		0,0,486,484,1,0,0,0,487,65,1,0,0,0,488,489,5,44,0,0,489,490,5,53,0,0,490,
		495,3,14,7,0,491,492,5,61,0,0,492,494,3,14,7,0,493,491,1,0,0,0,494,497,
		1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,495,1,0,0,
		0,498,499,5,54,0,0,499,67,1,0,0,0,500,508,3,70,35,0,501,508,3,72,36,0,
		502,508,3,74,37,0,503,508,3,76,38,0,504,508,3,78,39,0,505,508,3,80,40,
		0,506,508,3,82,41,0,507,500,1,0,0,0,507,501,1,0,0,0,507,502,1,0,0,0,507,
		503,1,0,0,0,507,504,1,0,0,0,507,505,1,0,0,0,507,506,1,0,0,0,508,69,1,0,
		0,0,509,510,5,1,0,0,510,511,5,20,0,0,511,512,3,88,44,0,512,513,5,38,0,
		0,513,523,3,6,3,0,514,515,5,1,0,0,515,516,5,13,0,0,516,517,5,20,0,0,517,
		518,3,88,44,0,518,519,5,38,0,0,519,520,3,6,3,0,520,522,1,0,0,0,521,514,
		1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,529,1,0,0,
		0,525,523,1,0,0,0,526,527,5,1,0,0,527,528,5,13,0,0,528,530,3,6,3,0,529,
		526,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,5,1,0,0,532,533,5,
		14,0,0,533,534,5,20,0,0,534,71,1,0,0,0,535,536,5,1,0,0,536,537,5,16,0,
		0,537,538,5,81,0,0,538,539,5,51,0,0,539,540,3,88,44,0,540,541,5,39,0,0,
		541,547,3,88,44,0,542,544,5,35,0,0,543,545,5,64,0,0,544,543,1,0,0,0,544,
		545,1,0,0,0,545,546,1,0,0,0,546,548,5,82,0,0,547,542,1,0,0,0,547,548,1,
		0,0,0,548,549,1,0,0,0,549,550,3,6,3,0,550,551,5,1,0,0,551,552,5,14,0,0,
		552,553,5,16,0,0,553,73,1,0,0,0,554,555,5,1,0,0,555,556,5,17,0,0,556,557,
		5,81,0,0,557,558,5,22,0,0,558,559,3,88,44,0,559,560,3,6,3,0,560,561,5,
		1,0,0,561,562,5,14,0,0,562,563,5,17,0,0,563,75,1,0,0,0,564,565,5,1,0,0,
		565,566,5,43,0,0,566,567,3,88,44,0,567,568,3,6,3,0,568,569,5,1,0,0,569,
		570,5,14,0,0,570,571,5,43,0,0,571,77,1,0,0,0,572,573,5,1,0,0,573,574,5,
		31,0,0,574,575,3,6,3,0,575,576,5,1,0,0,576,577,5,41,0,0,577,578,3,88,44,
		0,578,79,1,0,0,0,579,580,5,1,0,0,580,581,5,40,0,0,581,582,3,6,3,0,582,
		583,5,1,0,0,583,584,5,7,0,0,584,585,5,81,0,0,585,586,3,6,3,0,586,587,5,
		1,0,0,587,588,5,14,0,0,588,589,5,40,0,0,589,81,1,0,0,0,590,591,5,1,0,0,
		591,592,5,36,0,0,592,594,3,88,44,0,593,595,3,84,42,0,594,593,1,0,0,0,595,
		596,1,0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,599,3,
		86,43,0,599,600,5,1,0,0,600,601,5,14,0,0,601,602,5,36,0,0,602,83,1,0,0,
		0,603,604,5,1,0,0,604,606,5,6,0,0,605,607,5,64,0,0,606,605,1,0,0,0,606,
		607,1,0,0,0,607,608,1,0,0,0,608,609,3,106,53,0,609,610,3,6,3,0,610,85,
		1,0,0,0,611,612,5,1,0,0,612,613,5,12,0,0,613,614,3,6,3,0,614,87,1,0,0,
		0,615,616,6,44,-1,0,616,631,3,90,45,0,617,631,3,18,9,0,618,631,3,100,50,
		0,619,620,3,134,67,0,620,621,3,88,44,9,621,631,1,0,0,0,622,631,3,64,32,
		0,623,631,3,92,46,0,624,631,3,94,47,0,625,626,3,36,18,0,626,627,3,88,44,
		3,627,631,1,0,0,0,628,629,5,1,0,0,629,631,3,88,44,1,630,615,1,0,0,0,630,
		617,1,0,0,0,630,618,1,0,0,0,630,619,1,0,0,0,630,622,1,0,0,0,630,623,1,
		0,0,0,630,624,1,0,0,0,630,625,1,0,0,0,630,628,1,0,0,0,631,651,1,0,0,0,
		632,633,10,8,0,0,633,634,5,67,0,0,634,650,3,88,44,9,635,636,10,7,0,0,636,
		637,3,136,68,0,637,638,3,88,44,8,638,650,1,0,0,0,639,640,10,12,0,0,640,
		650,3,96,48,0,641,642,10,11,0,0,642,643,5,60,0,0,643,650,3,18,9,0,644,
		645,10,10,0,0,645,646,5,60,0,0,646,650,5,81,0,0,647,648,10,2,0,0,648,650,
		3,66,33,0,649,632,1,0,0,0,649,635,1,0,0,0,649,639,1,0,0,0,649,641,1,0,
		0,0,649,644,1,0,0,0,649,647,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,
		652,1,0,0,0,652,89,1,0,0,0,653,651,1,0,0,0,654,655,5,57,0,0,655,656,3,
		88,44,0,656,657,5,58,0,0,657,91,1,0,0,0,658,659,5,20,0,0,659,660,3,88,
		44,0,660,661,5,1,0,0,661,662,5,38,0,0,662,663,3,88,44,0,663,664,5,1,0,
		0,664,665,5,13,0,0,665,666,3,88,44,0,666,93,1,0,0,0,667,668,5,24,0,0,668,
		669,3,20,10,0,669,670,5,52,0,0,670,671,3,88,44,0,671,95,1,0,0,0,672,679,
		5,55,0,0,673,680,3,88,44,0,674,675,3,88,44,0,675,676,5,61,0,0,676,677,
		3,88,44,0,677,680,1,0,0,0,678,680,3,98,49,0,679,673,1,0,0,0,679,674,1,
		0,0,0,679,678,1,0,0,0,680,681,1,0,0,0,681,682,5,56,0,0,682,97,1,0,0,0,
		683,684,3,88,44,0,684,685,5,59,0,0,685,686,3,88,44,0,686,693,1,0,0,0,687,
		688,3,88,44,0,688,689,5,59,0,0,689,693,1,0,0,0,690,691,5,59,0,0,691,693,
		3,88,44,0,692,683,1,0,0,0,692,687,1,0,0,0,692,690,1,0,0,0,693,99,1,0,0,
		0,694,704,3,104,52,0,695,697,3,102,51,0,696,695,1,0,0,0,696,697,1,0,0,
		0,697,698,1,0,0,0,698,704,5,81,0,0,699,704,3,108,54,0,700,704,5,33,0,0,
		701,702,5,12,0,0,702,704,3,144,72,0,703,694,1,0,0,0,703,696,1,0,0,0,703,
		699,1,0,0,0,703,700,1,0,0,0,703,701,1,0,0,0,704,101,1,0,0,0,705,706,7,
		1,0,0,706,707,5,60,0,0,707,103,1,0,0,0,708,711,3,106,53,0,709,711,3,110,
		55,0,710,708,1,0,0,0,710,709,1,0,0,0,711,105,1,0,0,0,712,718,5,45,0,0,
		713,718,5,82,0,0,714,718,5,83,0,0,715,718,5,84,0,0,716,718,3,46,23,0,717,
		712,1,0,0,0,717,713,1,0,0,0,717,714,1,0,0,0,717,715,1,0,0,0,717,716,1,
		0,0,0,718,107,1,0,0,0,719,724,3,118,59,0,720,724,3,124,62,0,721,724,3,
		112,56,0,722,724,3,126,63,0,723,719,1,0,0,0,723,720,1,0,0,0,723,721,1,
		0,0,0,723,722,1,0,0,0,724,109,1,0,0,0,725,730,5,85,0,0,726,730,3,114,57,
		0,727,730,3,120,60,0,728,730,3,128,64,0,729,725,1,0,0,0,729,726,1,0,0,
		0,729,727,1,0,0,0,729,728,1,0,0,0,730,111,1,0,0,0,731,732,5,57,0,0,732,
		733,3,88,44,0,733,734,5,61,0,0,734,739,3,88,44,0,735,736,5,61,0,0,736,
		738,3,88,44,0,737,735,1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,
		1,0,0,0,740,742,1,0,0,0,741,739,1,0,0,0,742,743,5,58,0,0,743,113,1,0,0,
		0,744,745,5,57,0,0,745,746,3,104,52,0,746,747,5,61,0,0,747,752,3,104,52,
		0,748,749,5,61,0,0,749,751,3,104,52,0,750,748,1,0,0,0,751,754,1,0,0,0,
		752,750,1,0,0,0,752,753,1,0,0,0,753,755,1,0,0,0,754,752,1,0,0,0,755,756,
		5,58,0,0,756,115,1,0,0,0,757,759,5,57,0,0,758,760,5,42,0,0,759,758,1,0,
		0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,767,5,81,0,0,762,764,5,61,0,0,
		763,765,5,42,0,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,768,
		5,81,0,0,767,762,1,0,0,0,768,769,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,
		0,770,771,1,0,0,0,771,772,5,58,0,0,772,117,1,0,0,0,773,774,5,53,0,0,774,
		779,3,88,44,0,775,776,5,61,0,0,776,778,3,88,44,0,777,775,1,0,0,0,778,781,
		1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,779,1,0,0,
		0,782,783,5,54,0,0,783,119,1,0,0,0,784,785,5,53,0,0,785,790,3,104,52,0,
		786,787,5,61,0,0,787,789,3,104,52,0,788,786,1,0,0,0,789,792,1,0,0,0,790,
		788,1,0,0,0,790,791,1,0,0,0,791,793,1,0,0,0,792,790,1,0,0,0,793,794,5,
		54,0,0,794,121,1,0,0,0,795,796,5,53,0,0,796,797,5,81,0,0,797,798,5,62,
		0,0,798,799,5,81,0,0,799,800,5,54,0,0,800,123,1,0,0,0,801,802,5,47,0,0,
		802,803,3,148,74,0,803,805,5,57,0,0,804,806,5,82,0,0,805,804,1,0,0,0,805,
		806,1,0,0,0,806,807,1,0,0,0,807,808,5,58,0,0,808,125,1,0,0,0,809,810,5,
		53,0,0,810,815,3,130,65,0,811,812,5,61,0,0,812,814,3,130,65,0,813,811,
		1,0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,818,1,0,0,
		0,817,815,1,0,0,0,818,819,5,54,0,0,819,127,1,0,0,0,820,821,5,53,0,0,821,
		826,3,132,66,0,822,823,5,61,0,0,823,825,3,132,66,0,824,822,1,0,0,0,825,
		828,1,0,0,0,826,824,1,0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,826,1,
		0,0,0,829,830,5,54,0,0,830,129,1,0,0,0,831,832,3,88,44,0,832,833,5,62,
		0,0,833,834,3,88,44,0,834,131,1,0,0,0,835,836,3,104,52,0,836,837,5,62,
		0,0,837,838,3,104,52,0,838,133,1,0,0,0,839,840,7,2,0,0,840,135,1,0,0,0,
		841,845,3,138,69,0,842,845,3,140,70,0,843,845,3,142,71,0,844,841,1,0,0,
		0,844,842,1,0,0,0,844,843,1,0,0,0,845,137,1,0,0,0,846,847,7,3,0,0,847,
		139,1,0,0,0,848,849,7,4,0,0,849,141,1,0,0,0,850,851,7,5,0,0,851,143,1,
		0,0,0,852,860,5,46,0,0,853,860,3,146,73,0,854,860,5,80,0,0,855,856,5,80,
		0,0,856,860,3,148,74,0,857,860,3,150,75,0,858,860,3,152,76,0,859,852,1,
		0,0,0,859,853,1,0,0,0,859,854,1,0,0,0,859,855,1,0,0,0,859,857,1,0,0,0,
		859,858,1,0,0,0,860,145,1,0,0,0,861,862,7,6,0,0,862,863,3,148,74,0,863,
		147,1,0,0,0,864,865,5,70,0,0,865,870,3,144,72,0,866,867,5,61,0,0,867,869,
		3,144,72,0,868,866,1,0,0,0,869,872,1,0,0,0,870,868,1,0,0,0,870,871,1,0,
		0,0,871,873,1,0,0,0,872,870,1,0,0,0,873,874,5,71,0,0,874,149,1,0,0,0,875,
		876,5,57,0,0,876,879,3,144,72,0,877,878,5,61,0,0,878,880,3,144,72,0,879,
		877,1,0,0,0,880,881,1,0,0,0,881,879,1,0,0,0,881,882,1,0,0,0,882,883,1,
		0,0,0,883,884,5,58,0,0,884,151,1,0,0,0,885,886,5,57,0,0,886,891,3,144,
		72,0,887,888,5,61,0,0,888,890,3,144,72,0,889,887,1,0,0,0,890,893,1,0,0,
		0,891,889,1,0,0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,891,1,0,0,0,894,
		895,5,52,0,0,895,896,3,144,72,0,896,897,5,58,0,0,897,153,1,0,0,0,73,161,
		163,169,193,195,205,224,228,232,235,238,243,252,266,275,283,313,322,334,
		345,362,368,374,376,388,397,399,411,416,418,431,437,439,452,457,467,478,
		482,486,495,507,523,529,544,547,596,606,630,649,651,679,692,696,703,710,
		717,723,729,739,752,759,764,769,779,790,805,815,826,844,859,870,881,891
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
