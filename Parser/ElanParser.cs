//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/GitHub/Elan/Parser/Elan.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ElanParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NL=1, SINGLE_LINE_COMMENT=2, COMMENT_MARKER=3, AS=4, ABSTRACT=5, CALL=6, 
		CASE=7, CATCH=8, CLASS=9, CONSTANT=10, CONSTRUCTOR=11, CURRY=12, DEFAULT=13, 
		ELSE=14, END=15, ENUM=16, FOR=17, FOREACH=18, FUNCTION=19, GLOBAL=20, 
		IF=21, IMMUTABLE=22, IN=23, INHERITS=24, LAMBDA=25, LET=26, MAIN=27, OF=28, 
		OUT=29, PARTIAL=30, PRINT=31, PRIVATE=32, PROCEDURE=33, PROPERTY=34, REPEAT=35, 
		RETURN=36, SELF=37, SET=38, STEP=39, SWITCH=40, SYSTEM=41, TEST=42, THEN=43, 
		THROW=44, TO=45, TRY=46, UNTIL=47, VAR=48, WHILE=49, WITH=50, BOOL_VALUE=51, 
		VALUE_TYPE=52, ARRAY=53, LIST=54, DICTIONARY=55, ITERABLE=56, ASSIGN=57, 
		ARROW=58, OPEN_BRACE=59, CLOSE_BRACE=60, OPEN_SQ_BRACKET=61, CLOSE_SQ_BRACKET=62, 
		OPEN_BRACKET=63, CLOSE_BRACKET=64, DOUBLE_DOT=65, DOT=66, COMMA=67, COLON=68, 
		PLUS=69, MINUS=70, MULT=71, DIVIDE=72, POWER=73, MOD=74, INT_DIV=75, LT=76, 
		GT=77, OP_AND=78, OP_NOT=79, OP_OR=80, OP_XOR=81, OP_EQ=82, OP_NE=83, 
		OP_LE=84, OP_GE=85, TYPENAME=86, IDENTIFIER=87, LITERAL_INTEGER=88, LITERAL_FLOAT=89, 
		LITERAL_CHAR=90, LITERAL_STRING=91, WHITESPACES=92, NEWLINE=93, WS=94;
	public const int
		RULE_file = 0, RULE_main = 1, RULE_test = 2, RULE_statementBlock = 3, 
		RULE_callStatement = 4, RULE_throwException = 5, RULE_printStatement = 6, 
		RULE_varDef = 7, RULE_assignment = 8, RULE_inlineAsignment = 9, RULE_assignableValue = 10, 
		RULE_procedureCall = 11, RULE_functionCall = 12, RULE_argumentList = 13, 
		RULE_procedureDef = 14, RULE_procedureSignature = 15, RULE_procedureParameterList = 16, 
		RULE_parameterList = 17, RULE_parameter = 18, RULE_procedureParameter = 19, 
		RULE_functionDef = 20, RULE_functionWithBody = 21, RULE_expressionFunction = 22, 
		RULE_functionSignature = 23, RULE_systemAccessor = 24, RULE_accessorSignature = 25, 
		RULE_constantDef = 26, RULE_enumDef = 27, RULE_enumType = 28, RULE_enumValue = 29, 
		RULE_classDef = 30, RULE_mutableClass = 31, RULE_abstractClass = 32, RULE_immutableClass = 33, 
		RULE_abstractImmutableClass = 34, RULE_inherits = 35, RULE_property = 36, 
		RULE_constructor = 37, RULE_newInstance = 38, RULE_withClause = 39, RULE_proceduralControlFlow = 40, 
		RULE_if = 41, RULE_for = 42, RULE_foreach = 43, RULE_while = 44, RULE_repeat = 45, 
		RULE_try = 46, RULE_switch = 47, RULE_case = 48, RULE_caseDefault = 49, 
		RULE_expression = 50, RULE_bracketedExpression = 51, RULE_ifExpression = 52, 
		RULE_lambda = 53, RULE_index = 54, RULE_range = 55, RULE_value = 56, RULE_scopeQualifier = 57, 
		RULE_literal = 58, RULE_literalValue = 59, RULE_dataStructureDefinition = 60, 
		RULE_literalDataStructure = 61, RULE_tupleDefinition = 62, RULE_literalTuple = 63, 
		RULE_deconstructedTuple = 64, RULE_listDefinition = 65, RULE_literalList = 66, 
		RULE_listDecomp = 67, RULE_arrayDefinition = 68, RULE_dictionaryDefinition = 69, 
		RULE_literalDictionary = 70, RULE_kvp = 71, RULE_literalKvp = 72, RULE_unaryOp = 73, 
		RULE_binaryOp = 74, RULE_arithmeticOp = 75, RULE_logicalOp = 76, RULE_conditionalOp = 77, 
		RULE_type = 78, RULE_dataStructureType = 79, RULE_genericSpecifier = 80, 
		RULE_tupleType = 81, RULE_funcType = 82;
	public static readonly string[] ruleNames = {
		"file", "main", "test", "statementBlock", "callStatement", "throwException", 
		"printStatement", "varDef", "assignment", "inlineAsignment", "assignableValue", 
		"procedureCall", "functionCall", "argumentList", "procedureDef", "procedureSignature", 
		"procedureParameterList", "parameterList", "parameter", "procedureParameter", 
		"functionDef", "functionWithBody", "expressionFunction", "functionSignature", 
		"systemAccessor", "accessorSignature", "constantDef", "enumDef", "enumType", 
		"enumValue", "classDef", "mutableClass", "abstractClass", "immutableClass", 
		"abstractImmutableClass", "inherits", "property", "constructor", "newInstance", 
		"withClause", "proceduralControlFlow", "if", "for", "foreach", "while", 
		"repeat", "try", "switch", "case", "caseDefault", "expression", "bracketedExpression", 
		"ifExpression", "lambda", "index", "range", "value", "scopeQualifier", 
		"literal", "literalValue", "dataStructureDefinition", "literalDataStructure", 
		"tupleDefinition", "literalTuple", "deconstructedTuple", "listDefinition", 
		"literalList", "listDecomp", "arrayDefinition", "dictionaryDefinition", 
		"literalDictionary", "kvp", "literalKvp", "unaryOp", "binaryOp", "arithmeticOp", 
		"logicalOp", "conditionalOp", "type", "dataStructureType", "genericSpecifier", 
		"tupleType", "funcType"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#'", "'as'", "'abstract'", "'call'", "'case'", "'catch'", 
		"'class'", "'constant'", "'constructor'", "'curry'", "'default'", "'else'", 
		"'end'", "'enum'", "'for'", "'foreach'", "'function'", "'global'", "'if'", 
		"'immutable'", "'in'", "'inherits'", "'lambda'", "'let'", "'main'", "'of'", 
		"'out'", "'partial'", "'print'", "'private'", "'procedure'", "'property'", 
		"'repeat'", "'return'", "'self'", "'set'", "'step'", "'switch'", "'system'", 
		"'test'", "'then'", "'throw'", "'to'", "'try'", "'until'", "'var'", "'while'", 
		"'with'", null, null, "'Array'", "'List'", "'Dictionary'", "'Iter'", "'='", 
		"'->'", "'{'", "'}'", "'['", "']'", "'('", "')'", "'..'", "'.'", "','", 
		"':'", "'+'", "'-'", "'*'", "'/'", "'^'", "'mod'", "'div'", "'<'", "'>'", 
		"'and'", "'not'", "'or'", "'xor'", "'is'", null, "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NL", "SINGLE_LINE_COMMENT", "COMMENT_MARKER", "AS", "ABSTRACT", 
		"CALL", "CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", "CURRY", 
		"DEFAULT", "ELSE", "END", "ENUM", "FOR", "FOREACH", "FUNCTION", "GLOBAL", 
		"IF", "IMMUTABLE", "IN", "INHERITS", "LAMBDA", "LET", "MAIN", "OF", "OUT", 
		"PARTIAL", "PRINT", "PRIVATE", "PROCEDURE", "PROPERTY", "REPEAT", "RETURN", 
		"SELF", "SET", "STEP", "SWITCH", "SYSTEM", "TEST", "THEN", "THROW", "TO", 
		"TRY", "UNTIL", "VAR", "WHILE", "WITH", "BOOL_VALUE", "VALUE_TYPE", "ARRAY", 
		"LIST", "DICTIONARY", "ITERABLE", "ASSIGN", "ARROW", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"DOUBLE_DOT", "DOT", "COMMA", "COLON", "PLUS", "MINUS", "MULT", "DIVIDE", 
		"POWER", "MOD", "INT_DIV", "LT", "GT", "OP_AND", "OP_NOT", "OP_OR", "OP_XOR", 
		"OP_EQ", "OP_NE", "OP_LE", "OP_GE", "TYPENAME", "IDENTIFIER", "LITERAL_INTEGER", 
		"LITERAL_FLOAT", "LITERAL_CHAR", "LITERAL_STRING", "WHITESPACES", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Elan.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ElanParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElanParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElanParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ElanParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext[] enumDef() {
			return GetRuleContexts<EnumDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef(int i) {
			return GetRuleContext<EnumDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemAccessorContext[] systemAccessor() {
			return GetRuleContexts<SystemAccessorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemAccessorContext systemAccessor(int i) {
			return GetRuleContext<SystemAccessorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 174;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 166;
						main();
						}
						break;
					case 2:
						{
						State = 167;
						procedureDef();
						}
						break;
					case 3:
						{
						State = 168;
						functionDef();
						}
						break;
					case 4:
						{
						State = 169;
						constantDef();
						}
						break;
					case 5:
						{
						State = 170;
						enumDef();
						}
						break;
					case 6:
						{
						State = 171;
						classDef();
						}
						break;
					case 7:
						{
						State = 172;
						test();
						}
						break;
					case 8:
						{
						State = 173;
						systemAccessor();
						}
						break;
					}
					} 
				}
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 179;
				Match(NL);
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 185;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(ElanParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(ElanParser.MAIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(NL);
			State = 188;
			Match(MAIN);
			State = 189;
			statementBlock();
			State = 190;
			Match(NL);
			State = 191;
			Match(END);
			State = 192;
			Match(MAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEST() { return GetTokens(ElanParser.TEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEST(int i) {
			return GetToken(ElanParser.TEST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public TestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestContext test() {
		TestContext _localctx = new TestContext(Context, State);
		EnterRule(_localctx, 4, RULE_test);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(NL);
			State = 195;
			Match(TEST);
			State = 196;
			Match(IDENTIFIER);
			State = 197;
			statementBlock();
			State = 198;
			Match(NL);
			State = 199;
			Match(END);
			State = 200;
			Match(TEST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext[] proceduralControlFlow() {
			return GetRuleContexts<ProceduralControlFlowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext proceduralControlFlow(int i) {
			return GetRuleContext<ProceduralControlFlowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext[] throwException() {
			return GetRuleContexts<ThrowExceptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException(int i) {
			return GetRuleContext<ThrowExceptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext[] printStatement() {
			return GetRuleContexts<PrintStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement(int i) {
			return GetRuleContext<PrintStatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 208;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 202;
						varDef();
						}
						break;
					case 2:
						{
						State = 203;
						assignment();
						}
						break;
					case 3:
						{
						State = 204;
						proceduralControlFlow();
						}
						break;
					case 4:
						{
						State = 205;
						callStatement();
						}
						break;
					case 5:
						{
						State = 206;
						throwException();
						}
						break;
					case 6:
						{
						State = 207;
						printStatement();
						}
						break;
					}
					} 
				}
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(ElanParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(NL);
			State = 214;
			Match(CALL);
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 215;
				procedureCall();
				}
				break;
			case 2:
				{
				{
				State = 216;
				assignableValue();
				State = 217;
				Match(DOT);
				State = 218;
				procedureCall();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(ElanParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public ThrowExceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwException; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowException(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExceptionContext throwException() {
		ThrowExceptionContext _localctx = new ThrowExceptionContext(Context, State);
		EnterRule(_localctx, 10, RULE_throwException);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(NL);
			State = 223;
			Match(THROW);
			State = 224;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==LITERAL_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ElanParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(NL);
			State = 227;
			Match(PRINT);
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 228;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ElanParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 14, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(NL);
			State = 232;
			Match(VAR);
			State = 233;
			assignableValue();
			State = 234;
			Match(ASSIGN);
			State = 235;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ElanParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(NL);
			State = 238;
			Match(SET);
			State = 239;
			assignableValue();
			State = 240;
			Match(TO);
			State = 241;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAsignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InlineAsignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAsignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineAsignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineAsignmentContext inlineAsignment() {
		InlineAsignmentContext _localctx = new InlineAsignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_inlineAsignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			assignableValue();
			State = 244;
			Match(ASSIGN);
			State = 245;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeconstructedTupleContext deconstructedTuple() {
			return GetRuleContext<DeconstructedTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDecompContext listDecomp() {
			return GetRuleContext<ListDecompContext>(0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableValueContext assignableValue() {
		AssignableValueContext _localctx = new AssignableValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignableValue);
		int _la;
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL:
			case SELF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SELF) {
					{
					State = 247;
					scopeQualifier();
					}
				}

				State = 250;
				Match(IDENTIFIER);
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_SQ_BRACKET) {
					{
					State = 251;
					index();
					}
				}

				}
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				deconstructedTuple();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 255;
				listDecomp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureCallContext procedureCall() {
		ProcedureCallContext _localctx = new ProcedureCallContext(Context, State);
		EnterRule(_localctx, 22, RULE_procedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SELF) {
				{
				State = 258;
				scopeQualifier();
				}
			}

			State = 261;
			Match(IDENTIFIER);
			State = 262;
			Match(OPEN_BRACKET);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8505047758813519870L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 4129281L) != 0)) {
				{
				State = 263;
				argumentList();
				}
			}

			State = 266;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SELF) {
				{
				State = 268;
				scopeQualifier();
				}
			}

			State = 271;
			Match(IDENTIFIER);
			State = 272;
			Match(OPEN_BRACKET);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8505047758813519870L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 4129281L) != 0)) {
				{
				State = 273;
				argumentList();
				}
			}

			State = 276;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext[] lambda() {
			return GetRuleContexts<LambdaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda(int i) {
			return GetRuleContext<LambdaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 26, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case DEFAULT:
			case GLOBAL:
			case IF:
			case SELF:
			case BOOL_VALUE:
			case VALUE_TYPE:
			case ARRAY:
			case LIST:
			case DICTIONARY:
			case ITERABLE:
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case MINUS:
			case OP_NOT:
			case TYPENAME:
			case IDENTIFIER:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
			case LITERAL_STRING:
				{
				State = 278;
				expression(0);
				}
				break;
			case LAMBDA:
				{
				State = 279;
				lambda();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 282;
				Match(COMMA);
				State = 285;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NL:
				case DEFAULT:
				case GLOBAL:
				case IF:
				case SELF:
				case BOOL_VALUE:
				case VALUE_TYPE:
				case ARRAY:
				case LIST:
				case DICTIONARY:
				case ITERABLE:
				case OPEN_BRACE:
				case OPEN_BRACKET:
				case MINUS:
				case OP_NOT:
				case TYPENAME:
				case IDENTIFIER:
				case LITERAL_INTEGER:
				case LITERAL_FLOAT:
				case LITERAL_CHAR:
				case LITERAL_STRING:
					{
					State = 283;
					expression(0);
					}
					break;
				case LAMBDA:
					{
					State = 284;
					lambda();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ProcedureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefContext procedureDef() {
		ProcedureDefContext _localctx = new ProcedureDefContext(Context, State);
		EnterRule(_localctx, 28, RULE_procedureDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(NL);
			State = 293;
			Match(PROCEDURE);
			State = 294;
			procedureSignature();
			State = 295;
			statementBlock();
			State = 296;
			Match(NL);
			State = 297;
			Match(END);
			State = 298;
			Match(PROCEDURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterListContext procedureParameterList() {
			return GetRuleContext<ProcedureParameterListContext>(0);
		}
		public ProcedureSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSignatureContext procedureSignature() {
		ProcedureSignatureContext _localctx = new ProcedureSignatureContext(Context, State);
		EnterRule(_localctx, 30, RULE_procedureSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(IDENTIFIER);
			State = 301;
			Match(OPEN_BRACKET);
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT || _la==IDENTIFIER) {
				{
				State = 302;
				procedureParameterList();
				}
			}

			State = 305;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ProcedureParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterListContext procedureParameterList() {
		ProcedureParameterListContext _localctx = new ProcedureParameterListContext(Context, State);
		EnterRule(_localctx, 32, RULE_procedureParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			procedureParameter();
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 308;
				Match(COMMA);
				State = 309;
				procedureParameter();
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			parameter();
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 316;
				Match(COMMA);
				State = 317;
				parameter();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(IDENTIFIER);
			State = 324;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(ElanParser.OUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 38, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 326;
				Match(OUT);
				}
			}

			State = 329;
			Match(IDENTIFIER);
			State = 330;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionWithBodyContext functionWithBody() {
			return GetRuleContext<FunctionWithBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionFunctionContext expressionFunction() {
			return GetRuleContext<ExpressionFunctionContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionDef);
		try {
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 332;
				functionWithBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333;
				expressionFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionWithBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElanParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public FunctionWithBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionWithBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionWithBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionWithBodyContext functionWithBody() {
		FunctionWithBodyContext _localctx = new FunctionWithBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionWithBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			Match(NL);
			State = 337;
			Match(FUNCTION);
			State = 338;
			functionSignature();
			State = 339;
			statementBlock();
			State = 340;
			Match(NL);
			State = 341;
			Match(RETURN);
			State = 342;
			expression(0);
			State = 343;
			Match(NL);
			State = 344;
			Match(END);
			State = 345;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ElanParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionFunctionContext expressionFunction() {
		ExpressionFunctionContext _localctx = new ExpressionFunctionContext(Context, State);
		EnterRule(_localctx, 44, RULE_expressionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(NL);
			State = 348;
			Match(FUNCTION);
			State = 349;
			functionSignature();
			State = 350;
			Match(ARROW);
			State = 351;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ElanParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 46, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(IDENTIFIER);
			State = 354;
			Match(OPEN_BRACKET);
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 355;
				parameterList();
				}
			}

			State = 358;
			Match(CLOSE_BRACKET);
			State = 359;
			Match(AS);
			State = 360;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SYSTEM() { return GetTokens(ElanParser.SYSTEM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM(int i) {
			return GetToken(ElanParser.SYSTEM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorSignatureContext accessorSignature() {
			return GetRuleContext<AccessorSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElanParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public SystemAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystemAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SystemAccessorContext systemAccessor() {
		SystemAccessorContext _localctx = new SystemAccessorContext(Context, State);
		EnterRule(_localctx, 48, RULE_systemAccessor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(NL);
			State = 363;
			Match(SYSTEM);
			State = 364;
			accessorSignature();
			State = 365;
			statementBlock();
			State = 366;
			Match(NL);
			State = 367;
			Match(RETURN);
			State = 368;
			expression(0);
			State = 369;
			Match(NL);
			State = 370;
			Match(END);
			State = 371;
			Match(SYSTEM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ElanParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public AccessorSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorSignatureContext accessorSignature() {
		AccessorSignatureContext _localctx = new AccessorSignatureContext(Context, State);
		EnterRule(_localctx, 50, RULE_accessorSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(IDENTIFIER);
			State = 374;
			Match(OPEN_BRACKET);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 375;
				parameterList();
				}
			}

			State = 378;
			Match(CLOSE_BRACKET);
			State = 379;
			Match(AS);
			State = 380;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ElanParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		public ConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefContext constantDef() {
		ConstantDefContext _localctx = new ConstantDefContext(Context, State);
		EnterRule(_localctx, 52, RULE_constantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(NL);
			State = 383;
			Match(CONSTANT);
			State = 384;
			Match(IDENTIFIER);
			State = 385;
			Match(ASSIGN);
			State = 388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 386;
				literal();
				}
				break;
			case 2:
				{
				State = 387;
				newInstance();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENUM() { return GetTokens(ElanParser.ENUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM(int i) {
			return GetToken(ElanParser.ENUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 54, RULE_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			Match(NL);
			State = 391;
			Match(ENUM);
			State = 392;
			enumType();
			State = 393;
			Match(NL);
			State = 394;
			Match(IDENTIFIER);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 395;
				Match(COMMA);
				State = 396;
				Match(IDENTIFIER);
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 402;
			Match(NL);
			State = 403;
			Match(END);
			State = 404;
			Match(ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_enumType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(TYPENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			enumType();
			State = 409;
			Match(DOT);
			State = 410;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MutableClassContext mutableClass() {
			return GetRuleContext<MutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractClassContext abstractClass() {
			return GetRuleContext<AbstractClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmutableClassContext immutableClass() {
			return GetRuleContext<ImmutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractImmutableClassContext abstractImmutableClass() {
			return GetRuleContext<AbstractImmutableClassContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 60, RULE_classDef);
		try {
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 412;
				mutableClass();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 413;
				abstractClass();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 414;
				immutableClass();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 415;
				abstractImmutableClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemAccessorContext[] systemAccessor() {
			return GetRuleContexts<SystemAccessorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemAccessorContext systemAccessor(int i) {
			return GetRuleContext<SystemAccessorContext>(i);
		}
		public MutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MutableClassContext mutableClass() {
		MutableClassContext _localctx = new MutableClassContext(Context, State);
		EnterRule(_localctx, 62, RULE_mutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(NL);
			State = 419;
			Match(CLASS);
			State = 420;
			Match(TYPENAME);
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 421;
				inherits();
				}
			}

			State = 424;
			constructor();
			State = 431;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 429;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						State = 425;
						property();
						}
						break;
					case 2:
						{
						State = 426;
						functionDef();
						}
						break;
					case 3:
						{
						State = 427;
						procedureDef();
						}
						break;
					case 4:
						{
						State = 428;
						systemAccessor();
						}
						break;
					}
					} 
				}
				State = 433;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			State = 434;
			Match(NL);
			State = 435;
			Match(END);
			State = 436;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext[] procedureSignature() {
			return GetRuleContexts<ProcedureSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature(int i) {
			return GetRuleContext<ProcedureSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SYSTEM() { return GetTokens(ElanParser.SYSTEM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM(int i) {
			return GetToken(ElanParser.SYSTEM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorSignatureContext[] accessorSignature() {
			return GetRuleContexts<AccessorSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorSignatureContext accessorSignature(int i) {
			return GetRuleContext<AccessorSignatureContext>(i);
		}
		public AbstractClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractClassContext abstractClass() {
		AbstractClassContext _localctx = new AbstractClassContext(Context, State);
		EnterRule(_localctx, 64, RULE_abstractClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(NL);
			State = 439;
			Match(ABSTRACT);
			State = 440;
			Match(CLASS);
			State = 441;
			Match(TYPENAME);
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 442;
				inherits();
				}
			}

			State = 457;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 455;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						State = 445;
						property();
						}
						break;
					case 2:
						{
						State = 446;
						Match(NL);
						State = 447;
						Match(FUNCTION);
						State = 448;
						functionSignature();
						}
						break;
					case 3:
						{
						State = 449;
						Match(NL);
						State = 450;
						Match(PROCEDURE);
						State = 451;
						procedureSignature();
						}
						break;
					case 4:
						{
						State = 452;
						Match(NL);
						State = 453;
						Match(SYSTEM);
						State = 454;
						accessorSignature();
						}
						break;
					}
					} 
				}
				State = 459;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			State = 460;
			Match(NL);
			State = 461;
			Match(END);
			State = 462;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmutableClassContext immutableClass() {
		ImmutableClassContext _localctx = new ImmutableClassContext(Context, State);
		EnterRule(_localctx, 66, RULE_immutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(NL);
			State = 465;
			Match(IMMUTABLE);
			State = 466;
			Match(CLASS);
			State = 467;
			Match(TYPENAME);
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 468;
				inherits();
				}
			}

			State = 471;
			constructor();
			State = 476;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 474;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						State = 472;
						property();
						}
						break;
					case 2:
						{
						State = 473;
						functionDef();
						}
						break;
					}
					} 
				}
				State = 478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 479;
			Match(NL);
			State = 480;
			Match(END);
			State = 481;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		public AbstractImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractImmutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractImmutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractImmutableClassContext abstractImmutableClass() {
		AbstractImmutableClassContext _localctx = new AbstractImmutableClassContext(Context, State);
		EnterRule(_localctx, 68, RULE_abstractImmutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(NL);
			State = 484;
			Match(ABSTRACT);
			State = 485;
			Match(IMMUTABLE);
			State = 486;
			Match(CLASS);
			State = 487;
			Match(TYPENAME);
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 488;
				inherits();
				}
			}

			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 495;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
					case 1:
						{
						State = 491;
						property();
						}
						break;
					case 2:
						{
						State = 492;
						Match(NL);
						State = 493;
						Match(FUNCTION);
						State = 494;
						functionSignature();
						}
						break;
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			State = 500;
			Match(NL);
			State = 501;
			Match(END);
			State = 502;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(ElanParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public InheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritsContext inherits() {
		InheritsContext _localctx = new InheritsContext(Context, State);
		EnterRule(_localctx, 70, RULE_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(INHERITS);
			State = 505;
			type();
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 506;
				Match(COMMA);
				State = 507;
				type();
				}
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(ElanParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ElanParser.PRIVATE, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 72, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(NL);
			State = 515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 514;
				Match(PRIVATE);
				}
			}

			State = 517;
			Match(PROPERTY);
			State = 518;
			Match(IDENTIFIER);
			State = 519;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRUCTOR() { return GetTokens(ElanParser.CONSTRUCTOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(ElanParser.CONSTRUCTOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 74, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			Match(NL);
			State = 522;
			Match(CONSTRUCTOR);
			State = 523;
			Match(OPEN_BRACKET);
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 524;
				parameterList();
				}
			}

			State = 527;
			Match(CLOSE_BRACKET);
			State = 528;
			statementBlock();
			State = 529;
			Match(NL);
			State = 530;
			Match(END);
			State = 531;
			Match(CONSTRUCTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(Context, State);
		EnterRule(_localctx, 76, RULE_newInstance);
		int _la;
		try {
			State = 544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUE_TYPE:
			case ARRAY:
			case LIST:
			case DICTIONARY:
			case ITERABLE:
			case OPEN_BRACKET:
			case TYPENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533;
				type();
				State = 534;
				Match(OPEN_BRACKET);
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8505047758813519870L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 4129281L) != 0)) {
					{
					State = 535;
					argumentList();
					}
				}

				State = 538;
				Match(CLOSE_BRACKET);
				State = 540;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 539;
					withClause();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542;
				Match(IDENTIFIER);
				State = 543;
				withClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(ElanParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InlineAsignmentContext[] inlineAsignment() {
			return GetRuleContexts<InlineAsignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineAsignmentContext inlineAsignment(int i) {
			return GetRuleContext<InlineAsignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(WITH);
			State = 547;
			Match(OPEN_BRACE);
			State = 548;
			inlineAsignment();
			State = 553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 549;
				Match(COMMA);
				State = 550;
				inlineAsignment();
				}
				}
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 556;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduralControlFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachContext @foreach() {
			return GetRuleContext<ForeachContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryContext @try() {
			return GetRuleContext<TryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ProceduralControlFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proceduralControlFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProceduralControlFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProceduralControlFlowContext proceduralControlFlow() {
		ProceduralControlFlowContext _localctx = new ProceduralControlFlowContext(Context, State);
		EnterRule(_localctx, 80, RULE_proceduralControlFlow);
		try {
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 558;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 559;
				@for();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 560;
				@foreach();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 561;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 562;
				repeat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 563;
				@try();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 564;
				@switch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(ElanParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(ElanParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(ElanParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(ElanParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(ElanParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(ElanParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 82, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(NL);
			State = 568;
			Match(IF);
			State = 569;
			expression(0);
			State = 570;
			Match(THEN);
			State = 571;
			statementBlock();
			State = 581;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 572;
					Match(NL);
					State = 573;
					Match(ELSE);
					State = 574;
					Match(IF);
					State = 575;
					expression(0);
					State = 576;
					Match(THEN);
					State = 577;
					statementBlock();
					}
					} 
				}
				State = 583;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 584;
				Match(NL);
				State = 585;
				Match(ELSE);
				State = 586;
				statementBlock();
				}
				break;
			}
			State = 589;
			Match(NL);
			State = 590;
			Match(END);
			State = 591;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(ElanParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(ElanParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(ElanParser.STEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 84, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(NL);
			State = 594;
			Match(FOR);
			State = 595;
			Match(IDENTIFIER);
			State = 596;
			Match(ASSIGN);
			State = 597;
			expression(0);
			State = 598;
			Match(TO);
			State = 599;
			expression(0);
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 600;
				Match(STEP);
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 601;
					Match(MINUS);
					}
				}

				State = 604;
				Match(LITERAL_INTEGER);
				}
			}

			State = 607;
			statementBlock();
			State = 608;
			Match(NL);
			State = 609;
			Match(END);
			State = 610;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOREACH() { return GetTokens(ElanParser.FOREACH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH(int i) {
			return GetToken(ElanParser.FOREACH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ForeachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachContext @foreach() {
		ForeachContext _localctx = new ForeachContext(Context, State);
		EnterRule(_localctx, 86, RULE_foreach);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(NL);
			State = 613;
			Match(FOREACH);
			State = 614;
			Match(IDENTIFIER);
			State = 615;
			Match(IN);
			State = 616;
			expression(0);
			State = 617;
			statementBlock();
			State = 618;
			Match(NL);
			State = 619;
			Match(END);
			State = 620;
			Match(FOREACH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(ElanParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(ElanParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 88, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(NL);
			State = 623;
			Match(WHILE);
			State = 624;
			expression(0);
			State = 625;
			statementBlock();
			State = 626;
			Match(NL);
			State = 627;
			Match(END);
			State = 628;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(ElanParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(ElanParser.REPEAT, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 90, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			Match(NL);
			{
			State = 631;
			Match(REPEAT);
			}
			State = 632;
			statementBlock();
			State = 633;
			Match(NL);
			State = 634;
			Match(UNTIL);
			State = 635;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(ElanParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(ElanParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ElanParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public TryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryContext @try() {
		TryContext _localctx = new TryContext(Context, State);
		EnterRule(_localctx, 92, RULE_try);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			Match(NL);
			State = 638;
			Match(TRY);
			State = 639;
			statementBlock();
			State = 640;
			Match(NL);
			State = 641;
			Match(CATCH);
			State = 642;
			Match(IDENTIFIER);
			State = 643;
			statementBlock();
			State = 644;
			Match(NL);
			State = 645;
			Match(END);
			State = 646;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(ElanParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(ElanParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseDefaultContext caseDefault() {
			return GetRuleContext<CaseDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 94, RULE_switch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			Match(NL);
			State = 649;
			Match(SWITCH);
			State = 650;
			expression(0);
			State = 652;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 651;
					@case();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 654;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 656;
			caseDefault();
			State = 657;
			Match(NL);
			State = 658;
			Match(END);
			State = 659;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(ElanParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 96, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			Match(NL);
			State = 662;
			Match(CASE);
			State = 664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 663;
				Match(MINUS);
				}
			}

			State = 666;
			literalValue();
			State = 667;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseDefaultContext caseDefault() {
		CaseDefaultContext _localctx = new CaseDefaultContext(Context, State);
		EnterRule(_localctx, 98, RULE_caseDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			Match(NL);
			State = 670;
			Match(DEFAULT);
			State = 671;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracketedExpressionContext bracketedExpression() {
			return GetRuleContext<BracketedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 674;
				bracketedExpression();
				}
				break;
			case 2:
				{
				State = 675;
				functionCall();
				}
				break;
			case 3:
				{
				State = 676;
				value();
				}
				break;
			case 4:
				{
				State = 677;
				unaryOp();
				State = 678;
				expression(7);
				}
				break;
			case 5:
				{
				State = 680;
				newInstance();
				}
				break;
			case 6:
				{
				State = 681;
				ifExpression();
				}
				break;
			case 7:
				{
				State = 682;
				Match(NL);
				State = 683;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 705;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 703;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 686;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 687;
						Match(POWER);
						State = 688;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 689;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 690;
						binaryOp();
						State = 691;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 693;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 694;
						index();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 695;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 696;
						Match(DOT);
						State = 697;
						functionCall();
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 698;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 699;
						Match(DOT);
						State = 700;
						Match(IDENTIFIER);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 701;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 702;
						withClause();
						}
						break;
					}
					} 
				}
				State = 707;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracketedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public BracketedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketedExpressionContext bracketedExpression() {
		BracketedExpressionContext _localctx = new BracketedExpressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_bracketedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(OPEN_BRACKET);
			State = 709;
			expression(0);
			State = 710;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ElanParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ElanParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ElanParser.ELSE, 0); }
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_ifExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			Match(IF);
			State = 713;
			expression(0);
			State = 714;
			Match(NL);
			State = 715;
			Match(THEN);
			State = 716;
			expression(0);
			State = 717;
			Match(NL);
			State = 718;
			Match(ELSE);
			State = 719;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(ElanParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 106, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			Match(LAMBDA);
			State = 722;
			argumentList();
			State = 723;
			Match(ARROW);
			State = 724;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(ElanParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(ElanParser.CLOSE_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ElanParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 108, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			Match(OPEN_SQ_BRACKET);
			State = 733;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 727;
				expression(0);
				}
				break;
			case 2:
				{
				State = 728;
				expression(0);
				State = 729;
				Match(COMMA);
				State = 730;
				expression(0);
				}
				break;
			case 3:
				{
				State = 732;
				range();
				}
				break;
			}
			State = 735;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(ElanParser.DOUBLE_DOT, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 110, RULE_range);
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 737;
				expression(0);
				State = 738;
				Match(DOUBLE_DOT);
				State = 739;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 741;
				expression(0);
				State = 742;
				Match(DOUBLE_DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 744;
				Match(DOUBLE_DOT);
				State = 745;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeQualifierContext scopeQualifier() {
			return GetRuleContext<ScopeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureDefinitionContext dataStructureDefinition() {
			return GetRuleContext<DataStructureDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 112, RULE_value);
		int _la;
		try {
			State = 757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 748;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SELF) {
					{
					State = 749;
					scopeQualifier();
					}
				}

				State = 752;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 753;
				dataStructureDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 754;
				Match(SELF);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 755;
				Match(DEFAULT);
				State = 756;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(ElanParser.GLOBAL, 0); }
		public ScopeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeQualifierContext scopeQualifier() {
		ScopeQualifierContext _localctx = new ScopeQualifierContext(Context, State);
		EnterRule(_localctx, 114, RULE_scopeQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL || _la==SELF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 760;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDataStructureContext literalDataStructure() {
			return GetRuleContext<LiteralDataStructureContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 116, RULE_literal);
		try {
			State = 764;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
			case TYPENAME:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 762;
				literalValue();
				}
				break;
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 763;
				literalDataStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VALUE() { return GetToken(ElanParser.BOOL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(ElanParser.LITERAL_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_CHAR() { return GetToken(ElanParser.LITERAL_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 118, RULE_literalValue);
		try {
			State = 771;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 766;
				Match(BOOL_VALUE);
				}
				break;
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 767;
				Match(LITERAL_INTEGER);
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 768;
				Match(LITERAL_FLOAT);
				}
				break;
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 769;
				Match(LITERAL_CHAR);
				}
				break;
			case TYPENAME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 770;
				enumValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListDefinitionContext listDefinition() {
			return GetRuleContext<ListDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDefinitionContext arrayDefinition() {
			return GetRuleContext<ArrayDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleDefinitionContext tupleDefinition() {
			return GetRuleContext<TupleDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryDefinitionContext dictionaryDefinition() {
			return GetRuleContext<DictionaryDefinitionContext>(0);
		}
		public DataStructureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureDefinitionContext dataStructureDefinition() {
		DataStructureDefinitionContext _localctx = new DataStructureDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_dataStructureDefinition);
		try {
			State = 777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 773;
				listDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 774;
				arrayDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 775;
				tupleDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 776;
				dictionaryDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDataStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTupleContext literalTuple() {
			return GetRuleContext<LiteralTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralListContext literalList() {
			return GetRuleContext<LiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDictionaryContext literalDictionary() {
			return GetRuleContext<LiteralDictionaryContext>(0);
		}
		public LiteralDataStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDataStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDataStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDataStructureContext literalDataStructure() {
		LiteralDataStructureContext _localctx = new LiteralDataStructureContext(Context, State);
		EnterRule(_localctx, 122, RULE_literalDataStructure);
		try {
			State = 783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 779;
				Match(LITERAL_STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 780;
				literalTuple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 781;
				literalList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 782;
				literalDictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public TupleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDefinitionContext tupleDefinition() {
		TupleDefinitionContext _localctx = new TupleDefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_tupleDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785;
			Match(OPEN_BRACKET);
			State = 786;
			expression(0);
			State = 787;
			Match(COMMA);
			State = 788;
			expression(0);
			State = 793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 789;
				Match(COMMA);
				State = 790;
				expression(0);
				}
				}
				State = 795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 796;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public LiteralTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTupleContext literalTuple() {
		LiteralTupleContext _localctx = new LiteralTupleContext(Context, State);
		EnterRule(_localctx, 126, RULE_literalTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			Match(OPEN_BRACKET);
			State = 799;
			literal();
			State = 800;
			Match(COMMA);
			State = 801;
			literal();
			State = 806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 802;
				Match(COMMA);
				State = 803;
				literal();
				}
				}
				State = 808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 809;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeconstructedTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DeconstructedTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deconstructedTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeconstructedTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeconstructedTupleContext deconstructedTuple() {
		DeconstructedTupleContext _localctx = new DeconstructedTupleContext(Context, State);
		EnterRule(_localctx, 128, RULE_deconstructedTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			Match(OPEN_BRACKET);
			State = 812;
			Match(IDENTIFIER);
			State = 815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 813;
				Match(COMMA);
				State = 814;
				Match(IDENTIFIER);
				}
				}
				State = 817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 819;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ListDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDefinitionContext listDefinition() {
		ListDefinitionContext _localctx = new ListDefinitionContext(Context, State);
		EnterRule(_localctx, 130, RULE_listDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			Match(OPEN_BRACE);
			{
			State = 822;
			expression(0);
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 823;
				Match(COMMA);
				State = 824;
				expression(0);
				}
				}
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 830;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralListContext literalList() {
		LiteralListContext _localctx = new LiteralListContext(Context, State);
		EnterRule(_localctx, 132, RULE_literalList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			Match(OPEN_BRACE);
			{
			State = 833;
			literal();
			State = 838;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 834;
				Match(COMMA);
				State = 835;
				literal();
				}
				}
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 841;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		public ListDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDecompContext listDecomp() {
		ListDecompContext _localctx = new ListDecompContext(Context, State);
		EnterRule(_localctx, 134, RULE_listDecomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			Match(OPEN_BRACE);
			State = 844;
			Match(IDENTIFIER);
			State = 845;
			Match(COLON);
			State = 846;
			Match(IDENTIFIER);
			State = 847;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		public ArrayDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDefinitionContext arrayDefinition() {
		ArrayDefinitionContext _localctx = new ArrayDefinitionContext(Context, State);
		EnterRule(_localctx, 136, RULE_arrayDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			Match(ARRAY);
			State = 850;
			genericSpecifier();
			State = 851;
			Match(OPEN_BRACKET);
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LITERAL_INTEGER) {
				{
				State = 852;
				Match(LITERAL_INTEGER);
				}
			}

			State = 855;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext[] kvp() {
			return GetRuleContexts<KvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext kvp(int i) {
			return GetRuleContext<KvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DictionaryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryDefinitionContext dictionaryDefinition() {
		DictionaryDefinitionContext _localctx = new DictionaryDefinitionContext(Context, State);
		EnterRule(_localctx, 138, RULE_dictionaryDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			Match(OPEN_BRACE);
			{
			State = 858;
			kvp();
			State = 863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 859;
				Match(COMMA);
				State = 860;
				kvp();
				}
				}
				State = 865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 866;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext[] literalKvp() {
			return GetRuleContexts<LiteralKvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext literalKvp(int i) {
			return GetRuleContext<LiteralKvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralDictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDictionaryContext literalDictionary() {
		LiteralDictionaryContext _localctx = new LiteralDictionaryContext(Context, State);
		EnterRule(_localctx, 140, RULE_literalDictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868;
			Match(OPEN_BRACE);
			{
			State = 869;
			literalKvp();
			State = 874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 870;
				Match(COMMA);
				State = 871;
				literalKvp();
				}
				}
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 877;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public KvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpContext kvp() {
		KvpContext _localctx = new KvpContext(Context, State);
		EnterRule(_localctx, 142, RULE_kvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879;
			expression(0);
			State = 880;
			Match(COLON);
			State = 881;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralKvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public LiteralKvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalKvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralKvpContext literalKvp() {
		LiteralKvpContext _localctx = new LiteralKvpContext(Context, State);
		EnterRule(_localctx, 144, RULE_literalKvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			literal();
			State = 884;
			Match(COLON);
			State = 885;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(ElanParser.OP_NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 146, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 887;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==OP_NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOpContext arithmeticOp() {
			return GetRuleContext<ArithmeticOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 148, RULE_binaryOp);
		try {
			State = 892;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case MULT:
			case DIVIDE:
			case POWER:
			case MOD:
			case INT_DIV:
				EnterOuterAlt(_localctx, 1);
				{
				State = 889;
				arithmeticOp();
				}
				break;
			case OP_AND:
			case OP_OR:
			case OP_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 890;
				logicalOp();
				}
				break;
			case LT:
			case GT:
			case OP_EQ:
			case OP_NE:
			case OP_LE:
			case OP_GE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 891;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(ElanParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ElanParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ElanParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DIV() { return GetToken(ElanParser.INT_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ElanParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ArithmeticOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOpContext arithmeticOp() {
		ArithmeticOpContext _localctx = new ArithmeticOpContext(Context, State);
		EnterRule(_localctx, 150, RULE_arithmeticOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(ElanParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(ElanParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(ElanParser.OP_XOR, 0); }
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 152, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(ElanParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(ElanParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(ElanParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(ElanParser.OP_NE, 0); }
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 154, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 963L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_TYPE() { return GetToken(ElanParser.VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureTypeContext dataStructureType() {
			return GetRuleContext<DataStructureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 156, RULE_type);
		try {
			State = 907;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 900;
				Match(VALUE_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 901;
				dataStructureType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 902;
				Match(TYPENAME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 903;
				Match(TYPENAME);
				State = 904;
				genericSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 905;
				tupleType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 906;
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ElanParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(ElanParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERABLE() { return GetToken(ElanParser.ITERABLE, 0); }
		public DataStructureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureTypeContext dataStructureType() {
		DataStructureTypeContext _localctx = new DataStructureTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_dataStructureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 135107988821114880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 910;
			genericSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ElanParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public GenericSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericSpecifierContext genericSpecifier() {
		GenericSpecifierContext _localctx = new GenericSpecifierContext(Context, State);
		EnterRule(_localctx, 160, RULE_genericSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			Match(LT);
			State = 913;
			Match(OF);
			State = 914;
			type();
			State = 919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 915;
				Match(COMMA);
				State = 916;
				type();
				}
				}
				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 922;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			Match(OPEN_BRACKET);
			State = 925;
			type();
			State = 928;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 926;
				Match(COMMA);
				State = 927;
				type();
				}
				}
				State = 930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 932;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			Match(OPEN_BRACKET);
			State = 935;
			type();
			State = 940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 936;
				Match(COMMA);
				State = 937;
				type();
				}
				}
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 943;
			Match(ARROW);
			State = 944;
			type();
			State = 945;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 50: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,94,948,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,5,0,175,8,0,10,0,12,0,178,9,0,1,0,5,0,181,8,0,10,0,12,0,184,
		9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,209,8,3,10,3,12,3,212,9,3,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,3,4,221,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,230,8,6,1,7,
		1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,3,10,
		249,8,10,1,10,1,10,3,10,253,8,10,1,10,1,10,3,10,257,8,10,1,11,3,11,260,
		8,11,1,11,1,11,1,11,3,11,265,8,11,1,11,1,11,1,12,3,12,270,8,12,1,12,1,
		12,1,12,3,12,275,8,12,1,12,1,12,1,13,1,13,3,13,281,8,13,1,13,1,13,1,13,
		3,13,286,8,13,5,13,288,8,13,10,13,12,13,291,9,13,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,15,1,15,1,15,3,15,304,8,15,1,15,1,15,1,16,1,16,1,16,
		5,16,311,8,16,10,16,12,16,314,9,16,1,17,1,17,1,17,5,17,319,8,17,10,17,
		12,17,322,9,17,1,18,1,18,1,18,1,19,3,19,328,8,19,1,19,1,19,1,19,1,20,1,
		20,3,20,335,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,3,23,357,8,23,1,23,1,23,1,
		23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
		25,1,25,3,25,377,8,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
		3,26,389,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,398,8,27,10,27,12,
		27,401,9,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,
		1,30,1,30,3,30,417,8,30,1,31,1,31,1,31,1,31,3,31,423,8,31,1,31,1,31,1,
		31,1,31,1,31,5,31,430,8,31,10,31,12,31,433,9,31,1,31,1,31,1,31,1,31,1,
		32,1,32,1,32,1,32,1,32,3,32,444,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,5,32,456,8,32,10,32,12,32,459,9,32,1,32,1,32,1,32,1,32,
		1,33,1,33,1,33,1,33,1,33,3,33,470,8,33,1,33,1,33,1,33,5,33,475,8,33,10,
		33,12,33,478,9,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,3,
		34,490,8,34,1,34,1,34,1,34,1,34,5,34,496,8,34,10,34,12,34,499,9,34,1,34,
		1,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,509,8,35,10,35,12,35,512,9,35,
		1,36,1,36,3,36,516,8,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,3,37,526,
		8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,3,38,537,8,38,1,38,1,
		38,3,38,541,8,38,1,38,1,38,3,38,545,8,38,1,39,1,39,1,39,1,39,1,39,5,39,
		552,8,39,10,39,12,39,555,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
		1,40,3,40,566,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,5,41,580,8,41,10,41,12,41,583,9,41,1,41,1,41,1,41,3,41,588,8,41,
		1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
		603,8,42,1,42,3,42,606,8,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,
		43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
		44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,
		46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,4,47,653,8,47,11,47,12,47,654,
		1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,3,48,665,8,48,1,48,1,48,1,48,1,
		49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,3,50,685,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,5,50,704,8,50,10,50,12,50,707,9,50,1,51,
		1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,
		1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,734,8,54,1,54,1,
		54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,747,8,55,1,56,1,56,
		3,56,751,8,56,1,56,1,56,1,56,1,56,1,56,3,56,758,8,56,1,57,1,57,1,57,1,
		58,1,58,3,58,765,8,58,1,59,1,59,1,59,1,59,1,59,3,59,772,8,59,1,60,1,60,
		1,60,1,60,3,60,778,8,60,1,61,1,61,1,61,1,61,3,61,784,8,61,1,62,1,62,1,
		62,1,62,1,62,1,62,5,62,792,8,62,10,62,12,62,795,9,62,1,62,1,62,1,63,1,
		63,1,63,1,63,1,63,1,63,5,63,805,8,63,10,63,12,63,808,9,63,1,63,1,63,1,
		64,1,64,1,64,1,64,4,64,816,8,64,11,64,12,64,817,1,64,1,64,1,65,1,65,1,
		65,1,65,5,65,826,8,65,10,65,12,65,829,9,65,1,65,1,65,1,66,1,66,1,66,1,
		66,5,66,837,8,66,10,66,12,66,840,9,66,1,66,1,66,1,67,1,67,1,67,1,67,1,
		67,1,67,1,68,1,68,1,68,1,68,3,68,854,8,68,1,68,1,68,1,69,1,69,1,69,1,69,
		5,69,862,8,69,10,69,12,69,865,9,69,1,69,1,69,1,70,1,70,1,70,1,70,5,70,
		873,8,70,10,70,12,70,876,9,70,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,
		1,72,1,72,1,73,1,73,1,74,1,74,1,74,3,74,893,8,74,1,75,1,75,1,76,1,76,1,
		77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,908,8,78,1,79,1,79,1,79,
		1,80,1,80,1,80,1,80,1,80,5,80,918,8,80,10,80,12,80,921,9,80,1,80,1,80,
		1,81,1,81,1,81,1,81,4,81,929,8,81,11,81,12,81,930,1,81,1,81,1,82,1,82,
		1,82,1,82,5,82,939,8,82,10,82,12,82,942,9,82,1,82,1,82,1,82,1,82,1,82,
		0,1,100,83,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
		92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
		130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
		0,7,2,0,87,87,91,91,2,0,20,20,37,37,2,0,70,70,79,79,1,0,69,75,2,0,78,78,
		80,81,2,0,76,77,82,85,1,0,53,56,989,0,176,1,0,0,0,2,187,1,0,0,0,4,194,
		1,0,0,0,6,210,1,0,0,0,8,213,1,0,0,0,10,222,1,0,0,0,12,226,1,0,0,0,14,231,
		1,0,0,0,16,237,1,0,0,0,18,243,1,0,0,0,20,256,1,0,0,0,22,259,1,0,0,0,24,
		269,1,0,0,0,26,280,1,0,0,0,28,292,1,0,0,0,30,300,1,0,0,0,32,307,1,0,0,
		0,34,315,1,0,0,0,36,323,1,0,0,0,38,327,1,0,0,0,40,334,1,0,0,0,42,336,1,
		0,0,0,44,347,1,0,0,0,46,353,1,0,0,0,48,362,1,0,0,0,50,373,1,0,0,0,52,382,
		1,0,0,0,54,390,1,0,0,0,56,406,1,0,0,0,58,408,1,0,0,0,60,416,1,0,0,0,62,
		418,1,0,0,0,64,438,1,0,0,0,66,464,1,0,0,0,68,483,1,0,0,0,70,504,1,0,0,
		0,72,513,1,0,0,0,74,521,1,0,0,0,76,544,1,0,0,0,78,546,1,0,0,0,80,565,1,
		0,0,0,82,567,1,0,0,0,84,593,1,0,0,0,86,612,1,0,0,0,88,622,1,0,0,0,90,630,
		1,0,0,0,92,637,1,0,0,0,94,648,1,0,0,0,96,661,1,0,0,0,98,669,1,0,0,0,100,
		684,1,0,0,0,102,708,1,0,0,0,104,712,1,0,0,0,106,721,1,0,0,0,108,726,1,
		0,0,0,110,746,1,0,0,0,112,757,1,0,0,0,114,759,1,0,0,0,116,764,1,0,0,0,
		118,771,1,0,0,0,120,777,1,0,0,0,122,783,1,0,0,0,124,785,1,0,0,0,126,798,
		1,0,0,0,128,811,1,0,0,0,130,821,1,0,0,0,132,832,1,0,0,0,134,843,1,0,0,
		0,136,849,1,0,0,0,138,857,1,0,0,0,140,868,1,0,0,0,142,879,1,0,0,0,144,
		883,1,0,0,0,146,887,1,0,0,0,148,892,1,0,0,0,150,894,1,0,0,0,152,896,1,
		0,0,0,154,898,1,0,0,0,156,907,1,0,0,0,158,909,1,0,0,0,160,912,1,0,0,0,
		162,924,1,0,0,0,164,934,1,0,0,0,166,175,3,2,1,0,167,175,3,28,14,0,168,
		175,3,40,20,0,169,175,3,52,26,0,170,175,3,54,27,0,171,175,3,60,30,0,172,
		175,3,4,2,0,173,175,3,48,24,0,174,166,1,0,0,0,174,167,1,0,0,0,174,168,
		1,0,0,0,174,169,1,0,0,0,174,170,1,0,0,0,174,171,1,0,0,0,174,172,1,0,0,
		0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,
		182,1,0,0,0,178,176,1,0,0,0,179,181,5,1,0,0,180,179,1,0,0,0,181,184,1,
		0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,0,
		185,186,5,0,0,1,186,1,1,0,0,0,187,188,5,1,0,0,188,189,5,27,0,0,189,190,
		3,6,3,0,190,191,5,1,0,0,191,192,5,15,0,0,192,193,5,27,0,0,193,3,1,0,0,
		0,194,195,5,1,0,0,195,196,5,42,0,0,196,197,5,87,0,0,197,198,3,6,3,0,198,
		199,5,1,0,0,199,200,5,15,0,0,200,201,5,42,0,0,201,5,1,0,0,0,202,209,3,
		14,7,0,203,209,3,16,8,0,204,209,3,80,40,0,205,209,3,8,4,0,206,209,3,10,
		5,0,207,209,3,12,6,0,208,202,1,0,0,0,208,203,1,0,0,0,208,204,1,0,0,0,208,
		205,1,0,0,0,208,206,1,0,0,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,
		0,0,0,210,211,1,0,0,0,211,7,1,0,0,0,212,210,1,0,0,0,213,214,5,1,0,0,214,
		220,5,6,0,0,215,221,3,22,11,0,216,217,3,20,10,0,217,218,5,66,0,0,218,219,
		3,22,11,0,219,221,1,0,0,0,220,215,1,0,0,0,220,216,1,0,0,0,221,9,1,0,0,
		0,222,223,5,1,0,0,223,224,5,44,0,0,224,225,7,0,0,0,225,11,1,0,0,0,226,
		227,5,1,0,0,227,229,5,31,0,0,228,230,3,100,50,0,229,228,1,0,0,0,229,230,
		1,0,0,0,230,13,1,0,0,0,231,232,5,1,0,0,232,233,5,48,0,0,233,234,3,20,10,
		0,234,235,5,57,0,0,235,236,3,100,50,0,236,15,1,0,0,0,237,238,5,1,0,0,238,
		239,5,38,0,0,239,240,3,20,10,0,240,241,5,45,0,0,241,242,3,100,50,0,242,
		17,1,0,0,0,243,244,3,20,10,0,244,245,5,57,0,0,245,246,3,100,50,0,246,19,
		1,0,0,0,247,249,3,114,57,0,248,247,1,0,0,0,248,249,1,0,0,0,249,250,1,0,
		0,0,250,252,5,87,0,0,251,253,3,108,54,0,252,251,1,0,0,0,252,253,1,0,0,
		0,253,257,1,0,0,0,254,257,3,128,64,0,255,257,3,134,67,0,256,248,1,0,0,
		0,256,254,1,0,0,0,256,255,1,0,0,0,257,21,1,0,0,0,258,260,3,114,57,0,259,
		258,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,262,5,87,0,0,262,264,5,
		63,0,0,263,265,3,26,13,0,264,263,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,
		0,266,267,5,64,0,0,267,23,1,0,0,0,268,270,3,114,57,0,269,268,1,0,0,0,269,
		270,1,0,0,0,270,271,1,0,0,0,271,272,5,87,0,0,272,274,5,63,0,0,273,275,
		3,26,13,0,274,273,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,277,5,64,
		0,0,277,25,1,0,0,0,278,281,3,100,50,0,279,281,3,106,53,0,280,278,1,0,0,
		0,280,279,1,0,0,0,281,289,1,0,0,0,282,285,5,67,0,0,283,286,3,100,50,0,
		284,286,3,106,53,0,285,283,1,0,0,0,285,284,1,0,0,0,286,288,1,0,0,0,287,
		282,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,27,1,0,
		0,0,291,289,1,0,0,0,292,293,5,1,0,0,293,294,5,33,0,0,294,295,3,30,15,0,
		295,296,3,6,3,0,296,297,5,1,0,0,297,298,5,15,0,0,298,299,5,33,0,0,299,
		29,1,0,0,0,300,301,5,87,0,0,301,303,5,63,0,0,302,304,3,32,16,0,303,302,
		1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,306,5,64,0,0,306,31,1,0,0,
		0,307,312,3,38,19,0,308,309,5,67,0,0,309,311,3,38,19,0,310,308,1,0,0,0,
		311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,33,1,0,0,0,314,312,
		1,0,0,0,315,320,3,36,18,0,316,317,5,67,0,0,317,319,3,36,18,0,318,316,1,
		0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,35,1,0,0,0,322,
		320,1,0,0,0,323,324,5,87,0,0,324,325,3,156,78,0,325,37,1,0,0,0,326,328,
		5,29,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,330,5,87,
		0,0,330,331,3,156,78,0,331,39,1,0,0,0,332,335,3,42,21,0,333,335,3,44,22,
		0,334,332,1,0,0,0,334,333,1,0,0,0,335,41,1,0,0,0,336,337,5,1,0,0,337,338,
		5,19,0,0,338,339,3,46,23,0,339,340,3,6,3,0,340,341,5,1,0,0,341,342,5,36,
		0,0,342,343,3,100,50,0,343,344,5,1,0,0,344,345,5,15,0,0,345,346,5,19,0,
		0,346,43,1,0,0,0,347,348,5,1,0,0,348,349,5,19,0,0,349,350,3,46,23,0,350,
		351,5,58,0,0,351,352,3,100,50,0,352,45,1,0,0,0,353,354,5,87,0,0,354,356,
		5,63,0,0,355,357,3,34,17,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,
		0,0,358,359,5,64,0,0,359,360,5,4,0,0,360,361,3,156,78,0,361,47,1,0,0,0,
		362,363,5,1,0,0,363,364,5,41,0,0,364,365,3,50,25,0,365,366,3,6,3,0,366,
		367,5,1,0,0,367,368,5,36,0,0,368,369,3,100,50,0,369,370,5,1,0,0,370,371,
		5,15,0,0,371,372,5,41,0,0,372,49,1,0,0,0,373,374,5,87,0,0,374,376,5,63,
		0,0,375,377,3,34,17,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,
		378,379,5,64,0,0,379,380,5,4,0,0,380,381,3,156,78,0,381,51,1,0,0,0,382,
		383,5,1,0,0,383,384,5,10,0,0,384,385,5,87,0,0,385,388,5,57,0,0,386,389,
		3,116,58,0,387,389,3,76,38,0,388,386,1,0,0,0,388,387,1,0,0,0,389,53,1,
		0,0,0,390,391,5,1,0,0,391,392,5,16,0,0,392,393,3,56,28,0,393,394,5,1,0,
		0,394,399,5,87,0,0,395,396,5,67,0,0,396,398,5,87,0,0,397,395,1,0,0,0,398,
		401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,399,1,
		0,0,0,402,403,5,1,0,0,403,404,5,15,0,0,404,405,5,16,0,0,405,55,1,0,0,0,
		406,407,5,86,0,0,407,57,1,0,0,0,408,409,3,56,28,0,409,410,5,66,0,0,410,
		411,5,87,0,0,411,59,1,0,0,0,412,417,3,62,31,0,413,417,3,64,32,0,414,417,
		3,66,33,0,415,417,3,68,34,0,416,412,1,0,0,0,416,413,1,0,0,0,416,414,1,
		0,0,0,416,415,1,0,0,0,417,61,1,0,0,0,418,419,5,1,0,0,419,420,5,9,0,0,420,
		422,5,86,0,0,421,423,3,70,35,0,422,421,1,0,0,0,422,423,1,0,0,0,423,424,
		1,0,0,0,424,431,3,74,37,0,425,430,3,72,36,0,426,430,3,40,20,0,427,430,
		3,28,14,0,428,430,3,48,24,0,429,425,1,0,0,0,429,426,1,0,0,0,429,427,1,
		0,0,0,429,428,1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,
		432,434,1,0,0,0,433,431,1,0,0,0,434,435,5,1,0,0,435,436,5,15,0,0,436,437,
		5,9,0,0,437,63,1,0,0,0,438,439,5,1,0,0,439,440,5,5,0,0,440,441,5,9,0,0,
		441,443,5,86,0,0,442,444,3,70,35,0,443,442,1,0,0,0,443,444,1,0,0,0,444,
		457,1,0,0,0,445,456,3,72,36,0,446,447,5,1,0,0,447,448,5,19,0,0,448,456,
		3,46,23,0,449,450,5,1,0,0,450,451,5,33,0,0,451,456,3,30,15,0,452,453,5,
		1,0,0,453,454,5,41,0,0,454,456,3,50,25,0,455,445,1,0,0,0,455,446,1,0,0,
		0,455,449,1,0,0,0,455,452,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,
		458,1,0,0,0,458,460,1,0,0,0,459,457,1,0,0,0,460,461,5,1,0,0,461,462,5,
		15,0,0,462,463,5,9,0,0,463,65,1,0,0,0,464,465,5,1,0,0,465,466,5,22,0,0,
		466,467,5,9,0,0,467,469,5,86,0,0,468,470,3,70,35,0,469,468,1,0,0,0,469,
		470,1,0,0,0,470,471,1,0,0,0,471,476,3,74,37,0,472,475,3,72,36,0,473,475,
		3,40,20,0,474,472,1,0,0,0,474,473,1,0,0,0,475,478,1,0,0,0,476,474,1,0,
		0,0,476,477,1,0,0,0,477,479,1,0,0,0,478,476,1,0,0,0,479,480,5,1,0,0,480,
		481,5,15,0,0,481,482,5,9,0,0,482,67,1,0,0,0,483,484,5,1,0,0,484,485,5,
		5,0,0,485,486,5,22,0,0,486,487,5,9,0,0,487,489,5,86,0,0,488,490,3,70,35,
		0,489,488,1,0,0,0,489,490,1,0,0,0,490,497,1,0,0,0,491,496,3,72,36,0,492,
		493,5,1,0,0,493,494,5,19,0,0,494,496,3,46,23,0,495,491,1,0,0,0,495,492,
		1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,500,1,0,0,
		0,499,497,1,0,0,0,500,501,5,1,0,0,501,502,5,15,0,0,502,503,5,9,0,0,503,
		69,1,0,0,0,504,505,5,24,0,0,505,510,3,156,78,0,506,507,5,67,0,0,507,509,
		3,156,78,0,508,506,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,
		0,0,511,71,1,0,0,0,512,510,1,0,0,0,513,515,5,1,0,0,514,516,5,32,0,0,515,
		514,1,0,0,0,515,516,1,0,0,0,516,517,1,0,0,0,517,518,5,34,0,0,518,519,5,
		87,0,0,519,520,3,156,78,0,520,73,1,0,0,0,521,522,5,1,0,0,522,523,5,11,
		0,0,523,525,5,63,0,0,524,526,3,34,17,0,525,524,1,0,0,0,525,526,1,0,0,0,
		526,527,1,0,0,0,527,528,5,64,0,0,528,529,3,6,3,0,529,530,5,1,0,0,530,531,
		5,15,0,0,531,532,5,11,0,0,532,75,1,0,0,0,533,534,3,156,78,0,534,536,5,
		63,0,0,535,537,3,26,13,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,
		0,538,540,5,64,0,0,539,541,3,78,39,0,540,539,1,0,0,0,540,541,1,0,0,0,541,
		545,1,0,0,0,542,543,5,87,0,0,543,545,3,78,39,0,544,533,1,0,0,0,544,542,
		1,0,0,0,545,77,1,0,0,0,546,547,5,50,0,0,547,548,5,59,0,0,548,553,3,18,
		9,0,549,550,5,67,0,0,550,552,3,18,9,0,551,549,1,0,0,0,552,555,1,0,0,0,
		553,551,1,0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,555,553,1,0,0,0,556,557,
		5,60,0,0,557,79,1,0,0,0,558,566,3,82,41,0,559,566,3,84,42,0,560,566,3,
		86,43,0,561,566,3,88,44,0,562,566,3,90,45,0,563,566,3,92,46,0,564,566,
		3,94,47,0,565,558,1,0,0,0,565,559,1,0,0,0,565,560,1,0,0,0,565,561,1,0,
		0,0,565,562,1,0,0,0,565,563,1,0,0,0,565,564,1,0,0,0,566,81,1,0,0,0,567,
		568,5,1,0,0,568,569,5,21,0,0,569,570,3,100,50,0,570,571,5,43,0,0,571,581,
		3,6,3,0,572,573,5,1,0,0,573,574,5,14,0,0,574,575,5,21,0,0,575,576,3,100,
		50,0,576,577,5,43,0,0,577,578,3,6,3,0,578,580,1,0,0,0,579,572,1,0,0,0,
		580,583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,587,1,0,0,0,583,581,
		1,0,0,0,584,585,5,1,0,0,585,586,5,14,0,0,586,588,3,6,3,0,587,584,1,0,0,
		0,587,588,1,0,0,0,588,589,1,0,0,0,589,590,5,1,0,0,590,591,5,15,0,0,591,
		592,5,21,0,0,592,83,1,0,0,0,593,594,5,1,0,0,594,595,5,17,0,0,595,596,5,
		87,0,0,596,597,5,57,0,0,597,598,3,100,50,0,598,599,5,45,0,0,599,605,3,
		100,50,0,600,602,5,39,0,0,601,603,5,70,0,0,602,601,1,0,0,0,602,603,1,0,
		0,0,603,604,1,0,0,0,604,606,5,88,0,0,605,600,1,0,0,0,605,606,1,0,0,0,606,
		607,1,0,0,0,607,608,3,6,3,0,608,609,5,1,0,0,609,610,5,15,0,0,610,611,5,
		17,0,0,611,85,1,0,0,0,612,613,5,1,0,0,613,614,5,18,0,0,614,615,5,87,0,
		0,615,616,5,23,0,0,616,617,3,100,50,0,617,618,3,6,3,0,618,619,5,1,0,0,
		619,620,5,15,0,0,620,621,5,18,0,0,621,87,1,0,0,0,622,623,5,1,0,0,623,624,
		5,49,0,0,624,625,3,100,50,0,625,626,3,6,3,0,626,627,5,1,0,0,627,628,5,
		15,0,0,628,629,5,49,0,0,629,89,1,0,0,0,630,631,5,1,0,0,631,632,5,35,0,
		0,632,633,3,6,3,0,633,634,5,1,0,0,634,635,5,47,0,0,635,636,3,100,50,0,
		636,91,1,0,0,0,637,638,5,1,0,0,638,639,5,46,0,0,639,640,3,6,3,0,640,641,
		5,1,0,0,641,642,5,8,0,0,642,643,5,87,0,0,643,644,3,6,3,0,644,645,5,1,0,
		0,645,646,5,15,0,0,646,647,5,46,0,0,647,93,1,0,0,0,648,649,5,1,0,0,649,
		650,5,40,0,0,650,652,3,100,50,0,651,653,3,96,48,0,652,651,1,0,0,0,653,
		654,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,657,3,
		98,49,0,657,658,5,1,0,0,658,659,5,15,0,0,659,660,5,40,0,0,660,95,1,0,0,
		0,661,662,5,1,0,0,662,664,5,7,0,0,663,665,5,70,0,0,664,663,1,0,0,0,664,
		665,1,0,0,0,665,666,1,0,0,0,666,667,3,118,59,0,667,668,3,6,3,0,668,97,
		1,0,0,0,669,670,5,1,0,0,670,671,5,13,0,0,671,672,3,6,3,0,672,99,1,0,0,
		0,673,674,6,50,-1,0,674,685,3,102,51,0,675,685,3,24,12,0,676,685,3,112,
		56,0,677,678,3,146,73,0,678,679,3,100,50,7,679,685,1,0,0,0,680,685,3,76,
		38,0,681,685,3,104,52,0,682,683,5,1,0,0,683,685,3,100,50,1,684,673,1,0,
		0,0,684,675,1,0,0,0,684,676,1,0,0,0,684,677,1,0,0,0,684,680,1,0,0,0,684,
		681,1,0,0,0,684,682,1,0,0,0,685,705,1,0,0,0,686,687,10,6,0,0,687,688,5,
		73,0,0,688,704,3,100,50,7,689,690,10,5,0,0,690,691,3,148,74,0,691,692,
		3,100,50,6,692,704,1,0,0,0,693,694,10,10,0,0,694,704,3,108,54,0,695,696,
		10,9,0,0,696,697,5,66,0,0,697,704,3,24,12,0,698,699,10,8,0,0,699,700,5,
		66,0,0,700,704,5,87,0,0,701,702,10,2,0,0,702,704,3,78,39,0,703,686,1,0,
		0,0,703,689,1,0,0,0,703,693,1,0,0,0,703,695,1,0,0,0,703,698,1,0,0,0,703,
		701,1,0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,101,1,
		0,0,0,707,705,1,0,0,0,708,709,5,63,0,0,709,710,3,100,50,0,710,711,5,64,
		0,0,711,103,1,0,0,0,712,713,5,21,0,0,713,714,3,100,50,0,714,715,5,1,0,
		0,715,716,5,43,0,0,716,717,3,100,50,0,717,718,5,1,0,0,718,719,5,14,0,0,
		719,720,3,100,50,0,720,105,1,0,0,0,721,722,5,25,0,0,722,723,3,26,13,0,
		723,724,5,58,0,0,724,725,3,100,50,0,725,107,1,0,0,0,726,733,5,61,0,0,727,
		734,3,100,50,0,728,729,3,100,50,0,729,730,5,67,0,0,730,731,3,100,50,0,
		731,734,1,0,0,0,732,734,3,110,55,0,733,727,1,0,0,0,733,728,1,0,0,0,733,
		732,1,0,0,0,734,735,1,0,0,0,735,736,5,62,0,0,736,109,1,0,0,0,737,738,3,
		100,50,0,738,739,5,65,0,0,739,740,3,100,50,0,740,747,1,0,0,0,741,742,3,
		100,50,0,742,743,5,65,0,0,743,747,1,0,0,0,744,745,5,65,0,0,745,747,3,100,
		50,0,746,737,1,0,0,0,746,741,1,0,0,0,746,744,1,0,0,0,747,111,1,0,0,0,748,
		758,3,116,58,0,749,751,3,114,57,0,750,749,1,0,0,0,750,751,1,0,0,0,751,
		752,1,0,0,0,752,758,5,87,0,0,753,758,3,120,60,0,754,758,5,37,0,0,755,756,
		5,13,0,0,756,758,3,156,78,0,757,748,1,0,0,0,757,750,1,0,0,0,757,753,1,
		0,0,0,757,754,1,0,0,0,757,755,1,0,0,0,758,113,1,0,0,0,759,760,7,1,0,0,
		760,761,5,66,0,0,761,115,1,0,0,0,762,765,3,118,59,0,763,765,3,122,61,0,
		764,762,1,0,0,0,764,763,1,0,0,0,765,117,1,0,0,0,766,772,5,51,0,0,767,772,
		5,88,0,0,768,772,5,89,0,0,769,772,5,90,0,0,770,772,3,58,29,0,771,766,1,
		0,0,0,771,767,1,0,0,0,771,768,1,0,0,0,771,769,1,0,0,0,771,770,1,0,0,0,
		772,119,1,0,0,0,773,778,3,130,65,0,774,778,3,136,68,0,775,778,3,124,62,
		0,776,778,3,138,69,0,777,773,1,0,0,0,777,774,1,0,0,0,777,775,1,0,0,0,777,
		776,1,0,0,0,778,121,1,0,0,0,779,784,5,91,0,0,780,784,3,126,63,0,781,784,
		3,132,66,0,782,784,3,140,70,0,783,779,1,0,0,0,783,780,1,0,0,0,783,781,
		1,0,0,0,783,782,1,0,0,0,784,123,1,0,0,0,785,786,5,63,0,0,786,787,3,100,
		50,0,787,788,5,67,0,0,788,793,3,100,50,0,789,790,5,67,0,0,790,792,3,100,
		50,0,791,789,1,0,0,0,792,795,1,0,0,0,793,791,1,0,0,0,793,794,1,0,0,0,794,
		796,1,0,0,0,795,793,1,0,0,0,796,797,5,64,0,0,797,125,1,0,0,0,798,799,5,
		63,0,0,799,800,3,116,58,0,800,801,5,67,0,0,801,806,3,116,58,0,802,803,
		5,67,0,0,803,805,3,116,58,0,804,802,1,0,0,0,805,808,1,0,0,0,806,804,1,
		0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,806,1,0,0,0,809,810,5,64,0,0,
		810,127,1,0,0,0,811,812,5,63,0,0,812,815,5,87,0,0,813,814,5,67,0,0,814,
		816,5,87,0,0,815,813,1,0,0,0,816,817,1,0,0,0,817,815,1,0,0,0,817,818,1,
		0,0,0,818,819,1,0,0,0,819,820,5,64,0,0,820,129,1,0,0,0,821,822,5,59,0,
		0,822,827,3,100,50,0,823,824,5,67,0,0,824,826,3,100,50,0,825,823,1,0,0,
		0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,830,1,0,0,0,829,
		827,1,0,0,0,830,831,5,60,0,0,831,131,1,0,0,0,832,833,5,59,0,0,833,838,
		3,116,58,0,834,835,5,67,0,0,835,837,3,116,58,0,836,834,1,0,0,0,837,840,
		1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,840,838,1,0,0,
		0,841,842,5,60,0,0,842,133,1,0,0,0,843,844,5,59,0,0,844,845,5,87,0,0,845,
		846,5,68,0,0,846,847,5,87,0,0,847,848,5,60,0,0,848,135,1,0,0,0,849,850,
		5,53,0,0,850,851,3,160,80,0,851,853,5,63,0,0,852,854,5,88,0,0,853,852,
		1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,856,5,64,0,0,856,137,1,0,0,
		0,857,858,5,59,0,0,858,863,3,142,71,0,859,860,5,67,0,0,860,862,3,142,71,
		0,861,859,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,
		866,1,0,0,0,865,863,1,0,0,0,866,867,5,60,0,0,867,139,1,0,0,0,868,869,5,
		59,0,0,869,874,3,144,72,0,870,871,5,67,0,0,871,873,3,144,72,0,872,870,
		1,0,0,0,873,876,1,0,0,0,874,872,1,0,0,0,874,875,1,0,0,0,875,877,1,0,0,
		0,876,874,1,0,0,0,877,878,5,60,0,0,878,141,1,0,0,0,879,880,3,100,50,0,
		880,881,5,68,0,0,881,882,3,100,50,0,882,143,1,0,0,0,883,884,3,116,58,0,
		884,885,5,68,0,0,885,886,3,116,58,0,886,145,1,0,0,0,887,888,7,2,0,0,888,
		147,1,0,0,0,889,893,3,150,75,0,890,893,3,152,76,0,891,893,3,154,77,0,892,
		889,1,0,0,0,892,890,1,0,0,0,892,891,1,0,0,0,893,149,1,0,0,0,894,895,7,
		3,0,0,895,151,1,0,0,0,896,897,7,4,0,0,897,153,1,0,0,0,898,899,7,5,0,0,
		899,155,1,0,0,0,900,908,5,52,0,0,901,908,3,158,79,0,902,908,5,86,0,0,903,
		904,5,86,0,0,904,908,3,160,80,0,905,908,3,162,81,0,906,908,3,164,82,0,
		907,900,1,0,0,0,907,901,1,0,0,0,907,902,1,0,0,0,907,903,1,0,0,0,907,905,
		1,0,0,0,907,906,1,0,0,0,908,157,1,0,0,0,909,910,7,6,0,0,910,911,3,160,
		80,0,911,159,1,0,0,0,912,913,5,76,0,0,913,914,5,28,0,0,914,919,3,156,78,
		0,915,916,5,67,0,0,916,918,3,156,78,0,917,915,1,0,0,0,918,921,1,0,0,0,
		919,917,1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,921,919,1,0,0,0,922,923,
		5,77,0,0,923,161,1,0,0,0,924,925,5,63,0,0,925,928,3,156,78,0,926,927,5,
		67,0,0,927,929,3,156,78,0,928,926,1,0,0,0,929,930,1,0,0,0,930,928,1,0,
		0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,933,5,64,0,0,933,163,1,0,0,0,934,
		935,5,63,0,0,935,940,3,156,78,0,936,937,5,67,0,0,937,939,3,156,78,0,938,
		936,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,943,1,
		0,0,0,942,940,1,0,0,0,943,944,5,58,0,0,944,945,3,156,78,0,945,946,5,64,
		0,0,946,165,1,0,0,0,77,174,176,182,208,210,220,229,248,252,256,259,264,
		269,274,280,285,289,303,312,320,327,334,356,376,388,399,416,422,429,431,
		443,455,457,469,474,476,489,495,497,510,515,525,536,540,544,553,565,581,
		587,602,605,654,664,684,703,705,733,746,750,757,764,771,777,783,793,806,
		817,827,838,853,863,874,892,907,919,930,940
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
