//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/GitHub/Elan/Parser/Elan.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ElanParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, NL=2, SINGLE_LINE_COMMENT=3, COMMENT_MARKER=4, AS=5, 
		ABSTRACT=6, CASE=7, CATCH=8, CLASS=9, CONSTANT=10, CONSTRUCTOR=11, CURRY=12, 
		DEFAULT=13, ELSE=14, END=15, ENUMERATION=16, FOR=17, FUNCTION=18, IF=19, 
		IMMUTABLE=20, IN=21, INHERITS=22, LAMBDA=23, LET=24, MAIN=25, NEW=26, 
		PARTIAL=27, PRIVATE=28, PROCEDURE=29, PROPERTY=30, REPEAT=31, RETURN=32, 
		SELF=33, STEP=34, SWITCH=35, THEN=36, THROW=37, TO=38, TRY=39, UNTIL=40, 
		VAR=41, WHILE=42, WITH=43, BOOL_VALUE=44, VALUE_TYPE=45, ARRAY=46, LIST=47, 
		DICTIONARY=48, ITERABLE=49, ASSIGN=50, ARROW=51, OPEN_BRACE=52, CLOSE_BRACE=53, 
		OPEN_SQ_BRACKET=54, CLOSE_SQ_BRACKET=55, OPEN_BRACKET=56, CLOSE_BRACKET=57, 
		DOUBLE_DOT=58, DOT=59, COMMA=60, COLON=61, PLUS=62, MINUS=63, MULT=64, 
		DIVIDE=65, POWER=66, MOD=67, INT_DIV=68, LT=69, GT=70, NULLABLE=71, OP_AND=72, 
		OP_NOT=73, OP_OR=74, OP_XOR=75, OP_EQ=76, OP_NE=77, OP_LE=78, OP_GE=79, 
		TYPENAME=80, IDENTIFIER=81, LITERAL_INTEGER=82, LITERAL_FLOAT=83, LITERAL_DECIMAL=84, 
		LITERAL_CHAR=85, LITERAL_STRING=86, VERBATIM_ONLY_STRING=87, WHITESPACES=88, 
		NEWLINE=89, WS=90;
	public const int
		RULE_file = 0, RULE_main = 1, RULE_statementBlock = 2, RULE_callStatement = 3, 
		RULE_freestandingException = 4, RULE_varDef = 5, RULE_assignment = 6, 
		RULE_assignableValue = 7, RULE_methodCall = 8, RULE_argumentList = 9, 
		RULE_procedureDef = 10, RULE_procedureSignature = 11, RULE_parameterList = 12, 
		RULE_parameter = 13, RULE_functionDef = 14, RULE_functionWithBody = 15, 
		RULE_expressionFunction = 16, RULE_letIn = 17, RULE_functionSignature = 18, 
		RULE_constantDef = 19, RULE_enumDef = 20, RULE_enumType = 21, RULE_enumValue = 22, 
		RULE_classDef = 23, RULE_mutableClass = 24, RULE_immutableClass = 25, 
		RULE_abstractClass = 26, RULE_inherits = 27, RULE_property = 28, RULE_constructor = 29, 
		RULE_newInstance = 30, RULE_withClause = 31, RULE_proceduralControlFlow = 32, 
		RULE_if = 33, RULE_for = 34, RULE_forIn = 35, RULE_while = 36, RULE_repeat = 37, 
		RULE_try = 38, RULE_switch = 39, RULE_case = 40, RULE_caseDefault = 41, 
		RULE_expression = 42, RULE_bracketedExpression = 43, RULE_ifExpression = 44, 
		RULE_lambda = 45, RULE_throwException = 46, RULE_index = 47, RULE_range = 48, 
		RULE_value = 49, RULE_literal = 50, RULE_literalValue = 51, RULE_dataStructureDefinition = 52, 
		RULE_literalDataStructure = 53, RULE_tupleDefinition = 54, RULE_literalTuple = 55, 
		RULE_tupleDecomp = 56, RULE_listDefinition = 57, RULE_literalList = 58, 
		RULE_listDecomp = 59, RULE_arrayDefinition = 60, RULE_dictionaryDefinition = 61, 
		RULE_literalDictionary = 62, RULE_kvp = 63, RULE_literalKvp = 64, RULE_unaryOp = 65, 
		RULE_binaryOp = 66, RULE_arithmeticOp = 67, RULE_logicalOp = 68, RULE_conditionalOp = 69, 
		RULE_type = 70, RULE_dataStructureType = 71, RULE_genericSpecifier = 72, 
		RULE_tupleType = 73, RULE_funcType = 74;
	public static readonly string[] ruleNames = {
		"file", "main", "statementBlock", "callStatement", "freestandingException", 
		"varDef", "assignment", "assignableValue", "methodCall", "argumentList", 
		"procedureDef", "procedureSignature", "parameterList", "parameter", "functionDef", 
		"functionWithBody", "expressionFunction", "letIn", "functionSignature", 
		"constantDef", "enumDef", "enumType", "enumValue", "classDef", "mutableClass", 
		"immutableClass", "abstractClass", "inherits", "property", "constructor", 
		"newInstance", "withClause", "proceduralControlFlow", "if", "for", "forIn", 
		"while", "repeat", "try", "switch", "case", "caseDefault", "expression", 
		"bracketedExpression", "ifExpression", "lambda", "throwException", "index", 
		"range", "value", "literal", "literalValue", "dataStructureDefinition", 
		"literalDataStructure", "tupleDefinition", "literalTuple", "tupleDecomp", 
		"listDefinition", "literalList", "listDecomp", "arrayDefinition", "dictionaryDefinition", 
		"literalDictionary", "kvp", "literalKvp", "unaryOp", "binaryOp", "arithmeticOp", 
		"logicalOp", "conditionalOp", "type", "dataStructureType", "genericSpecifier", 
		"tupleType", "funcType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\u00EF\\u00BB\\u00BF'", null, null, "'#'", "'as'", "'abstract'", 
		"'case'", "'catch'", "'class'", "'constant'", "'constructor'", "'curry'", 
		"'default'", "'else'", "'end'", "'enumeration'", "'for'", "'function'", 
		"'if'", "'immutable'", "'in'", "'inherits'", "'lambda'", "'let'", "'main'", 
		"'new'", "'partial'", "'private'", "'procedure'", "'property'", "'repeat'", 
		"'return'", "'self'", "'step'", "'switch'", "'then'", "'throw'", "'to'", 
		"'try'", "'until'", "'var'", "'while'", "'with'", null, null, "'Array'", 
		"'List'", "'Dictionary'", "'Iter'", "'='", "'->'", "'{'", "'}'", "'['", 
		"']'", "'('", "')'", "'..'", "'.'", null, "':'", "'+'", "'-'", "'*'", 
		"'/'", "'^'", "'mod'", "'div'", "'<'", "'>'", "'?'", "'and'", "'not'", 
		"'or'", "'xor'", null, null, "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "NL", "SINGLE_LINE_COMMENT", "COMMENT_MARKER", 
		"AS", "ABSTRACT", "CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", 
		"CURRY", "DEFAULT", "ELSE", "END", "ENUMERATION", "FOR", "FUNCTION", "IF", 
		"IMMUTABLE", "IN", "INHERITS", "LAMBDA", "LET", "MAIN", "NEW", "PARTIAL", 
		"PRIVATE", "PROCEDURE", "PROPERTY", "REPEAT", "RETURN", "SELF", "STEP", 
		"SWITCH", "THEN", "THROW", "TO", "TRY", "UNTIL", "VAR", "WHILE", "WITH", 
		"BOOL_VALUE", "VALUE_TYPE", "ARRAY", "LIST", "DICTIONARY", "ITERABLE", 
		"ASSIGN", "ARROW", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "DOUBLE_DOT", "DOT", "COMMA", "COLON", 
		"PLUS", "MINUS", "MULT", "DIVIDE", "POWER", "MOD", "INT_DIV", "LT", "GT", 
		"NULLABLE", "OP_AND", "OP_NOT", "OP_OR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LE", 
		"OP_GE", "TYPENAME", "IDENTIFIER", "LITERAL_INTEGER", "LITERAL_FLOAT", 
		"LITERAL_DECIMAL", "LITERAL_CHAR", "LITERAL_STRING", "VERBATIM_ONLY_STRING", 
		"WHITESPACES", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Elan.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ElanParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElanParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElanParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ElanParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext[] enumDef() {
			return GetRuleContexts<EnumDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef(int i) {
			return GetRuleContext<EnumDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 156;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 150;
						main();
						}
						break;
					case 2:
						{
						State = 151;
						procedureDef();
						}
						break;
					case 3:
						{
						State = 152;
						functionDef();
						}
						break;
					case 4:
						{
						State = 153;
						constantDef();
						}
						break;
					case 5:
						{
						State = 154;
						enumDef();
						}
						break;
					case 6:
						{
						State = 155;
						classDef();
						}
						break;
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 161;
				Match(NL);
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(ElanParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(ElanParser.MAIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(NL);
			State = 170;
			Match(MAIN);
			State = 171;
			statementBlock();
			State = 172;
			Match(NL);
			State = 173;
			Match(END);
			State = 174;
			Match(MAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext[] proceduralControlFlow() {
			return GetRuleContexts<ProceduralControlFlowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext proceduralControlFlow(int i) {
			return GetRuleContext<ProceduralControlFlowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext[] callStatement() {
			return GetRuleContexts<CallStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement(int i) {
			return GetRuleContext<CallStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreestandingExceptionContext[] freestandingException() {
			return GetRuleContexts<FreestandingExceptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreestandingExceptionContext freestandingException(int i) {
			return GetRuleContext<FreestandingExceptionContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 181;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 176;
						varDef();
						}
						break;
					case 2:
						{
						State = 177;
						assignment();
						}
						break;
					case 3:
						{
						State = 178;
						proceduralControlFlow();
						}
						break;
					case 4:
						{
						State = 179;
						callStatement();
						}
						break;
					case 5:
						{
						State = 180;
						freestandingException();
						}
						break;
					}
					} 
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(NL);
			State = 187;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreestandingExceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException() {
			return GetRuleContext<ThrowExceptionContext>(0);
		}
		public FreestandingExceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freestandingException; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreestandingException(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreestandingExceptionContext freestandingException() {
		FreestandingExceptionContext _localctx = new FreestandingExceptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_freestandingException);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(NL);
			State = 190;
			throwException();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ElanParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(NL);
			State = 193;
			Match(VAR);
			State = 194;
			assignableValue();
			State = 195;
			Match(ASSIGN);
			State = 196;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(NL);
			State = 199;
			assignableValue();
			State = 200;
			Match(ASSIGN);
			State = 201;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleDecompContext tupleDecomp() {
			return GetRuleContext<TupleDecompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDecompContext listDecomp() {
			return GetRuleContext<ListDecompContext>(0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableValueContext assignableValue() {
		AssignableValueContext _localctx = new AssignableValueContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignableValue);
		int _la;
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SELF) {
					{
					State = 203;
					Match(SELF);
					State = 204;
					Match(DOT);
					}
				}

				State = 207;
				Match(IDENTIFIER);
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_SQ_BRACKET) {
					{
					State = 208;
					index();
					}
				}

				}
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				tupleDecomp();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212;
				listDecomp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRY() { return GetToken(ElanParser.CURRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(ElanParser.PARTIAL, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRY || _la==PARTIAL) {
				{
				State = 215;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRY || _la==PARTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 218;
			Match(IDENTIFIER);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 219;
				genericSpecifier();
				}
			}

			State = 222;
			Match(OPEN_BRACKET);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9146793104764301308L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 16257L) != 0)) {
				{
				State = 223;
				argumentList();
				}
			}

			State = 226;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 18, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			expression(0);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 229;
				Match(COMMA);
				State = 230;
				expression(0);
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ProcedureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefContext procedureDef() {
		ProcedureDefContext _localctx = new ProcedureDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_procedureDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(NL);
			State = 237;
			Match(PROCEDURE);
			State = 238;
			procedureSignature();
			State = 239;
			statementBlock();
			State = 240;
			Match(NL);
			State = 241;
			Match(END);
			State = 242;
			Match(PROCEDURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ProcedureSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSignatureContext procedureSignature() {
		ProcedureSignatureContext _localctx = new ProcedureSignatureContext(Context, State);
		EnterRule(_localctx, 22, RULE_procedureSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(IDENTIFIER);
			State = 245;
			Match(OPEN_BRACKET);
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 246;
				Match(NL);
				}
				break;
			}
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL || _la==IDENTIFIER) {
				{
				State = 249;
				parameterList();
				}
			}

			State = 252;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			parameter();
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 255;
				Match(COMMA);
				State = 256;
				parameter();
				}
				}
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 262;
				Match(NL);
				}
			}

			State = 265;
			Match(IDENTIFIER);
			State = 266;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionWithBodyContext functionWithBody() {
			return GetRuleContext<FunctionWithBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionFunctionContext expressionFunction() {
			return GetRuleContext<ExpressionFunctionContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionDef);
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				functionWithBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				expressionFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionWithBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElanParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public FunctionWithBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionWithBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionWithBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionWithBodyContext functionWithBody() {
		FunctionWithBodyContext _localctx = new FunctionWithBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionWithBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(NL);
			State = 273;
			Match(FUNCTION);
			State = 274;
			functionSignature();
			State = 275;
			statementBlock();
			State = 276;
			Match(NL);
			State = 277;
			Match(RETURN);
			State = 278;
			expression(0);
			State = 279;
			Match(NL);
			State = 280;
			Match(END);
			State = 281;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ElanParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetInContext letIn() {
			return GetRuleContext<LetInContext>(0);
		}
		public ExpressionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionFunctionContext expressionFunction() {
		ExpressionFunctionContext _localctx = new ExpressionFunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_expressionFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(NL);
			State = 284;
			Match(FUNCTION);
			State = 285;
			functionSignature();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 286;
				Match(NL);
				}
			}

			State = 289;
			Match(ARROW);
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 290;
				Match(NL);
				}
				break;
			}
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET) {
				{
				State = 293;
				letIn();
				}
			}

			State = 296;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ElanParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext[] assignableValue() {
			return GetRuleContexts<AssignableValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue(int i) {
			return GetRuleContext<AssignableValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(ElanParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(ElanParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LetInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetInContext letIn() {
		LetInContext _localctx = new LetInContext(Context, State);
		EnterRule(_localctx, 34, RULE_letIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(LET);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 299;
				Match(NL);
				}
			}

			State = 302;
			assignableValue();
			State = 303;
			Match(ASSIGN);
			State = 304;
			expression(0);
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 305;
				Match(COMMA);
				State = 306;
				assignableValue();
				State = 307;
				Match(ASSIGN);
				State = 308;
				expression(0);
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 315;
				Match(NL);
				}
			}

			State = 318;
			Match(IN);
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 319;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ElanParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(IDENTIFIER);
			State = 323;
			Match(OPEN_BRACKET);
			State = 325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 324;
				Match(NL);
				}
				break;
			}
			State = 328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 327;
				parameterList();
				}
				break;
			}
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 330;
				Match(NL);
				}
			}

			State = 333;
			Match(CLOSE_BRACKET);
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 334;
				Match(NL);
				}
			}

			State = 337;
			Match(AS);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 338;
				Match(NL);
				}
			}

			State = 341;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ElanParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefContext constantDef() {
		ConstantDefContext _localctx = new ConstantDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_constantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			Match(NL);
			State = 344;
			Match(CONSTANT);
			State = 345;
			Match(IDENTIFIER);
			State = 346;
			Match(ASSIGN);
			State = 347;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENUMERATION() { return GetTokens(ElanParser.ENUMERATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATION(int i) {
			return GetToken(ElanParser.ENUMERATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			Match(NL);
			State = 350;
			Match(ENUMERATION);
			State = 351;
			enumType();
			State = 352;
			Match(NL);
			State = 353;
			Match(IDENTIFIER);
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 354;
				Match(COMMA);
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 355;
					Match(NL);
					}
				}

				State = 358;
				Match(IDENTIFIER);
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 364;
			Match(NL);
			State = 365;
			Match(END);
			State = 366;
			Match(ENUMERATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_enumType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(TYPENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			enumType();
			State = 371;
			Match(DOT);
			State = 372;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbstractClassContext abstractClass() {
			return GetRuleContext<AbstractClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MutableClassContext mutableClass() {
			return GetRuleContext<MutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmutableClassContext immutableClass() {
			return GetRuleContext<ImmutableClassContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 46, RULE_classDef);
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374;
				abstractClass();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375;
				mutableClass();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 376;
				immutableClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		public MutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MutableClassContext mutableClass() {
		MutableClassContext _localctx = new MutableClassContext(Context, State);
		EnterRule(_localctx, 48, RULE_mutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(NL);
			State = 380;
			Match(CLASS);
			State = 381;
			Match(TYPENAME);
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 382;
				inherits();
				}
			}

			State = 391;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 389;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
					case 1:
						{
						State = 385;
						constructor();
						}
						break;
					case 2:
						{
						State = 386;
						property();
						}
						break;
					case 3:
						{
						State = 387;
						functionDef();
						}
						break;
					case 4:
						{
						State = 388;
						procedureDef();
						}
						break;
					}
					} 
				}
				State = 393;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 394;
			Match(NL);
			State = 395;
			Match(END);
			State = 396;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(ElanParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmutableClassContext immutableClass() {
		ImmutableClassContext _localctx = new ImmutableClassContext(Context, State);
		EnterRule(_localctx, 50, RULE_immutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			Match(NL);
			State = 399;
			Match(IMMUTABLE);
			State = 400;
			Match(CLASS);
			State = 401;
			Match(TYPENAME);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 402;
				inherits();
				}
			}

			State = 410;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 408;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						State = 405;
						constructor();
						}
						break;
					case 2:
						{
						State = 406;
						property();
						}
						break;
					case 3:
						{
						State = 407;
						functionDef();
						}
						break;
					}
					} 
				}
				State = 412;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			State = 413;
			Match(NL);
			State = 414;
			Match(END);
			State = 415;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ElanParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(ElanParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(ElanParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(ElanParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(ElanParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(ElanParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(ElanParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext[] procedureSignature() {
			return GetRuleContexts<ProcedureSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature(int i) {
			return GetRuleContext<ProcedureSignatureContext>(i);
		}
		public AbstractClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractClassContext abstractClass() {
		AbstractClassContext _localctx = new AbstractClassContext(Context, State);
		EnterRule(_localctx, 52, RULE_abstractClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(NL);
			State = 418;
			Match(ABSTRACT);
			State = 419;
			Match(CLASS);
			State = 420;
			Match(TYPENAME);
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 421;
				inherits();
				}
			}

			State = 433;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 431;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						State = 424;
						property();
						}
						break;
					case 2:
						{
						State = 425;
						Match(NL);
						State = 426;
						Match(FUNCTION);
						State = 427;
						functionSignature();
						}
						break;
					case 3:
						{
						State = 428;
						Match(NL);
						State = 429;
						Match(PROCEDURE);
						State = 430;
						procedureSignature();
						}
						break;
					}
					} 
				}
				State = 435;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 436;
			Match(NL);
			State = 437;
			Match(END);
			State = 438;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(ElanParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public InheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritsContext inherits() {
		InheritsContext _localctx = new InheritsContext(Context, State);
		EnterRule(_localctx, 54, RULE_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(INHERITS);
			State = 441;
			type();
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 442;
				Match(COMMA);
				State = 443;
				type();
				}
				}
				State = 448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(ElanParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ElanParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ElanParser.PRIVATE, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 56, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(NL);
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 450;
				Match(PRIVATE);
				}
			}

			State = 453;
			Match(PROPERTY);
			State = 454;
			Match(IDENTIFIER);
			State = 455;
			Match(AS);
			State = 456;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRUCTOR() { return GetTokens(ElanParser.CONSTRUCTOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(ElanParser.CONSTRUCTOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 58, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(NL);
			State = 459;
			Match(CONSTRUCTOR);
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 460;
				Match(OPEN_BRACKET);
				State = 462;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 461;
					Match(NL);
					}
					break;
				}
				State = 465;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 464;
					parameterList();
					}
					break;
				}
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 467;
					Match(NL);
					}
				}

				State = 470;
				Match(CLOSE_BRACKET);
				}
			}

			State = 473;
			statementBlock();
			State = 474;
			Match(NL);
			State = 475;
			Match(END);
			State = 476;
			Match(CONSTRUCTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ElanParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(Context, State);
		EnterRule(_localctx, 60, RULE_newInstance);
		int _la;
		try {
			State = 490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				Match(NEW);
				State = 479;
				type();
				State = 480;
				Match(OPEN_BRACKET);
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9146793104764301308L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 16257L) != 0)) {
					{
					State = 481;
					argumentList();
					}
				}

				State = 484;
				Match(CLOSE_BRACKET);
				State = 486;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 485;
					withClause();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 488;
				Match(IDENTIFIER);
				State = 489;
				withClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(ElanParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 62, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(WITH);
			State = 493;
			Match(OPEN_BRACE);
			State = 494;
			assignment();
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 495;
				Match(COMMA);
				State = 496;
				assignment();
				}
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 502;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduralControlFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInContext forIn() {
			return GetRuleContext<ForInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryContext @try() {
			return GetRuleContext<TryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ProceduralControlFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proceduralControlFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProceduralControlFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProceduralControlFlowContext proceduralControlFlow() {
		ProceduralControlFlowContext _localctx = new ProceduralControlFlowContext(Context, State);
		EnterRule(_localctx, 64, RULE_proceduralControlFlow);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				@for();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 506;
				forIn();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 507;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 508;
				repeat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 509;
				@try();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 510;
				@switch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(ElanParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(ElanParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(ElanParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(ElanParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(ElanParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(ElanParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 66, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(NL);
			State = 514;
			Match(IF);
			State = 515;
			expression(0);
			State = 516;
			Match(THEN);
			State = 517;
			statementBlock();
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 518;
					Match(NL);
					State = 519;
					Match(ELSE);
					State = 520;
					Match(IF);
					State = 521;
					expression(0);
					State = 522;
					Match(THEN);
					State = 523;
					statementBlock();
					}
					} 
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			State = 533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 530;
				Match(NL);
				State = 531;
				Match(ELSE);
				State = 532;
				statementBlock();
				}
				break;
			}
			State = 535;
			Match(NL);
			State = 536;
			Match(END);
			State = 537;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(ElanParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(ElanParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ElanParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ElanParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(ElanParser.STEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 68, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(NL);
			State = 540;
			Match(FOR);
			State = 541;
			Match(IDENTIFIER);
			State = 542;
			Match(ASSIGN);
			State = 543;
			expression(0);
			State = 544;
			Match(TO);
			State = 545;
			expression(0);
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 546;
				Match(STEP);
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 547;
					Match(MINUS);
					}
				}

				State = 550;
				Match(LITERAL_INTEGER);
				}
			}

			State = 553;
			statementBlock();
			State = 554;
			Match(NL);
			State = 555;
			Match(END);
			State = 556;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(ElanParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(ElanParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ElanParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public ForInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInContext forIn() {
		ForInContext _localctx = new ForInContext(Context, State);
		EnterRule(_localctx, 70, RULE_forIn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			Match(NL);
			State = 559;
			Match(FOR);
			State = 560;
			Match(IDENTIFIER);
			State = 561;
			Match(IN);
			State = 562;
			expression(0);
			State = 563;
			statementBlock();
			State = 564;
			Match(NL);
			State = 565;
			Match(END);
			State = 566;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(ElanParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(ElanParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 72, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(NL);
			State = 569;
			Match(WHILE);
			State = 570;
			expression(0);
			State = 571;
			statementBlock();
			State = 572;
			Match(NL);
			State = 573;
			Match(END);
			State = 574;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(ElanParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(ElanParser.REPEAT, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 74, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(NL);
			{
			State = 577;
			Match(REPEAT);
			}
			State = 578;
			statementBlock();
			State = 579;
			Match(NL);
			State = 580;
			Match(UNTIL);
			State = 581;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(ElanParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(ElanParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ElanParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryContext @try() {
		TryContext _localctx = new TryContext(Context, State);
		EnterRule(_localctx, 76, RULE_try);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(NL);
			State = 584;
			Match(TRY);
			State = 585;
			statementBlock();
			State = 592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 586;
				Match(NL);
				State = 587;
				Match(CATCH);
				State = 588;
				Match(IDENTIFIER);
				State = 589;
				type();
				State = 590;
				statementBlock();
				}
				break;
			}
			State = 594;
			Match(NL);
			State = 595;
			Match(END);
			State = 596;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(ElanParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(ElanParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ElanParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseDefaultContext caseDefault() {
			return GetRuleContext<CaseDefaultContext>(0);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 78, RULE_switch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(NL);
			State = 599;
			Match(SWITCH);
			State = 600;
			expression(0);
			State = 604;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 601;
					@case();
					}
					} 
				}
				State = 606;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			State = 608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 607;
				caseDefault();
				}
				break;
			}
			State = 610;
			Match(NL);
			State = 611;
			Match(END);
			State = 612;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(ElanParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 80, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			Match(NL);
			State = 615;
			Match(CASE);
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 616;
				Match(MINUS);
				}
			}

			State = 619;
			literalValue();
			State = 620;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(ElanParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseDefaultContext caseDefault() {
		CaseDefaultContext _localctx = new CaseDefaultContext(Context, State);
		EnterRule(_localctx, 82, RULE_caseDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(NL);
			State = 623;
			Match(DEFAULT);
			State = 624;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracketedExpressionContext bracketedExpression() {
			return GetRuleContext<BracketedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException() {
			return GetRuleContext<ThrowExceptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ElanParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 627;
				bracketedExpression();
				}
				break;
			case 2:
				{
				State = 628;
				methodCall();
				}
				break;
			case 3:
				{
				State = 629;
				value();
				}
				break;
			case 4:
				{
				State = 630;
				unaryOp();
				State = 631;
				expression(8);
				}
				break;
			case 5:
				{
				State = 633;
				newInstance();
				}
				break;
			case 6:
				{
				State = 634;
				ifExpression();
				}
				break;
			case 7:
				{
				State = 635;
				lambda();
				}
				break;
			case 8:
				{
				State = 636;
				throwException();
				}
				break;
			case 9:
				{
				State = 637;
				Match(NL);
				State = 638;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 658;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 656;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 641;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 642;
						Match(POWER);
						State = 643;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 644;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 645;
						binaryOp();
						State = 646;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 648;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 649;
						index();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 650;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 651;
						Match(DOT);
						State = 652;
						methodCall();
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 653;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 654;
						Match(DOT);
						State = 655;
						Match(IDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 660;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracketedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public BracketedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketedExpressionContext bracketedExpression() {
		BracketedExpressionContext _localctx = new BracketedExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_bracketedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			Match(OPEN_BRACKET);
			State = 662;
			expression(0);
			State = 663;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ElanParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ElanParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ElanParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_ifExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 665;
				Match(NL);
				}
			}

			State = 668;
			Match(IF);
			State = 669;
			expression(0);
			State = 671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 670;
				Match(NL);
				}
			}

			State = 673;
			Match(THEN);
			State = 674;
			expression(0);
			State = 676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 675;
				Match(NL);
				}
			}

			State = 678;
			Match(ELSE);
			State = 679;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(ElanParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 90, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			Match(LAMBDA);
			State = 682;
			argumentList();
			State = 683;
			Match(ARROW);
			State = 684;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(ElanParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public ThrowExceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwException; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowException(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExceptionContext throwException() {
		ThrowExceptionContext _localctx = new ThrowExceptionContext(Context, State);
		EnterRule(_localctx, 92, RULE_throwException);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			Match(THROW);
			State = 687;
			type();
			{
			State = 688;
			Match(OPEN_BRACKET);
			State = 689;
			argumentList();
			State = 690;
			Match(CLOSE_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(ElanParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(ElanParser.CLOSE_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ElanParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 94, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			Match(OPEN_SQ_BRACKET);
			State = 699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 693;
				expression(0);
				}
				break;
			case 2:
				{
				State = 694;
				expression(0);
				State = 695;
				Match(COMMA);
				State = 696;
				expression(0);
				}
				break;
			case 3:
				{
				State = 698;
				range();
				}
				break;
			}
			State = 701;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(ElanParser.DOUBLE_DOT, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 96, RULE_range);
		try {
			State = 712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 703;
				expression(0);
				State = 704;
				Match(DOUBLE_DOT);
				State = 705;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 707;
				expression(0);
				State = 708;
				Match(DOUBLE_DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 710;
				Match(DOUBLE_DOT);
				State = 711;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ElanParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ElanParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ElanParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureDefinitionContext dataStructureDefinition() {
			return GetRuleContext<DataStructureDefinitionContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 98, RULE_value);
		int _la;
		try {
			State = 722;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 714;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SELF) {
					{
					State = 715;
					Match(SELF);
					State = 716;
					Match(DOT);
					}
				}

				State = 719;
				Match(IDENTIFIER);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 720;
				dataStructureDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 721;
				Match(SELF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDataStructureContext literalDataStructure() {
			return GetRuleContext<LiteralDataStructureContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 100, RULE_literal);
		try {
			State = 726;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
			case TYPENAME:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_DECIMAL:
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 724;
				literalValue();
				}
				break;
			case OPEN_BRACE:
			case OPEN_BRACKET:
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 725;
				literalDataStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VALUE() { return GetToken(ElanParser.BOOL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(ElanParser.LITERAL_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_DECIMAL() { return GetToken(ElanParser.LITERAL_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_CHAR() { return GetToken(ElanParser.LITERAL_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 102, RULE_literalValue);
		try {
			State = 734;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 728;
				Match(BOOL_VALUE);
				}
				break;
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 729;
				Match(LITERAL_INTEGER);
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 730;
				Match(LITERAL_FLOAT);
				}
				break;
			case LITERAL_DECIMAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 731;
				Match(LITERAL_DECIMAL);
				}
				break;
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 732;
				Match(LITERAL_CHAR);
				}
				break;
			case TYPENAME:
				EnterOuterAlt(_localctx, 6);
				{
				State = 733;
				enumValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListDefinitionContext listDefinition() {
			return GetRuleContext<ListDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDefinitionContext arrayDefinition() {
			return GetRuleContext<ArrayDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleDefinitionContext tupleDefinition() {
			return GetRuleContext<TupleDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryDefinitionContext dictionaryDefinition() {
			return GetRuleContext<DictionaryDefinitionContext>(0);
		}
		public DataStructureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureDefinitionContext dataStructureDefinition() {
		DataStructureDefinitionContext _localctx = new DataStructureDefinitionContext(Context, State);
		EnterRule(_localctx, 104, RULE_dataStructureDefinition);
		try {
			State = 740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736;
				listDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737;
				arrayDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 738;
				tupleDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 739;
				dictionaryDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDataStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(ElanParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTupleContext literalTuple() {
			return GetRuleContext<LiteralTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralListContext literalList() {
			return GetRuleContext<LiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDictionaryContext literalDictionary() {
			return GetRuleContext<LiteralDictionaryContext>(0);
		}
		public LiteralDataStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDataStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDataStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDataStructureContext literalDataStructure() {
		LiteralDataStructureContext _localctx = new LiteralDataStructureContext(Context, State);
		EnterRule(_localctx, 106, RULE_literalDataStructure);
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742;
				Match(LITERAL_STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743;
				literalTuple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 744;
				literalList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 745;
				literalDictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public TupleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDefinitionContext tupleDefinition() {
		TupleDefinitionContext _localctx = new TupleDefinitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_tupleDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(OPEN_BRACKET);
			State = 749;
			expression(0);
			State = 750;
			Match(COMMA);
			State = 751;
			expression(0);
			State = 756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 752;
				Match(COMMA);
				State = 753;
				expression(0);
				}
				}
				State = 758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 759;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		public LiteralTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTupleContext literalTuple() {
		LiteralTupleContext _localctx = new LiteralTupleContext(Context, State);
		EnterRule(_localctx, 110, RULE_literalTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			Match(OPEN_BRACKET);
			State = 762;
			literal();
			State = 763;
			Match(COMMA);
			State = 764;
			literal();
			State = 769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 765;
				Match(COMMA);
				State = 766;
				literal();
				}
				}
				State = 771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 772;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public TupleDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDecompContext tupleDecomp() {
		TupleDecompContext _localctx = new TupleDecompContext(Context, State);
		EnterRule(_localctx, 112, RULE_tupleDecomp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			Match(OPEN_BRACKET);
			State = 775;
			Match(IDENTIFIER);
			State = 778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 776;
				Match(COMMA);
				State = 777;
				Match(IDENTIFIER);
				}
				}
				State = 780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 782;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public ListDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDefinitionContext listDefinition() {
		ListDefinitionContext _localctx = new ListDefinitionContext(Context, State);
		EnterRule(_localctx, 114, RULE_listDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			Match(OPEN_BRACE);
			{
			State = 786;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 785;
				Match(NL);
				}
				break;
			}
			State = 788;
			expression(0);
			State = 793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 789;
				Match(COMMA);
				State = 790;
				expression(0);
				}
				}
				State = 795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 796;
				Match(NL);
				}
			}

			}
			State = 799;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralListContext literalList() {
		LiteralListContext _localctx = new LiteralListContext(Context, State);
		EnterRule(_localctx, 116, RULE_literalList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			Match(OPEN_BRACE);
			{
			State = 803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 802;
				Match(NL);
				}
			}

			State = 805;
			literal();
			State = 810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 806;
				Match(COMMA);
				State = 807;
				literal();
				}
				}
				State = 812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 813;
				Match(NL);
				}
			}

			}
			State = 816;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ElanParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ElanParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		public ListDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDecompContext listDecomp() {
		ListDecompContext _localctx = new ListDecompContext(Context, State);
		EnterRule(_localctx, 118, RULE_listDecomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(OPEN_BRACE);
			State = 819;
			Match(IDENTIFIER);
			State = 820;
			Match(COLON);
			State = 821;
			Match(IDENTIFIER);
			State = 822;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ElanParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(ElanParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListDefinitionContext listDefinition() {
			return GetRuleContext<ListDefinitionContext>(0);
		}
		public ArrayDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDefinitionContext arrayDefinition() {
		ArrayDefinitionContext _localctx = new ArrayDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_arrayDefinition);
		int _la;
		try {
			State = 851;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 824;
				Match(NEW);
				State = 825;
				Match(ARRAY);
				State = 826;
				genericSpecifier();
				State = 827;
				Match(OPEN_BRACKET);
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LITERAL_INTEGER) {
					{
					State = 828;
					Match(LITERAL_INTEGER);
					}
				}

				State = 831;
				Match(CLOSE_BRACKET);
				State = 833;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
				case 1:
					{
					State = 832;
					listDefinition();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 835;
				Match(NEW);
				State = 836;
				Match(ARRAY);
				State = 837;
				genericSpecifier();
				State = 838;
				listDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 840;
				Match(NEW);
				State = 841;
				Match(ARRAY);
				State = 842;
				Match(OPEN_BRACKET);
				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LITERAL_INTEGER) {
					{
					State = 843;
					Match(LITERAL_INTEGER);
					}
				}

				State = 846;
				Match(CLOSE_BRACKET);
				State = 847;
				listDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 848;
				Match(NEW);
				State = 849;
				Match(ARRAY);
				State = 850;
				listDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext[] kvp() {
			return GetRuleContexts<KvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext kvp(int i) {
			return GetRuleContext<KvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public DictionaryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryDefinitionContext dictionaryDefinition() {
		DictionaryDefinitionContext _localctx = new DictionaryDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_dictionaryDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 853;
			Match(OPEN_BRACE);
			{
			State = 855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 854;
				Match(NL);
				}
				break;
			}
			State = 857;
			kvp();
			State = 862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 858;
				Match(COMMA);
				State = 859;
				kvp();
				}
				}
				State = 864;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 865;
				Match(NL);
				}
			}

			}
			State = 868;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(ElanParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(ElanParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext[] literalKvp() {
			return GetRuleContexts<LiteralKvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralKvpContext literalKvp(int i) {
			return GetRuleContext<LiteralKvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ElanParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ElanParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public LiteralDictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDictionaryContext literalDictionary() {
		LiteralDictionaryContext _localctx = new LiteralDictionaryContext(Context, State);
		EnterRule(_localctx, 124, RULE_literalDictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870;
			Match(OPEN_BRACE);
			{
			State = 872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 871;
				Match(NL);
				}
			}

			State = 874;
			literalKvp();
			State = 879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 875;
				Match(COMMA);
				State = 876;
				literalKvp();
				}
				}
				State = 881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 882;
				Match(NL);
				}
			}

			}
			State = 885;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public KvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpContext kvp() {
		KvpContext _localctx = new KvpContext(Context, State);
		EnterRule(_localctx, 126, RULE_kvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 887;
			expression(0);
			State = 888;
			Match(COLON);
			State = 889;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralKvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElanParser.COLON, 0); }
		public LiteralKvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalKvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralKvpContext literalKvp() {
		LiteralKvpContext _localctx = new LiteralKvpContext(Context, State);
		EnterRule(_localctx, 128, RULE_literalKvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 891;
			literal();
			State = 892;
			Match(COLON);
			State = 893;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(ElanParser.OP_NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 130, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==OP_NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOpContext arithmeticOp() {
			return GetRuleContext<ArithmeticOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 132, RULE_binaryOp);
		try {
			State = 900;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case MULT:
			case DIVIDE:
			case POWER:
			case MOD:
			case INT_DIV:
				EnterOuterAlt(_localctx, 1);
				{
				State = 897;
				arithmeticOp();
				}
				break;
			case OP_AND:
			case OP_OR:
			case OP_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 898;
				logicalOp();
				}
				break;
			case LT:
			case GT:
			case OP_EQ:
			case OP_NE:
			case OP_LE:
			case OP_GE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 899;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(ElanParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(ElanParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ElanParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ElanParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DIV() { return GetToken(ElanParser.INT_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ElanParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElanParser.MINUS, 0); }
		public ArithmeticOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOpContext arithmeticOp() {
		ArithmeticOpContext _localctx = new ArithmeticOpContext(Context, State);
		EnterRule(_localctx, 134, RULE_arithmeticOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(ElanParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(ElanParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(ElanParser.OP_XOR, 0); }
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 136, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(ElanParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(ElanParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(ElanParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(ElanParser.OP_NE, 0); }
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 138, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 1923L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_TYPE() { return GetToken(ElanParser.VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureTypeContext dataStructureType() {
			return GetRuleContext<DataStructureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(ElanParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_type);
		try {
			State = 915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908;
				Match(VALUE_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 909;
				dataStructureType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 910;
				Match(TYPENAME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 911;
				Match(TYPENAME);
				State = 912;
				genericSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 913;
				tupleType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 914;
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ElanParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ElanParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(ElanParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERABLE() { return GetToken(ElanParser.ITERABLE, 0); }
		public DataStructureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureTypeContext dataStructureType() {
		DataStructureTypeContext _localctx = new DataStructureTypeContext(Context, State);
		EnterRule(_localctx, 142, RULE_dataStructureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055531162664960L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 918;
			genericSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ElanParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ElanParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public GenericSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericSpecifierContext genericSpecifier() {
		GenericSpecifierContext _localctx = new GenericSpecifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_genericSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			Match(LT);
			State = 921;
			type();
			State = 926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 922;
				Match(COMMA);
				State = 923;
				type();
				}
				}
				State = 928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 929;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931;
			Match(OPEN_BRACKET);
			State = 932;
			type();
			State = 935;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 933;
				Match(COMMA);
				State = 934;
				type();
				}
				}
				State = 937;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 939;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ElanParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ElanParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ElanParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElanParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElanParser.COMMA, i);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElanVisitor<TResult> typedVisitor = visitor as IElanVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 148, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			Match(OPEN_BRACKET);
			State = 942;
			type();
			State = 947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 943;
				Match(COMMA);
				State = 944;
				type();
				}
				}
				State = 949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 950;
			Match(ARROW);
			State = 951;
			type();
			State = 952;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 42: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,90,955,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,1,0,1,0,1,0,1,0,5,0,157,
		8,0,10,0,12,0,160,9,0,1,0,5,0,163,8,0,10,0,12,0,166,9,0,1,0,1,0,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,5,2,182,8,2,10,2,12,2,185,9,
		2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,7,1,7,3,7,206,8,7,1,7,1,7,3,7,210,8,7,1,7,1,7,3,7,214,8,7,1,8,3,8,217,
		8,8,1,8,1,8,3,8,221,8,8,1,8,1,8,3,8,225,8,8,1,8,1,8,1,9,1,9,1,9,5,9,232,
		8,9,10,9,12,9,235,9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,3,11,248,8,11,1,11,3,11,251,8,11,1,11,1,11,1,12,1,12,1,12,5,12,258,
		8,12,10,12,12,12,261,9,12,1,13,3,13,264,8,13,1,13,1,13,1,13,1,14,1,14,
		3,14,271,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		16,1,16,1,16,1,16,3,16,288,8,16,1,16,1,16,3,16,292,8,16,1,16,3,16,295,
		8,16,1,16,1,16,1,17,1,17,3,17,301,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,5,17,311,8,17,10,17,12,17,314,9,17,1,17,3,17,317,8,17,1,17,1,17,
		3,17,321,8,17,1,18,1,18,1,18,3,18,326,8,18,1,18,3,18,329,8,18,1,18,3,18,
		332,8,18,1,18,1,18,3,18,336,8,18,1,18,1,18,3,18,340,8,18,1,18,1,18,1,19,
		1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,357,8,
		20,1,20,5,20,360,8,20,10,20,12,20,363,9,20,1,20,1,20,1,20,1,20,1,21,1,
		21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,3,23,378,8,23,1,24,1,24,1,24,1,24,
		3,24,384,8,24,1,24,1,24,1,24,1,24,5,24,390,8,24,10,24,12,24,393,9,24,1,
		24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,404,8,25,1,25,1,25,1,25,
		5,25,409,8,25,10,25,12,25,412,9,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
		1,26,1,26,3,26,423,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,432,8,
		26,10,26,12,26,435,9,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,5,27,445,
		8,27,10,27,12,27,448,9,27,1,28,1,28,3,28,452,8,28,1,28,1,28,1,28,1,28,
		1,28,1,29,1,29,1,29,1,29,3,29,463,8,29,1,29,3,29,466,8,29,1,29,3,29,469,
		8,29,1,29,3,29,472,8,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,3,
		30,483,8,30,1,30,1,30,3,30,487,8,30,1,30,1,30,3,30,491,8,30,1,31,1,31,
		1,31,1,31,1,31,5,31,498,8,31,10,31,12,31,501,9,31,1,31,1,31,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,3,32,512,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,5,33,526,8,33,10,33,12,33,529,9,33,1,33,1,
		33,1,33,3,33,534,8,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,3,34,549,8,34,1,34,3,34,552,8,34,1,34,1,34,1,34,1,34,1,
		34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,
		36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,593,8,38,1,38,1,38,1,38,1,38,1,39,
		1,39,1,39,1,39,5,39,603,8,39,10,39,12,39,606,9,39,1,39,3,39,609,8,39,1,
		39,1,39,1,39,1,39,1,40,1,40,1,40,3,40,618,8,40,1,40,1,40,1,40,1,41,1,41,
		1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
		1,42,3,42,640,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
		42,1,42,1,42,1,42,1,42,5,42,657,8,42,10,42,12,42,660,9,42,1,43,1,43,1,
		43,1,43,1,44,3,44,667,8,44,1,44,1,44,1,44,3,44,672,8,44,1,44,1,44,1,44,
		3,44,677,8,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,
		46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,700,8,47,1,47,1,47,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,713,8,48,1,49,1,49,1,
		49,3,49,718,8,49,1,49,1,49,1,49,3,49,723,8,49,1,50,1,50,3,50,727,8,50,
		1,51,1,51,1,51,1,51,1,51,1,51,3,51,735,8,51,1,52,1,52,1,52,1,52,3,52,741,
		8,52,1,53,1,53,1,53,1,53,3,53,747,8,53,1,54,1,54,1,54,1,54,1,54,1,54,5,
		54,755,8,54,10,54,12,54,758,9,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,
		55,5,55,768,8,55,10,55,12,55,771,9,55,1,55,1,55,1,56,1,56,1,56,1,56,4,
		56,779,8,56,11,56,12,56,780,1,56,1,56,1,57,1,57,3,57,787,8,57,1,57,1,57,
		1,57,5,57,792,8,57,10,57,12,57,795,9,57,1,57,3,57,798,8,57,1,57,1,57,1,
		58,1,58,3,58,804,8,58,1,58,1,58,1,58,5,58,809,8,58,10,58,12,58,812,9,58,
		1,58,3,58,815,8,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,
		60,1,60,1,60,3,60,830,8,60,1,60,1,60,3,60,834,8,60,1,60,1,60,1,60,1,60,
		1,60,1,60,1,60,1,60,1,60,3,60,845,8,60,1,60,1,60,1,60,1,60,1,60,3,60,852,
		8,60,1,61,1,61,3,61,856,8,61,1,61,1,61,1,61,5,61,861,8,61,10,61,12,61,
		864,9,61,1,61,3,61,867,8,61,1,61,1,61,1,62,1,62,3,62,873,8,62,1,62,1,62,
		1,62,5,62,878,8,62,10,62,12,62,881,9,62,1,62,3,62,884,8,62,1,62,1,62,1,
		63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,66,1,66,1,66,3,66,901,
		8,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		3,70,916,8,70,1,71,1,71,1,71,1,72,1,72,1,72,1,72,5,72,925,8,72,10,72,12,
		72,928,9,72,1,72,1,72,1,73,1,73,1,73,1,73,4,73,936,8,73,11,73,12,73,937,
		1,73,1,73,1,74,1,74,1,74,1,74,5,74,946,8,74,10,74,12,74,949,9,74,1,74,
		1,74,1,74,1,74,1,74,0,1,84,75,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,0,6,2,0,12,
		12,27,27,2,0,63,63,73,73,1,0,62,68,2,0,72,72,74,75,2,0,69,70,76,79,1,0,
		46,49,1024,0,158,1,0,0,0,2,169,1,0,0,0,4,183,1,0,0,0,6,186,1,0,0,0,8,189,
		1,0,0,0,10,192,1,0,0,0,12,198,1,0,0,0,14,213,1,0,0,0,16,216,1,0,0,0,18,
		228,1,0,0,0,20,236,1,0,0,0,22,244,1,0,0,0,24,254,1,0,0,0,26,263,1,0,0,
		0,28,270,1,0,0,0,30,272,1,0,0,0,32,283,1,0,0,0,34,298,1,0,0,0,36,322,1,
		0,0,0,38,343,1,0,0,0,40,349,1,0,0,0,42,368,1,0,0,0,44,370,1,0,0,0,46,377,
		1,0,0,0,48,379,1,0,0,0,50,398,1,0,0,0,52,417,1,0,0,0,54,440,1,0,0,0,56,
		449,1,0,0,0,58,458,1,0,0,0,60,490,1,0,0,0,62,492,1,0,0,0,64,511,1,0,0,
		0,66,513,1,0,0,0,68,539,1,0,0,0,70,558,1,0,0,0,72,568,1,0,0,0,74,576,1,
		0,0,0,76,583,1,0,0,0,78,598,1,0,0,0,80,614,1,0,0,0,82,622,1,0,0,0,84,639,
		1,0,0,0,86,661,1,0,0,0,88,666,1,0,0,0,90,681,1,0,0,0,92,686,1,0,0,0,94,
		692,1,0,0,0,96,712,1,0,0,0,98,722,1,0,0,0,100,726,1,0,0,0,102,734,1,0,
		0,0,104,740,1,0,0,0,106,746,1,0,0,0,108,748,1,0,0,0,110,761,1,0,0,0,112,
		774,1,0,0,0,114,784,1,0,0,0,116,801,1,0,0,0,118,818,1,0,0,0,120,851,1,
		0,0,0,122,853,1,0,0,0,124,870,1,0,0,0,126,887,1,0,0,0,128,891,1,0,0,0,
		130,895,1,0,0,0,132,900,1,0,0,0,134,902,1,0,0,0,136,904,1,0,0,0,138,906,
		1,0,0,0,140,915,1,0,0,0,142,917,1,0,0,0,144,920,1,0,0,0,146,931,1,0,0,
		0,148,941,1,0,0,0,150,157,3,2,1,0,151,157,3,20,10,0,152,157,3,28,14,0,
		153,157,3,38,19,0,154,157,3,40,20,0,155,157,3,46,23,0,156,150,1,0,0,0,
		156,151,1,0,0,0,156,152,1,0,0,0,156,153,1,0,0,0,156,154,1,0,0,0,156,155,
		1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,164,1,0,0,
		0,160,158,1,0,0,0,161,163,5,2,0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,
		162,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,5,
		0,0,1,168,1,1,0,0,0,169,170,5,2,0,0,170,171,5,25,0,0,171,172,3,4,2,0,172,
		173,5,2,0,0,173,174,5,15,0,0,174,175,5,25,0,0,175,3,1,0,0,0,176,182,3,
		10,5,0,177,182,3,12,6,0,178,182,3,64,32,0,179,182,3,6,3,0,180,182,3,8,
		4,0,181,176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,
		180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,5,1,0,
		0,0,185,183,1,0,0,0,186,187,5,2,0,0,187,188,3,84,42,0,188,7,1,0,0,0,189,
		190,5,2,0,0,190,191,3,92,46,0,191,9,1,0,0,0,192,193,5,2,0,0,193,194,5,
		41,0,0,194,195,3,14,7,0,195,196,5,50,0,0,196,197,3,84,42,0,197,11,1,0,
		0,0,198,199,5,2,0,0,199,200,3,14,7,0,200,201,5,50,0,0,201,202,3,84,42,
		0,202,13,1,0,0,0,203,204,5,33,0,0,204,206,5,59,0,0,205,203,1,0,0,0,205,
		206,1,0,0,0,206,207,1,0,0,0,207,209,5,81,0,0,208,210,3,94,47,0,209,208,
		1,0,0,0,209,210,1,0,0,0,210,214,1,0,0,0,211,214,3,112,56,0,212,214,3,118,
		59,0,213,205,1,0,0,0,213,211,1,0,0,0,213,212,1,0,0,0,214,15,1,0,0,0,215,
		217,7,0,0,0,216,215,1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,220,5,
		81,0,0,219,221,3,144,72,0,220,219,1,0,0,0,220,221,1,0,0,0,221,222,1,0,
		0,0,222,224,5,56,0,0,223,225,3,18,9,0,224,223,1,0,0,0,224,225,1,0,0,0,
		225,226,1,0,0,0,226,227,5,57,0,0,227,17,1,0,0,0,228,233,3,84,42,0,229,
		230,5,60,0,0,230,232,3,84,42,0,231,229,1,0,0,0,232,235,1,0,0,0,233,231,
		1,0,0,0,233,234,1,0,0,0,234,19,1,0,0,0,235,233,1,0,0,0,236,237,5,2,0,0,
		237,238,5,29,0,0,238,239,3,22,11,0,239,240,3,4,2,0,240,241,5,2,0,0,241,
		242,5,15,0,0,242,243,5,29,0,0,243,21,1,0,0,0,244,245,5,81,0,0,245,247,
		5,56,0,0,246,248,5,2,0,0,247,246,1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,
		0,249,251,3,24,12,0,250,249,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,
		253,5,57,0,0,253,23,1,0,0,0,254,259,3,26,13,0,255,256,5,60,0,0,256,258,
		3,26,13,0,257,255,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,
		0,0,260,25,1,0,0,0,261,259,1,0,0,0,262,264,5,2,0,0,263,262,1,0,0,0,263,
		264,1,0,0,0,264,265,1,0,0,0,265,266,5,81,0,0,266,267,3,140,70,0,267,27,
		1,0,0,0,268,271,3,30,15,0,269,271,3,32,16,0,270,268,1,0,0,0,270,269,1,
		0,0,0,271,29,1,0,0,0,272,273,5,2,0,0,273,274,5,18,0,0,274,275,3,36,18,
		0,275,276,3,4,2,0,276,277,5,2,0,0,277,278,5,32,0,0,278,279,3,84,42,0,279,
		280,5,2,0,0,280,281,5,15,0,0,281,282,5,18,0,0,282,31,1,0,0,0,283,284,5,
		2,0,0,284,285,5,18,0,0,285,287,3,36,18,0,286,288,5,2,0,0,287,286,1,0,0,
		0,287,288,1,0,0,0,288,289,1,0,0,0,289,291,5,51,0,0,290,292,5,2,0,0,291,
		290,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,295,3,34,17,0,294,293,
		1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,297,3,84,42,0,297,33,1,0,0,
		0,298,300,5,24,0,0,299,301,5,2,0,0,300,299,1,0,0,0,300,301,1,0,0,0,301,
		302,1,0,0,0,302,303,3,14,7,0,303,304,5,50,0,0,304,312,3,84,42,0,305,306,
		5,60,0,0,306,307,3,14,7,0,307,308,5,50,0,0,308,309,3,84,42,0,309,311,1,
		0,0,0,310,305,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,
		313,316,1,0,0,0,314,312,1,0,0,0,315,317,5,2,0,0,316,315,1,0,0,0,316,317,
		1,0,0,0,317,318,1,0,0,0,318,320,5,21,0,0,319,321,5,2,0,0,320,319,1,0,0,
		0,320,321,1,0,0,0,321,35,1,0,0,0,322,323,5,81,0,0,323,325,5,56,0,0,324,
		326,5,2,0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,329,3,
		24,12,0,328,327,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,330,332,5,2,0,
		0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,335,5,57,0,0,334,
		336,5,2,0,0,335,334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,339,5,
		5,0,0,338,340,5,2,0,0,339,338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,
		341,342,3,140,70,0,342,37,1,0,0,0,343,344,5,2,0,0,344,345,5,10,0,0,345,
		346,5,81,0,0,346,347,5,50,0,0,347,348,3,100,50,0,348,39,1,0,0,0,349,350,
		5,2,0,0,350,351,5,16,0,0,351,352,3,42,21,0,352,353,5,2,0,0,353,361,5,81,
		0,0,354,356,5,60,0,0,355,357,5,2,0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,
		358,1,0,0,0,358,360,5,81,0,0,359,354,1,0,0,0,360,363,1,0,0,0,361,359,1,
		0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,361,1,0,0,0,364,365,5,2,0,0,
		365,366,5,15,0,0,366,367,5,16,0,0,367,41,1,0,0,0,368,369,5,80,0,0,369,
		43,1,0,0,0,370,371,3,42,21,0,371,372,5,59,0,0,372,373,5,81,0,0,373,45,
		1,0,0,0,374,378,3,52,26,0,375,378,3,48,24,0,376,378,3,50,25,0,377,374,
		1,0,0,0,377,375,1,0,0,0,377,376,1,0,0,0,378,47,1,0,0,0,379,380,5,2,0,0,
		380,381,5,9,0,0,381,383,5,80,0,0,382,384,3,54,27,0,383,382,1,0,0,0,383,
		384,1,0,0,0,384,391,1,0,0,0,385,390,3,58,29,0,386,390,3,56,28,0,387,390,
		3,28,14,0,388,390,3,20,10,0,389,385,1,0,0,0,389,386,1,0,0,0,389,387,1,
		0,0,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,
		392,394,1,0,0,0,393,391,1,0,0,0,394,395,5,2,0,0,395,396,5,15,0,0,396,397,
		5,9,0,0,397,49,1,0,0,0,398,399,5,2,0,0,399,400,5,20,0,0,400,401,5,9,0,
		0,401,403,5,80,0,0,402,404,3,54,27,0,403,402,1,0,0,0,403,404,1,0,0,0,404,
		410,1,0,0,0,405,409,3,58,29,0,406,409,3,56,28,0,407,409,3,28,14,0,408,
		405,1,0,0,0,408,406,1,0,0,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,1,
		0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,413,414,5,2,0,0,
		414,415,5,15,0,0,415,416,5,9,0,0,416,51,1,0,0,0,417,418,5,2,0,0,418,419,
		5,6,0,0,419,420,5,9,0,0,420,422,5,80,0,0,421,423,3,54,27,0,422,421,1,0,
		0,0,422,423,1,0,0,0,423,433,1,0,0,0,424,432,3,56,28,0,425,426,5,2,0,0,
		426,427,5,18,0,0,427,432,3,36,18,0,428,429,5,2,0,0,429,430,5,29,0,0,430,
		432,3,22,11,0,431,424,1,0,0,0,431,425,1,0,0,0,431,428,1,0,0,0,432,435,
		1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,433,1,0,0,
		0,436,437,5,2,0,0,437,438,5,15,0,0,438,439,5,9,0,0,439,53,1,0,0,0,440,
		441,5,22,0,0,441,446,3,140,70,0,442,443,5,60,0,0,443,445,3,140,70,0,444,
		442,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,55,1,0,
		0,0,448,446,1,0,0,0,449,451,5,2,0,0,450,452,5,28,0,0,451,450,1,0,0,0,451,
		452,1,0,0,0,452,453,1,0,0,0,453,454,5,30,0,0,454,455,5,81,0,0,455,456,
		5,5,0,0,456,457,3,140,70,0,457,57,1,0,0,0,458,459,5,2,0,0,459,471,5,11,
		0,0,460,462,5,56,0,0,461,463,5,2,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,
		465,1,0,0,0,464,466,3,24,12,0,465,464,1,0,0,0,465,466,1,0,0,0,466,468,
		1,0,0,0,467,469,5,2,0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,
		0,470,472,5,57,0,0,471,460,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,
		474,3,4,2,0,474,475,5,2,0,0,475,476,5,15,0,0,476,477,5,11,0,0,477,59,1,
		0,0,0,478,479,5,26,0,0,479,480,3,140,70,0,480,482,5,56,0,0,481,483,3,18,
		9,0,482,481,1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,0,484,486,5,57,0,0,485,
		487,3,62,31,0,486,485,1,0,0,0,486,487,1,0,0,0,487,491,1,0,0,0,488,489,
		5,81,0,0,489,491,3,62,31,0,490,478,1,0,0,0,490,488,1,0,0,0,491,61,1,0,
		0,0,492,493,5,43,0,0,493,494,5,52,0,0,494,499,3,12,6,0,495,496,5,60,0,
		0,496,498,3,12,6,0,497,495,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,
		500,1,0,0,0,500,502,1,0,0,0,501,499,1,0,0,0,502,503,5,53,0,0,503,63,1,
		0,0,0,504,512,3,66,33,0,505,512,3,68,34,0,506,512,3,70,35,0,507,512,3,
		72,36,0,508,512,3,74,37,0,509,512,3,76,38,0,510,512,3,78,39,0,511,504,
		1,0,0,0,511,505,1,0,0,0,511,506,1,0,0,0,511,507,1,0,0,0,511,508,1,0,0,
		0,511,509,1,0,0,0,511,510,1,0,0,0,512,65,1,0,0,0,513,514,5,2,0,0,514,515,
		5,19,0,0,515,516,3,84,42,0,516,517,5,36,0,0,517,527,3,4,2,0,518,519,5,
		2,0,0,519,520,5,14,0,0,520,521,5,19,0,0,521,522,3,84,42,0,522,523,5,36,
		0,0,523,524,3,4,2,0,524,526,1,0,0,0,525,518,1,0,0,0,526,529,1,0,0,0,527,
		525,1,0,0,0,527,528,1,0,0,0,528,533,1,0,0,0,529,527,1,0,0,0,530,531,5,
		2,0,0,531,532,5,14,0,0,532,534,3,4,2,0,533,530,1,0,0,0,533,534,1,0,0,0,
		534,535,1,0,0,0,535,536,5,2,0,0,536,537,5,15,0,0,537,538,5,19,0,0,538,
		67,1,0,0,0,539,540,5,2,0,0,540,541,5,17,0,0,541,542,5,81,0,0,542,543,5,
		50,0,0,543,544,3,84,42,0,544,545,5,38,0,0,545,551,3,84,42,0,546,548,5,
		34,0,0,547,549,5,63,0,0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,
		0,550,552,5,82,0,0,551,546,1,0,0,0,551,552,1,0,0,0,552,553,1,0,0,0,553,
		554,3,4,2,0,554,555,5,2,0,0,555,556,5,15,0,0,556,557,5,17,0,0,557,69,1,
		0,0,0,558,559,5,2,0,0,559,560,5,17,0,0,560,561,5,81,0,0,561,562,5,21,0,
		0,562,563,3,84,42,0,563,564,3,4,2,0,564,565,5,2,0,0,565,566,5,15,0,0,566,
		567,5,17,0,0,567,71,1,0,0,0,568,569,5,2,0,0,569,570,5,42,0,0,570,571,3,
		84,42,0,571,572,3,4,2,0,572,573,5,2,0,0,573,574,5,15,0,0,574,575,5,42,
		0,0,575,73,1,0,0,0,576,577,5,2,0,0,577,578,5,31,0,0,578,579,3,4,2,0,579,
		580,5,2,0,0,580,581,5,40,0,0,581,582,3,84,42,0,582,75,1,0,0,0,583,584,
		5,2,0,0,584,585,5,39,0,0,585,592,3,4,2,0,586,587,5,2,0,0,587,588,5,8,0,
		0,588,589,5,81,0,0,589,590,3,140,70,0,590,591,3,4,2,0,591,593,1,0,0,0,
		592,586,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,595,5,2,0,0,595,596,
		5,15,0,0,596,597,5,39,0,0,597,77,1,0,0,0,598,599,5,2,0,0,599,600,5,35,
		0,0,600,604,3,84,42,0,601,603,3,80,40,0,602,601,1,0,0,0,603,606,1,0,0,
		0,604,602,1,0,0,0,604,605,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,607,
		609,3,82,41,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,611,
		5,2,0,0,611,612,5,15,0,0,612,613,5,35,0,0,613,79,1,0,0,0,614,615,5,2,0,
		0,615,617,5,7,0,0,616,618,5,63,0,0,617,616,1,0,0,0,617,618,1,0,0,0,618,
		619,1,0,0,0,619,620,3,102,51,0,620,621,3,4,2,0,621,81,1,0,0,0,622,623,
		5,2,0,0,623,624,5,13,0,0,624,625,3,4,2,0,625,83,1,0,0,0,626,627,6,42,-1,
		0,627,640,3,86,43,0,628,640,3,16,8,0,629,640,3,98,49,0,630,631,3,130,65,
		0,631,632,3,84,42,8,632,640,1,0,0,0,633,640,3,60,30,0,634,640,3,88,44,
		0,635,640,3,90,45,0,636,640,3,92,46,0,637,638,5,2,0,0,638,640,3,84,42,
		1,639,626,1,0,0,0,639,628,1,0,0,0,639,629,1,0,0,0,639,630,1,0,0,0,639,
		633,1,0,0,0,639,634,1,0,0,0,639,635,1,0,0,0,639,636,1,0,0,0,639,637,1,
		0,0,0,640,658,1,0,0,0,641,642,10,7,0,0,642,643,5,66,0,0,643,657,3,84,42,
		8,644,645,10,6,0,0,645,646,3,132,66,0,646,647,3,84,42,7,647,657,1,0,0,
		0,648,649,10,11,0,0,649,657,3,94,47,0,650,651,10,10,0,0,651,652,5,59,0,
		0,652,657,3,16,8,0,653,654,10,9,0,0,654,655,5,59,0,0,655,657,5,81,0,0,
		656,641,1,0,0,0,656,644,1,0,0,0,656,648,1,0,0,0,656,650,1,0,0,0,656,653,
		1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,85,1,0,0,0,
		660,658,1,0,0,0,661,662,5,56,0,0,662,663,3,84,42,0,663,664,5,57,0,0,664,
		87,1,0,0,0,665,667,5,2,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,668,1,0,
		0,0,668,669,5,19,0,0,669,671,3,84,42,0,670,672,5,2,0,0,671,670,1,0,0,0,
		671,672,1,0,0,0,672,673,1,0,0,0,673,674,5,36,0,0,674,676,3,84,42,0,675,
		677,5,2,0,0,676,675,1,0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,679,5,
		14,0,0,679,680,3,84,42,0,680,89,1,0,0,0,681,682,5,23,0,0,682,683,3,18,
		9,0,683,684,5,51,0,0,684,685,3,84,42,0,685,91,1,0,0,0,686,687,5,37,0,0,
		687,688,3,140,70,0,688,689,5,56,0,0,689,690,3,18,9,0,690,691,5,57,0,0,
		691,93,1,0,0,0,692,699,5,54,0,0,693,700,3,84,42,0,694,695,3,84,42,0,695,
		696,5,60,0,0,696,697,3,84,42,0,697,700,1,0,0,0,698,700,3,96,48,0,699,693,
		1,0,0,0,699,694,1,0,0,0,699,698,1,0,0,0,700,701,1,0,0,0,701,702,5,55,0,
		0,702,95,1,0,0,0,703,704,3,84,42,0,704,705,5,58,0,0,705,706,3,84,42,0,
		706,713,1,0,0,0,707,708,3,84,42,0,708,709,5,58,0,0,709,713,1,0,0,0,710,
		711,5,58,0,0,711,713,3,84,42,0,712,703,1,0,0,0,712,707,1,0,0,0,712,710,
		1,0,0,0,713,97,1,0,0,0,714,723,3,100,50,0,715,716,5,33,0,0,716,718,5,59,
		0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,723,5,81,0,0,720,
		723,3,104,52,0,721,723,5,33,0,0,722,714,1,0,0,0,722,717,1,0,0,0,722,720,
		1,0,0,0,722,721,1,0,0,0,723,99,1,0,0,0,724,727,3,102,51,0,725,727,3,106,
		53,0,726,724,1,0,0,0,726,725,1,0,0,0,727,101,1,0,0,0,728,735,5,44,0,0,
		729,735,5,82,0,0,730,735,5,83,0,0,731,735,5,84,0,0,732,735,5,85,0,0,733,
		735,3,44,22,0,734,728,1,0,0,0,734,729,1,0,0,0,734,730,1,0,0,0,734,731,
		1,0,0,0,734,732,1,0,0,0,734,733,1,0,0,0,735,103,1,0,0,0,736,741,3,114,
		57,0,737,741,3,120,60,0,738,741,3,108,54,0,739,741,3,122,61,0,740,736,
		1,0,0,0,740,737,1,0,0,0,740,738,1,0,0,0,740,739,1,0,0,0,741,105,1,0,0,
		0,742,747,5,86,0,0,743,747,3,110,55,0,744,747,3,116,58,0,745,747,3,124,
		62,0,746,742,1,0,0,0,746,743,1,0,0,0,746,744,1,0,0,0,746,745,1,0,0,0,747,
		107,1,0,0,0,748,749,5,56,0,0,749,750,3,84,42,0,750,751,5,60,0,0,751,756,
		3,84,42,0,752,753,5,60,0,0,753,755,3,84,42,0,754,752,1,0,0,0,755,758,1,
		0,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,759,1,0,0,0,758,756,1,0,0,0,
		759,760,5,57,0,0,760,109,1,0,0,0,761,762,5,56,0,0,762,763,3,100,50,0,763,
		764,5,60,0,0,764,769,3,100,50,0,765,766,5,60,0,0,766,768,3,100,50,0,767,
		765,1,0,0,0,768,771,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,772,1,
		0,0,0,771,769,1,0,0,0,772,773,5,57,0,0,773,111,1,0,0,0,774,775,5,56,0,
		0,775,778,5,81,0,0,776,777,5,60,0,0,777,779,5,81,0,0,778,776,1,0,0,0,779,
		780,1,0,0,0,780,778,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,783,5,
		57,0,0,783,113,1,0,0,0,784,786,5,52,0,0,785,787,5,2,0,0,786,785,1,0,0,
		0,786,787,1,0,0,0,787,788,1,0,0,0,788,793,3,84,42,0,789,790,5,60,0,0,790,
		792,3,84,42,0,791,789,1,0,0,0,792,795,1,0,0,0,793,791,1,0,0,0,793,794,
		1,0,0,0,794,797,1,0,0,0,795,793,1,0,0,0,796,798,5,2,0,0,797,796,1,0,0,
		0,797,798,1,0,0,0,798,799,1,0,0,0,799,800,5,53,0,0,800,115,1,0,0,0,801,
		803,5,52,0,0,802,804,5,2,0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,805,1,
		0,0,0,805,810,3,100,50,0,806,807,5,60,0,0,807,809,3,100,50,0,808,806,1,
		0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,814,1,0,0,0,
		812,810,1,0,0,0,813,815,5,2,0,0,814,813,1,0,0,0,814,815,1,0,0,0,815,816,
		1,0,0,0,816,817,5,53,0,0,817,117,1,0,0,0,818,819,5,52,0,0,819,820,5,81,
		0,0,820,821,5,61,0,0,821,822,5,81,0,0,822,823,5,53,0,0,823,119,1,0,0,0,
		824,825,5,26,0,0,825,826,5,46,0,0,826,827,3,144,72,0,827,829,5,56,0,0,
		828,830,5,82,0,0,829,828,1,0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,833,
		5,57,0,0,832,834,3,114,57,0,833,832,1,0,0,0,833,834,1,0,0,0,834,852,1,
		0,0,0,835,836,5,26,0,0,836,837,5,46,0,0,837,838,3,144,72,0,838,839,3,114,
		57,0,839,852,1,0,0,0,840,841,5,26,0,0,841,842,5,46,0,0,842,844,5,56,0,
		0,843,845,5,82,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,
		847,5,57,0,0,847,852,3,114,57,0,848,849,5,26,0,0,849,850,5,46,0,0,850,
		852,3,114,57,0,851,824,1,0,0,0,851,835,1,0,0,0,851,840,1,0,0,0,851,848,
		1,0,0,0,852,121,1,0,0,0,853,855,5,52,0,0,854,856,5,2,0,0,855,854,1,0,0,
		0,855,856,1,0,0,0,856,857,1,0,0,0,857,862,3,126,63,0,858,859,5,60,0,0,
		859,861,3,126,63,0,860,858,1,0,0,0,861,864,1,0,0,0,862,860,1,0,0,0,862,
		863,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,0,865,867,5,2,0,0,866,865,1,
		0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,869,5,53,0,0,869,123,1,0,0,0,
		870,872,5,52,0,0,871,873,5,2,0,0,872,871,1,0,0,0,872,873,1,0,0,0,873,874,
		1,0,0,0,874,879,3,128,64,0,875,876,5,60,0,0,876,878,3,128,64,0,877,875,
		1,0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,879,880,1,0,0,0,880,883,1,0,0,
		0,881,879,1,0,0,0,882,884,5,2,0,0,883,882,1,0,0,0,883,884,1,0,0,0,884,
		885,1,0,0,0,885,886,5,53,0,0,886,125,1,0,0,0,887,888,3,84,42,0,888,889,
		5,61,0,0,889,890,3,84,42,0,890,127,1,0,0,0,891,892,3,100,50,0,892,893,
		5,61,0,0,893,894,3,100,50,0,894,129,1,0,0,0,895,896,7,1,0,0,896,131,1,
		0,0,0,897,901,3,134,67,0,898,901,3,136,68,0,899,901,3,138,69,0,900,897,
		1,0,0,0,900,898,1,0,0,0,900,899,1,0,0,0,901,133,1,0,0,0,902,903,7,2,0,
		0,903,135,1,0,0,0,904,905,7,3,0,0,905,137,1,0,0,0,906,907,7,4,0,0,907,
		139,1,0,0,0,908,916,5,45,0,0,909,916,3,142,71,0,910,916,5,80,0,0,911,912,
		5,80,0,0,912,916,3,144,72,0,913,916,3,146,73,0,914,916,3,148,74,0,915,
		908,1,0,0,0,915,909,1,0,0,0,915,910,1,0,0,0,915,911,1,0,0,0,915,913,1,
		0,0,0,915,914,1,0,0,0,916,141,1,0,0,0,917,918,7,5,0,0,918,919,3,144,72,
		0,919,143,1,0,0,0,920,921,5,69,0,0,921,926,3,140,70,0,922,923,5,60,0,0,
		923,925,3,140,70,0,924,922,1,0,0,0,925,928,1,0,0,0,926,924,1,0,0,0,926,
		927,1,0,0,0,927,929,1,0,0,0,928,926,1,0,0,0,929,930,5,70,0,0,930,145,1,
		0,0,0,931,932,5,56,0,0,932,935,3,140,70,0,933,934,5,60,0,0,934,936,3,140,
		70,0,935,933,1,0,0,0,936,937,1,0,0,0,937,935,1,0,0,0,937,938,1,0,0,0,938,
		939,1,0,0,0,939,940,5,57,0,0,940,147,1,0,0,0,941,942,5,56,0,0,942,947,
		3,140,70,0,943,944,5,60,0,0,944,946,3,140,70,0,945,943,1,0,0,0,946,949,
		1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,949,947,1,0,0,
		0,950,951,5,51,0,0,951,952,3,140,70,0,952,953,5,57,0,0,953,149,1,0,0,0,
		98,156,158,164,181,183,205,209,213,216,220,224,233,247,250,259,263,270,
		287,291,294,300,312,316,320,325,328,331,335,339,356,361,377,383,389,391,
		403,408,410,422,431,433,446,451,462,465,468,471,482,486,490,499,511,527,
		533,548,551,592,604,608,617,639,656,658,666,671,676,699,712,717,722,726,
		734,740,746,756,769,780,786,793,797,803,810,814,829,833,844,851,855,862,
		866,872,879,883,900,915,926,937,947
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
